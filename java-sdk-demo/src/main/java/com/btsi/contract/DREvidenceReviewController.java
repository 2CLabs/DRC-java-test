package com.btsi.contract;

import java.math.BigInteger;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.Collections;
import java.util.List;
import org.fisco.bcos.sdk.v3.client.Client;
import org.fisco.bcos.sdk.v3.codec.datatypes.Address;
import org.fisco.bcos.sdk.v3.codec.datatypes.Bool;
import org.fisco.bcos.sdk.v3.codec.datatypes.DynamicArray;
import org.fisco.bcos.sdk.v3.codec.datatypes.Event;
import org.fisco.bcos.sdk.v3.codec.datatypes.Function;
import org.fisco.bcos.sdk.v3.codec.datatypes.Type;
import org.fisco.bcos.sdk.v3.codec.datatypes.TypeReference;
import org.fisco.bcos.sdk.v3.codec.datatypes.Utf8String;
import org.fisco.bcos.sdk.v3.codec.datatypes.generated.Bytes32;
import org.fisco.bcos.sdk.v3.codec.datatypes.generated.Uint256;
import org.fisco.bcos.sdk.v3.codec.datatypes.generated.Uint32;
import org.fisco.bcos.sdk.v3.codec.datatypes.generated.Uint8;
import org.fisco.bcos.sdk.v3.codec.datatypes.generated.tuples.generated.Tuple1;
import org.fisco.bcos.sdk.v3.codec.datatypes.generated.tuples.generated.Tuple2;
import org.fisco.bcos.sdk.v3.codec.datatypes.generated.tuples.generated.Tuple3;
import org.fisco.bcos.sdk.v3.codec.datatypes.generated.tuples.generated.Tuple4;
import org.fisco.bcos.sdk.v3.codec.datatypes.generated.tuples.generated.Tuple5;
import org.fisco.bcos.sdk.v3.contract.Contract;
import org.fisco.bcos.sdk.v3.crypto.CryptoSuite;
import org.fisco.bcos.sdk.v3.crypto.keypair.CryptoKeyPair;
import org.fisco.bcos.sdk.v3.model.CryptoType;
import org.fisco.bcos.sdk.v3.model.TransactionReceipt;
import org.fisco.bcos.sdk.v3.model.callback.TransactionCallback;
import org.fisco.bcos.sdk.v3.transaction.model.exception.ContractException;

@SuppressWarnings("unchecked")
public class DREvidenceReviewController extends Contract {
    public static final String[] BINARY_ARRAY = {
        "",
        "3232bc1d60991b6020820152906117bb565b90506110218b826040518060400160405280600b81526020016a1c995d9a595dd95c909a5960aa1b815250611c31565b95506000806110308d84611a97565b93509350505060006110618e856040518060400160405280600681526020016573746174757360d01b815250611c31565b905061109660405180604001604052806008815260200167191a5cd8589b195960c21b8152508261188a90919063ffffffff16565b99508197506110a68e8585611c8b565b9650505050505050945094509450949050565b60006110fb8686868080601f0160208091040260200160405190810160405280939291908181526020018383808284376000920191909152506118af92505050565b151560011461111c5760405162461bcd60e51b815260040161036b90613332565b600061117a86868080601f016020809104026020016040519081016040528093929190818152602001838380828437600092019190915250506040805180820190915260058152641c9a59da1d60da1b6020820152929150506117bb565b80519060200120905060006111ee6040518060400160405280600e81526020016d3a7265766965775f636f756e743d60901b81525086868080601f01602080910402602001604051908101604052809392919081815260200183838082843760009201919091525092939250506117bb9050565b90506111fb88838361190a565b63ffffffff1698975050505050505050565b6112178685611ee3565b61122186866118af565b15156001146112425760405162461bcd60e51b815260040161036b90613332565b6040805180820190915260058152641c9a59da1d60da1b602082015260009061126b90876117bb565b80519060200120905060006112a7876040518060400160405280600681526020016572657669657760d01b8152506117bb90919063ffffffff16565b905060005b85518163ffffffff161015611301576112ed868263ffffffff16815181106112d6576112d6613382565b6020026020010151836117bb90919063ffffffff16565b9150806112f98161335e565b9150506112ac565b5060008180519060200120905061133889826040518060400160405280600681526020016572657669657760d01b81525088611f7b565b61137b8982604051806040016040528060078152602001663b32b939b4b7b760c91b8152506040518060600160405280603681526020016135a160369139611a68565b6113a38982604051806040016040528060048152602001637564726960e01b8152508b611a68565b6113d289826040518060400160405280600b81526020016a1c995d9a595dd95c909a5960aa1b8152508a611a68565b61140489826040518060400160405280600e81526020016d0e4caecd2caee88c2e8c290c2e6d60931b8152508961204e565b600061143f6040518060400160405280600e81526020016d3a7265766965775f636f756e743d60901b815250896117bb90919063ffffffff16565b9050600061144e8b868461190a565b90506114668b8684611461856001613398565b612081565b6114b38b866114ad61147d8563ffffffff1661196b565b60408051808201909152600e81526d1d3932bb34b2bb9d34b73232bc1d60911b6020820152610a28908f906117bb565b866120b4565b6114e38b866040518060400160405280600d81526020016c7265766965775f636f756e743d60981b81525061190a565b905061151d8b866040518060400160405280600d81526020016c7265766965775f636f756e743d60981b8152508460016114619190613398565b6115348b866114ad610fc78563ffffffff1661196b565b61153f8b8a856120e7565b6115698b846040518060400160405280600681526020016572657669657760d01b81525089612238565b600061159f6115778561239d565b60408051808201909152600b81526a32b4b21d3932bb34b2bb9d60a91b6020820152906117bb565b90506115b38c8280519060200120866123b4565b505050505050505050505050565b6000806115f483604051806040016040528060058152602001641c9a59da1d60da1b8152506117bb90919063ffffffff16565b80519060200120905061162d84826040518060400160405280600d81526020016c7265766965775f636f756e743d60981b81525061190a565b949350505050565b8063ffffffff168260405161164a91906132db565b6040519081900381209033907f88ac03187be67c1563b7eb5df904b3339aa5af5e26f3df98b18f1c993ad2118a90600090a45050565b61168a828261053e565b61037e5761169781612432565b6116a2836020612444565b6040516020016116b39291906133c0565b60408051601f198184030181529082905262461bcd60e51b825261036b91600401613435565b6001600160a01b03811660009081526020839052604081208054606091839161170190613448565b80601f016020809104026020016040519081016040528092919081815260200182805461172d90613448565b801561177a5780601f1061174f5761010080835404028352916020019161177a565b820191906000526020600020905b81548152906001019060200180831161175d57829003601f168201915b5050835115159650929450505050505b9250929050565b600082600101826040516117a591906132db565b9081526020016040518091039020905092915050565b606082826040516020016117d0929190613483565b604051602081830303815290604052905092915050565b600081815260208390526040902080546060919061180490613448565b80601f016020809104026020016040519081016040528092919081815260200182805461183090613448565b801561187d5780601f106118525761010080835404028352916020019161187d565b820191906000526020600020905b81548152906001019060200180831161186057829003601f168201915b5050505050905092915050565b6000815183511480156104ee5750508051602091820120825192909101919091201490565b6000806119006118e484604051806040016040528060048152602001637564726960e01b8152506117bb90919063ffffffff16565b8051602091820120600090815260078701909152604090205490565b1515949350505050565b600082815260028401602052604081206008015461193a5760405162461bcd60e51b815260040161036b906134a9565b61162d82805190602001208560020160008681526020019081526020016000206003016125f290919063ffffffff16565b606060006119788361260b565b60010190506000816001600160401b0381111561199757611997612cd8565b6040519080825280601f01601f1916602001820160405280156119c1576020820181803683370190505b5090508181016020015b600019016f181899199a1a9b1b9c1cb0b131b232b360811b600a86061a8153600a85049450846119fa576119ff565b6119cb565b509392505050565b6000828152600284016020526040812060080154611a375760405162461bcd60e51b815260040161036b906134a9565b61162d82805190602001208560020160008681526020019081526020016000206004016125df90919063ffffffff16565b81516020808401919091206000858152600280880190935260409020611a90920190836126e3565b5050505050565b6000818152600283016020526040812060088101548154839260609283928115159190839060068201908290611acc90613448565b80601f0160208091040260200160405190810160405280929190818152602001828054611af890613448565b8015611b455780601f10611b1a57610100808354040283529160200191611b45565b820191906000526020600020905b815481529060010190602001808311611b2857829003601f168201915b5050505050915080805480602002602001604051908101604052809291908181526020016000905b82821015611c19578382906000526020600020018054611b8c90613448565b80601f0160208091040260200160405190810160405280929190818152602001828054611bb890613448565b8015611c055780601f10611bda57610100808354040283529160200191611c05565b820191906000526020600020905b815481529060010190602001808311611be857829003601f168201915b505050505081526020019060010190611b6d565b50505050905094509450945094505092959194509250565b6000828152600284016020526040902060080154606090611c645760405162461bcd60e51b815260040161036b906134a9565b8151602080840191909120600085815260028088019093526040902061162d9201906117e7565b606060028151611c9b91906134ed565b15611ce45760405162461bcd60e51b81526020600482015260196024820152783b30b934b0b13632a230ba30903632b733ba341032b93937b960391b604482015260640161036b565b6000611cf0858561270a565b90506000611cfe8685612750565b90506000805b82518163ffffffff161015611d83576000838263ffffffff1681518110611d2d57611d2d613382565b602002602001015190506000611d568280519060200120876007016117e790919063ffffffff16565b805190915015611d6e5783611d6a8161335e565b9450505b50508080611d7b9061335e565b915050611d04565b5063ffffffff811615611ed957600080611d9e83600261350f565b63ffffffff166001600160401b03811115611dbb57611dbb612cd8565b604051908082528060200260200182016040528015611dee57816020015b6060815260200190600190039081611dd95790505b50905060005b84518163ffffffff161015611ed4576000858263ffffffff1681518110611e1d57611e1d613382565b602002602001015190506000611e468280519060200120896007016117e790919063ffffffff16565b805190915015611ebf5781848663ffffffff1681518110611e6957611e69613382565b60209081029190910101528084611e81876001613398565b63ffffffff1681518110611e9757611e97613382565b60200260200101819052508580611ead9061335e565b9650611ebc9050856002613398565b94505b50508080611ecc9061335e565b915050611df4565b509450505b5050509392505050565b6000815111611f205760405162461bcd60e51b81526020600482015260096024820152683134b21032b93937b960b91b604482015260640161036b565b611f2a82826127b3565b151560011461037e5760405162461bcd60e51b815260206004820152601e60248201527f626974206e6f74207265676973746572206f6e207468697320636861696e0000604482015260640161036b565b600083815260028501602052604090206008015415611fe85760405162461bcd60e51b8152602060048201526024808201527f45766964656e636553746f726167653a207564726920616c72656164792065786044820152636973747360e01b60648201",
        "5260840161036b565b60008381526002850160209081526040909120835161200992850190612b09565b5060008381526002850160209081526040909120825161203192600690920191840190612b8d565b505050600090815260029091016020526040902042600890910155565b611a908280519060200120828660020160008781526020019081526020016000206001016127e39092919063ffffffff16565b611a908280519060200120828660020160008781526020019081526020016000206003016127ff9092919063ffffffff16565b611a9082805190602001208286600201600087815260200190815260200160002060040161282b9092919063ffffffff16565b600083600101836040516120fb91906132db565b908152604080516020928190038301812081830190925260158152741d5cd95c8e9c995d9a595dce995a590e98dbdd5b9d605a1b920191909152905060006121717f8e7e22a149a62d266f1366830ad13fadc3d0c42cdbb2dca110769fc88fb0ddbb600090815260098401602052604090205490565b905060006121b061089d61218484612840565b60408051808201909152600f81526e32afb932bb34b2bb9d34b73232bc1d60891b6020820152906117bb565b6000818152600885016020526040902085905590506040805180820190915260158152741d5cd95c8e9c995d9a595dce995a590e98dbdd5b9d605a1b602090910152610a9e7f8e7e22a149a62d266f1366830ad13fadc3d0c42cdbb2dca110769fc88fb0ddbb61222184600161353b565b600091825260098601602052604090912055600190565b6002815161224691906134ed565b1561228f5760405162461bcd60e51b81526020600482015260196024820152783b30b934b0b13632a230ba30903632b733ba341032b93937b960391b604482015260640161036b565b600061229b858561270a565b905060005b82518163ffffffff161015610602576000838263ffffffff16815181106122c9576122c9613382565b602002602001015190506000848360016122e39190613398565b63ffffffff16815181106122f9576122f9613382565b6020026020010151905061230e88878461284f565b15156001146123705760405162461bcd60e51b815260206004820152602860248201527f50617274206f66207661726961626c6544617461206669656c64206973206e6f6044820152673a1030b63637bbb760c11b606482015260840161036b565b81516020830120612386906007860190836126e3565b5050506002816123969190613398565b90506122a0565b60606102cf826123ac816128d2565b60010161293c565b60008281526003840160205260409020541561241e5760405162461bcd60e51b815260206004820152602360248201527f45766964656e636553746f726167653a2062696420616c72656164792065786960448201526273747360e81b606482015260840161036b565b600091825260039092016020526040902055565b60606102cf6001600160a01b03831660145b60606000612453836002613553565b61245e90600261353b565b6001600160401b0381111561247557612475612cd8565b6040519080825280601f01601f19166020018201604052801561249f576020820181803683370190505b509050600360fc1b816000815181106124ba576124ba613382565b60200101906001600160f81b031916908160001a905350600f60fb1b816001815181106124e9576124e9613382565b60200101906001600160f81b031916908160001a905350600061250d846002613553565b61251890600161353b565b90505b6001811115612590576f181899199a1a9b1b9c1cb0b131b232b360811b85600f166010811061254c5761254c613382565b1a60f81b82828151811061256257612562613382565b60200101906001600160f81b031916908160001a90535060049490941c9361258981613572565b905061251b565b5083156104ee5760405162461bcd60e51b815260206004820181905260248201527f537472696e67733a20686578206c656e67746820696e73756666696369656e74604482015260640161036b565b6000908152602091909152604090205490565b6000908152602091909152604090205463ffffffff1690565b60008072184f03e93ff9f4daa797ed6e38ed64bf6a1f0160401b831061264a5772184f03e93ff9f4daa797ed6e38ed64bf6a1f0160401b830492506040015b6d04ee2d6d415b85acef81000000008310612676576d04ee2d6d415b85acef8100000000830492506020015b662386f26fc10000831061269457662386f26fc10000830492506010015b6305f5e10083106126ac576305f5e100830492506008015b61271083106126c057612710830492506004015b606483106126d2576064830492506002015b600a83106102cf5760010192915050565b600082815260208481526040822083516126ff92850190612b09565b506001949350505050565b600081815260028301602052604081206008015461273a5760405162461bcd60e51b815260040161036b906134a9565b5060009081526002919091016020526040902090565b6060600061279c6040518060400160405280602081526020017f3a7661726961626c655f646174613a737570706f727465645f66696c6564733d815250846117bb90919063ffffffff16565b8051602082012090915061059e6004860182612a25565b600082600101826040516127c791906132db565b908152604051908190036020019020600b015415159392505050565b600082815260208481526040822083516126ff92850190612b8d565b6000828152602084905260409020805463ffffffff831663ffffffff1990911617905560019392505050565b60009182526020929092526040902055600190565b60606102cf826123ac846128d2565b60008061289383610a28604051806040016040528060128152602001717661726961626c655f646174613a6b65793d60701b815250876117bb90919063ffffffff16565b805160208201209091506128be60068701826000908152602091909152604090205463ffffffff1690565b63ffffffff16600114925050509392505050565b600080608083901c156128ea5760809290921c916010015b604083901c156128ff5760409290921c916008015b602083901c156129145760209290921c916004015b601083901c156129295760109290921c916002015b600883901c156102cf5760010192915050565b606082600061294c846002613553565b6001600160401b0381111561296357612963612cd8565b6040519080825280601f01601f19166020018201604052801561298d576020820181803683370190505b509050600061299d856002613553565b90505b8015612a1c576f181899199a1a9b1b9c1cb0b131b232b360811b83600f16601081106129ce576129ce613382565b1a60f81b826129de600184613589565b815181106129ee576129ee613382565b60200101906001600160f81b031916908160001a90535060049290921c91612a1581613572565b90506129a0565b50949350505050565b600081815260208381526040808320805482518185028101850190935280835260609492939192909184015b82821015612afd578382906000526020600020018054612a7090613448565b80601f0160208091040260200160405190810160405280929190818152602001828054612a9c90613448565b8015612ae95780601f10612abe57610100808354040283529160200191612ae9565b820191906000526020600020905b815481529060010190602001808311612acc57829003601f168201915b505050505081526020019060010190612a51565b50505050905092915050565b828054612b1590613448565b90600052602060002090601f016020900481019282612b375760008555612b7d565b82601f10612b5057805160ff1916838001178555612b7d565b82800160010185558215612b7d579182015b82811115612b7d578251825591602001919060010190612b62565b50612b89929150612be6565b5090565b828054828255906000526020600020908101928215612bda579160200282015b82811115612bda5782518051612bca918491602090910190612b09565b5091602001919060010190612bad565b50612b89929150612bfb565b5b80821115612b895760008155600101612be7565b80821115612b89576000612c0f8282612c18565b50600101612bfb565b508054612c2490613448565b6000825580601f10612c34575050565b601f0160209004906000526020600020908101906106dd9190612be6565b600060208284031215612c6457600080fd5b81356001600160e01b0319811681146104ee57600080fd5b600060208284031215612c8e57600080fd5b5035919050565b80356001600160a01b03811681146104db57600080fd5b60008060408385031215612cbf57600080fd5b82359150612ccf60208401612c95565b90509250929050565b634e487b7160e01b600052604160045260246000fd5b604051601f8201601f191681016001600160401b0381118282101715612d1657612d16612cd8565b604052919050565b600082601f830112612d2f57600080fd5b81356001600160401b03811115612d4857612d48612cd8565b612d5b601f8201601f1916602001612cee565b818152846020838601011115612d7057600080fd5b816020850160208301376000918101602001919091529392505050565b60008060408385031215612da057600080fd5b82356001600160401b0380821115612db757600080fd5b612dc386838701612d1e565b93506020850135915080821115612dd957600080fd5b50612de685828601612d1e565b9150509250929050565b60008060408385031215612e0357600080fd5b82356001600160401b03811115612e1957600080fd5b612e2585828601612d1e565b925050612ccf60208401612c95565b600060208284031215612e4657600080fd5b81356001600160401b03811115612e5c57600080fd5b61162d84828501612d1e565b60008083601f840112612e7a57600080fd5b5081356001600160401b03811115612e9157600080fd5b60208301915083602082850101111561178a57600080fd5b60008060208385031215612ebc57600080fd5b82356001600160401b03811115612ed257600080fd5b612ede85828601612e68565b90969095509350505050565b803563ffffffff811681146104db57600080fd5b600080600080600060608688031215612f1657600080fd5b85356001600160401b0380821115612f2d57600080fd5b612f3989838a01612e68565b90975095506020880135915080821115612f5257600080fd5b50612f5f88828901612e68565b9094509250612f72905060408701612eea565b90509295509295909350565b60005b83811015612f99578181015183820152602001612f81565b8381111561091e5750506000910152565b60008151808452612fc2816020860160208601612f7e565b601f01601f19169290920160200192915050565b600081518084526020",
        "808501808196508360051b8101915082860160005b8581101561301e57828403895261300c848351612faa565b98850198935090840190600101612ff4565b5091979650505050505050565b83151581526060602082015260006130466060830185612fd6565b82810360408401526130588185612fd6565b9695505050505050565b60008060006040848603121561307757600080fd5b83356001600160401b0381111561308d57600080fd5b61309986828701612e68565b90945092506130ac905060208501612eea565b90509250925092565b84151581526080602082015260006130d06080830186612faa565b82810360408401526130e28186612fd6565b905082810360608401526130f68185612fd6565b979650505050505050565b6000806000806040858703121561311757600080fd5b84356001600160401b038082111561312e57600080fd5b61313a88838901612e68565b9096509450602087013591508082111561315357600080fd5b5061316087828801612e68565b95989497509550505050565b600082601f83011261317d57600080fd5b813560206001600160401b038083111561319957613199612cd8565b8260051b6131a8838201612cee565b93845285810183019383810190888611156131c257600080fd5b84880192505b858310156131fe578235848111156131e05760008081fd5b6131ee8a87838c0101612d1e565b83525091840191908401906131c8565b98975050505050505050565b600080600080600060a0868803121561322257600080fd5b85356001600160401b038082111561323957600080fd5b61324589838a01612d1e565b9650602088013591508082111561325b57600080fd5b61326789838a01612d1e565b9550604088013591508082111561327d57600080fd5b61328989838a0161316c565b9450606088013591508082111561329f57600080fd5b6132ab89838a0161316c565b935060808801359150808211156132c157600080fd5b506132ce8882890161316c565b9150509295509295909350565b600082516132ed818460208701612f7e565b9190910192915050565b634e487b7160e01b600052601160045260246000fd5b600063ffffffff8381169083168181101561332a5761332a6132f7565b039392505050565b6020808252601290820152713ab23934903737ba1037b71031b430b4b71760711b604082015260600190565b600063ffffffff80831681811415613378576133786132f7565b6001019392505050565b634e487b7160e01b600052603260045260246000fd5b600063ffffffff8083168185168083038211156133b7576133b76132f7565b01949350505050565b7f416363657373436f6e74726f6c3a206163636f756e74200000000000000000008152600083516133f8816017850160208801612f7e565b7001034b99036b4b9b9b4b733903937b6329607d1b6017918401918201528351613429816028840160208801612f7e565b01602801949350505050565b6020815260006104ee6020830184612faa565b600181811c9082168061345c57607f821691505b6020821081141561347d57634e487b7160e01b600052602260045260246000fd5b50919050565b60008351613495818460208801612f7e565b8351908301906133b7818360208801612f7e565b60208082526024908201527f45766964656e636553746f726167653a2045766964656e6365206e6f742065786040820152636973747360e01b606082015260800190565b60008261350a57634e487b7160e01b600052601260045260246000fd5b500690565b600063ffffffff80831681851681830481118215151615613532576135326132f7565b02949350505050565b6000821982111561354e5761354e6132f7565b500190565b600081600019048311821515161561356d5761356d6132f7565b500290565b600081613581576135816132f7565b506000190190565b60008282101561359b5761359b6132f7565b50039056fe445245766964656e636553746f72616765436f6e7374616e742e45564944454e43455f434f4e54524143545f56455253494f4e5f563122f59c2f02edbae5c421247f029fe3112c5a85f70b4a48f5d93b22ada9ea772ea26469706673582212208c5911f82ddc697fad6e10782b5c98e40b074ce4dddd3d3f758c3c7368b8a8b764736f6c634300080b0033"
    };

    public static final String BINARY =
            org.fisco.bcos.sdk.v3.utils.StringUtils.joinAll("", BINARY_ARRAY);

    public static final String[] SM_BINARY_ARRAY = {
        "",
        "",
        "",
        "01612cee565b60008060008060408587031215612ffb57600080fd5b84356001600160401b038082111561301257600080fd5b61301e88838901612ecc565b9096509450602087013591508082111561303757600080fd5b5061304487828801612ecc565b95989497509550505050565b6000806040838503121561306357600080fd5b82356001600160401b0381111561307957600080fd5b61308585828601612cee565b925050612c9f60208401612c65565b803563ffffffff8116811461056357600080fd5b6000806000806000606086880312156130c057600080fd5b85356001600160401b03808211156130d757600080fd5b6130e389838a01612ecc565b909750955060208801359150808211156130fc57600080fd5b5061310988828901612ecc565b909450925061311c905060408701613094565b90509295509295909350565b60005b8381101561314357818101518382015260200161312b565b8381111561088e5750506000910152565b6000815180845261316c816020860160208601613128565b601f01601f19169290920160200192915050565b600081518084526020808501808196508360051b8101915082860160005b858110156131c85782840389526131b6848351613154565b9885019893509084019060010161319e565b5091979650505050505050565b83151581526060602082015260006131f06060830185613180565b82810360408401526132028185613180565b9695505050505050565b60006020828403121561321e57600080fd5b81356001600160e01b03198116811461039357600080fd5b60008060006040848603121561324b57600080fd5b83356001600160401b0381111561326157600080fd5b61326d86828701612ecc565b9094509250613280905060208501613094565b90509250925092565b84151581526080602082015260006132a46080830186613154565b82810360408401526132b68186613180565b905082810360608401526132ca8185613180565b979650505050505050565b6000602082840312156132e757600080fd5b5035919050565b63b95aa35560e01b600052601160045260246000fd5b600063ffffffff83811690831681811015613321576133216132ee565b039392505050565b6000825161333b818460208701613128565b9190910192915050565b6020808252601290820152713ab23934903737ba1037b71031b430b4b71760711b604082015260600190565b63b95aa35560e01b600052603260045260246000fd5b600063ffffffff808316818114156133a1576133a16132ee565b6001019392505050565b600063ffffffff8083168185168083038211156133ca576133ca6132ee565b01949350505050565b600181811c908216806133e757607f821691505b602082108114156134085763b95aa35560e01b600052602260045260246000fd5b50919050565b60008351613420818460208801613128565b8351908301906133ca818360208801613128565b60208082526024908201527f45766964656e636553746f726167653a2045766964656e6365206e6f742065786040820152636973747360e01b606082015260800190565b6000821982111561348b5761348b6132ee565b500190565b6000826134ad5763b95aa35560e01b600052601260045260246000fd5b500690565b7f416363657373436f6e74726f6c3a206163636f756e74200000000000000000008152600083516134ea816017850160208801613128565b7001034b99036b4b9b9b4b733903937b6329607d1b601791840191820152835161351b816028840160208801613128565b01602801949350505050565b6020815260006103936020830184613154565b600063ffffffff8083168185168183048111821515161561355d5761355d6132ee565b02949350505050565b6000816000190483118215151615613580576135806132ee565b500290565b600082821015613597576135976132ee565b500390565b6000816135ab576135ab6132ee565b50600019019056fecda5c054d055f48a2866e1a28d72f8145e422f1db1872bc4c9fe2888702c9f8d445245766964656e636553746f72616765436f6e7374616e742e45564944454e43455f434f4e54524143545f56455253494f4e5f5631a2646970667358221220721b3a925506bca76397ebf0c36e23450d9efb2bcb1d5a397fc1a9bd5c5deba964736f6c634300080b0033"
    };

    public static final String SM_BINARY =
            org.fisco.bcos.sdk.v3.utils.StringUtils.joinAll("", SM_BINARY_ARRAY);

    public static final String[] ABI_ARRAY = {
        "[{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint8\",\"name\":\"version\",\"type\":\"uint8\"}],\"name\":\"Initialized\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"string\",\"name\":\"udri\",\"type\":\"string\"},{\"indexed\":true,\"internalType\":\"uint32\",\"name\":\"index\",\"type\":\"uint32\"}],\"name\":\"NewReviewEvidenceStored\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"string\",\"name\":\"udri\",\"type\":\"string\"}],\"name\":\"NewRightEvidenceStored\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"previousAdminRole\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"newAdminRole\",\"type\":\"bytes32\"}],\"name\":\"RoleAdminChanged\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"}],\"name\":\"RoleGranted\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"}],\"name\":\"RoleRevoked\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"string\",\"name\":\"bid\",\"type\":\"string\"},{\"indexed\":true,\"internalType\":\"string\",\"name\":\"usci\",\"type\":\"string\"}],\"name\":\"UserCreated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"string\",\"name\":\"bid\",\"type\":\"string\"}],\"name\":\"UserRoleChanged\",\"type\":\"event\"},{\"conflictFields\":[{\"kind\":5}],\"inputs\":[],\"name\":\"DEFAULT_ADMIN_ROLE\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"selector\":[2719481311,456278200],\"stateMutability\":\"view\",\"type\":\"function\"},{\"conflictFields\":[{\"kind\":5}],\"inputs\":[],\"name\":\"USERMANAGE_ROLE\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"selector\":[852968231,3061267160],\"stateMutability\":\"view\",\"type\":\"function\"},{\"conflictFields\":[{\"kind\":5}],\"inputs\":[{\"internalType\":\"string\",\"name\":\"udri\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"reviewerBid\",\"type\":\"string\"},{\"internalType\":\"string[]\",\"name\":\"reviewDataHash\",\"type\":\"string[]\"},{\"internalType\":\"string[]\",\"name\":\"metaData\",\"type\":\"string[]\"},{\"internalType\":\"string[]\",\"name\":\"variableData\",\"type\":\"string[]\"}],\"name\":\"addReviewEvidence\",\"outputs\":[],\"selector\":[4024293368,766756406],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"conflictFields\":[{\"kind\":0}],\"inputs\":[{\"internalType\":\"string\",\"name\":\"udri\",\"type\":\"string\"}],\"name\":\"getReviewCount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"reviewCount\",\"type\":\"uint256\"}],\"selector\":[1485793629,1330250274],\"stateMutability\":\"view\",\"type\":\"function\"},{\"conflictFields\":[{\"kind\":0}],\"inputs\":[{\"internalType\":\"string\",\"name\":\"udri\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"reviewerBid\",\"type\":\"string\"}],\"name\":\"getReviewCountOfReviewer\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"count\",\"type\":\"uint256\"}],\"selector\":[3868489521,2826438872],\"stateMutability\":\"view\",\"type\":\"function\"},{\"conflictFields\":[{\"kind\":3,\"slot\":101,\"value\":[0]}],\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"}],\"name\":\"getRoleAdmin\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"selector\":[613063843,4224970943],\"stateMutability\":\"view\",\"type\":\"function\"},{\"conflictFields\":[{\"kind\":5}],\"inputs\":[{\"internalType\":\"string\",\"name\":\"udri\",\"type\":\"string\"},{\"internalType\":\"uint32\",\"name\":\"index\",\"type\":\"uint32\"}],\"name\":\"getVerifyEvidence\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"isWithdraw\",\"type\":\"bool\"},{\"internalType\":\"string\",\"name\":\"reviewerBid\",\"type\":\"string\"},{\"internalType\":\"string[]\",\"name\":\"metaData\",\"type\":\"string[]\"},{\"internalType\":\"string[]\",\"name\":\"variableData\",\"type\":\"string[]\"}],\"selector\":[1855339097,4061585395],\"stateMutability\":\"view\",\"type\":\"function\"},{\"conflictFields\":[{\"kind\":0}],\"inputs\":[{\"internalType\":\"string\",\"name\":\"udri\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"reviewerBid\",\"type\":\"string\"},{\"internalType\":\"uint32\",\"name\":\"index\",\"type\":\"uint32\"}],\"name\":\"getVerifyEvidenceOfReviewer\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"isWithdraw\",\"type\":\"bool\"},{\"internalType\":\"string[]\",\"name\":\"metaData\",\"type\":\"string[]\"},{\"internalType\":\"string[]\",\"name\":\"variableData\",\"type\":\"string[]\"}],\"selector\":[1591648918,3508812136],\"stateMutability\":\"view\",\"type\":\"function\"},{\"conflictFields\":[{\"kind\":3,\"slot\":101,\"value\":[0]}],\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"grantRole\",\"outputs\":[],\"selector\":[791671133,1416757515],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"conflictFields\":[{\"kind\":0}],\"inputs\":[{\"internalType\":\"string\",\"name\":\"bid\",\"type\":\"string\"},{\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"}],\"name\":\"grantUserManagePermission\",\"outputs\":[],\"selector\":[1037211317,3070963644],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"conflictFields\":[{\"kind\":3,\"slot\":101,\"value\":[0]}],\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"hasRole\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"selector\":[2446411860,3734140252],\"stateMutability\":\"view\",\"type\":\"function\"},{\"conflictFields\":[{\"kind\":0},{\"kind\":4,\"slot\":101,\"value\":[34,245,156,47,2,237,186,229,196,33,36,127,2,159,227,17,44,90,133,247,11,74,72,245,217,59,34,173,169,234,119,46]}],\"inputs\":[{\"internalType\":\"string\",\"name\":\"bid\",\"type\":\"string\"}],\"name\":\"hasUserManageRole\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"selector\":[1290417574,3048132719],\"stateMutability\":\"view\",\"type\":\"function\"},{\"conflictFields\":[{\"kind\":0},{\"kind\":3,\"slot\":101,\"value\":[0]}],\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"renounceRole\",\"outputs\":[],\"selector\":[911641278,399928776],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"conflictFields\":[{\"kind\":3,\"slot\":101,\"value\":[0]}],\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"revokeRole\",\"outputs\":[],\"selector\":[3578229791,4245284822],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"conflictFields\":[{\"kind\":0}],\"inputs\":[{\"internalType\":\"string\",\"name\":\"bid\",\"type\":\"string\"}],\"name\":\"revokeUserManagePermission\",\"outputs\":[],\"selector\":[4233016450,2768200898],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"conflictFields\":[{\"kind\":5}],\"inputs\":[{\"internalType\":\"bytes4\",\"name\":\"interfaceId\",\"type\":\"bytes4\"}],\"name\":\"supportsInterface\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"selector\":[33540519,3934173080],\"stateMutability\":\"view\",\"type\":\"function\"},{\"conflictFields\":[{\"kind\":0}],\"inputs\":[{\"internalType\":\"string\",\"name\":\"udri\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"reviewerBid\",\"type\":\"string\"}],\"name\":\"withdrawReviewEvidence\",\"outputs\":[],\"selector\":[932021754,2229502562],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]"
    };

    public static final String ABI = org.fisco.bcos.sdk.v3.utils.StringUtils.joinAll("", ABI_ARRAY);

    public static final String FUNC_DEFAULT_ADMIN_ROLE = "DEFAULT_ADMIN_ROLE";

    public static final String FUNC_USERMANAGE_ROLE = "USERMANAGE_ROLE";

    public static final String FUNC_ADDREVIEWEVIDENCE = "addReviewEvidence";

    public static final String FUNC_GETREVIEWCOUNT = "getReviewCount";

    public static final String FUNC_GETREVIEWCOUNTOFREVIEWER = "getReviewCountOfReviewer";

    public static final String FUNC_GETROLEADMIN = "getRoleAdmin";

    public static final String FUNC_GETVERIFYEVIDENCE = "getVerifyEvidence";

    public static final String FUNC_GETVERIFYEVIDENCEOFREVIEWER = "getVerifyEvidenceOfReviewer";

    public static final String FUNC_GRANTROLE = "grantRole";

    public static final String FUNC_GRANTUSERMANAGEPERMISSION = "grantUserManagePermission";

    public static final String FUNC_HASROLE = "hasRole";

    public static final String FUNC_HASUSERMANAGEROLE = "hasUserManageRole";

    public static final String FUNC_RENOUNCEROLE = "renounceRole";

    public static final String FUNC_REVOKEROLE = "revokeRole";

    public static final String FUNC_REVOKEUSERMANAGEPERMISSION = "revokeUserManagePermission";

    public static final String FUNC_SUPPORTSINTERFACE = "supportsInterface";

    public static final String FUNC_WITHDRAWREVIEWEVIDENCE = "withdrawReviewEvidence";

    public static final Event INITIALIZED_EVENT =
            new Event(
                    "Initialized", Arrays.<TypeReference<?>>asList(new TypeReference<Uint8>() {}));;

    public static final Event NEWREVIEWEVIDENCESTORED_EVENT =
            new Event(
                    "NewReviewEvidenceStored",
                    Arrays.<TypeReference<?>>asList(
                            new TypeReference<Address>(true) {},
                            new TypeReference<Utf8String>(true) {},
                            new TypeReference<Uint32>(true) {}));;

    public static final Event NEWRIGHTEVIDENCESTORED_EVENT =
            new Event(
                    "NewRightEvidenceStored",
                    Arrays.<TypeReference<?>>asList(
                            new TypeReference<Address>(true) {},
                            new TypeReference<Utf8String>(true) {}));;

    public static final Event ROLEADMINCHANGED_EVENT =
            new Event(
                    "RoleAdminChanged",
                    Arrays.<TypeReference<?>>asList(
                            new TypeReference<Bytes32>(true) {},
                            new TypeReference<Bytes32>(true) {},
                            new TypeReference<Bytes32>(true) {}));;

    public static final Event ROLEGRANTED_EVENT =
            new Event(
                    "RoleGranted",
                    Arrays.<TypeReference<?>>asList(
                            new TypeReference<Bytes32>(true) {},
                            new TypeReference<Address>(true) {},
                            new TypeReference<Address>(true) {}));;

    public static final Event ROLEREVOKED_EVENT =
            new Event(
                    "RoleRevoked",
                    Arrays.<TypeReference<?>>asList(
                            new TypeReference<Bytes32>(true) {},
                            new TypeReference<Address>(true) {},
                            new TypeReference<Address>(true) {}));;

    public static final Event USERCREATED_EVENT =
            new Event(
                    "UserCreated",
                    Arrays.<TypeReference<?>>asList(
                            new TypeReference<Address>(true) {},
                            new TypeReference<Utf8String>(true) {},
                            new TypeReference<Utf8String>(true) {}));;

    public static final Event USERROLECHANGED_EVENT =
            new Event(
                    "UserRoleChanged",
                    Arrays.<TypeReference<?>>asList(
                            new TypeReference<Address>(true) {},
                            new TypeReference<Utf8String>(true) {}));;

    protected DREvidenceReviewController(
            String contractAddress, Client client, CryptoKeyPair credential) {
        super(getBinary(client.getCryptoSuite()), contractAddress, client, credential);
    }

    public static String getBinary(CryptoSuite cryptoSuite) {
        return (cryptoSuite.getCryptoTypeConfig() == CryptoType.ECDSA_TYPE ? BINARY : SM_BINARY);
    }

    public static String getABI() {
        return ABI;
    }

    public List<InitializedEventResponse> getInitializedEvents(
            TransactionReceipt transactionReceipt) {
        List<Contract.EventValuesWithLog> valueList =
                extractEventParametersWithLog(INITIALIZED_EVENT, transactionReceipt);
        ArrayList<InitializedEventResponse> responses =
                new ArrayList<InitializedEventResponse>(valueList.size());
        for (Contract.EventValuesWithLog eventValues : valueList) {
            InitializedEventResponse typedResponse = new InitializedEventResponse();
            typedResponse.log = eventValues.getLog();
            typedResponse.version =
                    (BigInteger) eventValues.getNonIndexedValues().get(0).getValue();
            responses.add(typedResponse);
        }
        return responses;
    }

    public List<NewReviewEvidenceStoredEventResponse> getNewReviewEvidenceStoredEvents(
            TransactionReceipt transactionReceipt) {
        List<Contract.EventValuesWithLog> valueList =
                extractEventParametersWithLog(NEWREVIEWEVIDENCESTORED_EVENT, transactionReceipt);
        ArrayList<NewReviewEvidenceStoredEventResponse> responses =
                new ArrayList<NewReviewEvidenceStoredEventResponse>(valueList.size());
        for (Contract.EventValuesWithLog eventValues : valueList) {
            NewReviewEvidenceStoredEventResponse typedResponse =
                    new NewReviewEvidenceStoredEventResponse();
            typedResponse.log = eventValues.getLog();
            typedResponse.sender = (String) eventValues.getIndexedValues().get(0).getValue();
            typedResponse.udri = (byte[]) eventValues.getIndexedValues().get(1).getValue();
            typedResponse.index = (BigInteger) eventValues.getIndexedValues().get(2).getValue();
            responses.add(typedResponse);
        }
        return responses;
    }

    public List<NewRightEvidenceStoredEventResponse> getNewRightEvidenceStoredEvents(
            TransactionReceipt transactionReceipt) {
        List<Contract.EventValuesWithLog> valueList =
                extractEventParametersWithLog(NEWRIGHTEVIDENCESTORED_EVENT, transactionReceipt);
        ArrayList<NewRightEvidenceStoredEventResponse> responses =
                new ArrayList<NewRightEvidenceStoredEventResponse>(valueList.size());
        for (Contract.EventValuesWithLog eventValues : valueList) {
            NewRightEvidenceStoredEventResponse typedResponse =
                    new NewRightEvidenceStoredEventResponse();
            typedResponse.log = eventValues.getLog();
            typedResponse.sender = (String) eventValues.getIndexedValues().get(0).getValue();
            typedResponse.udri = (byte[]) eventValues.getIndexedValues().get(1).getValue();
            responses.add(typedResponse);
        }
        return responses;
    }

    public List<RoleAdminChangedEventResponse> getRoleAdminChangedEvents(
            TransactionReceipt transactionReceipt) {
        List<Contract.EventValuesWithLog> valueList =
                extractEventParametersWithLog(ROLEADMINCHANGED_EVENT, transactionReceipt);
        ArrayList<RoleAdminChangedEventResponse> responses =
                new ArrayList<RoleAdminChangedEventResponse>(valueList.size());
        for (Contract.EventValuesWithLog eventValues : valueList) {
            RoleAdminChangedEventResponse typedResponse = new RoleAdminChangedEventResponse();
            typedResponse.log = eventValues.getLog();
            typedResponse.role = (byte[]) eventValues.getIndexedValues().get(0).getValue();
            typedResponse.previousAdminRole =
                    (byte[]) eventValues.getIndexedValues().get(1).getValue();
            typedResponse.newAdminRole = (byte[]) eventValues.getIndexedValues().get(2).getValue();
            responses.add(typedResponse);
        }
        return responses;
    }

    public List<RoleGrantedEventResponse> getRoleGrantedEvents(
            TransactionReceipt transactionReceipt) {
        List<Contract.EventValuesWithLog> valueList =
                extractEventParametersWithLog(ROLEGRANTED_EVENT, transactionReceipt);
        ArrayList<RoleGrantedEventResponse> responses =
                new ArrayList<RoleGrantedEventResponse>(valueList.size());
        for (Contract.EventValuesWithLog eventValues : valueList) {
            RoleGrantedEventResponse typedResponse = new RoleGrantedEventResponse();
            typedResponse.log = eventValues.getLog();
            typedResponse.role = (byte[]) eventValues.getIndexedValues().get(0).getValue();
            typedResponse.account = (String) eventValues.getIndexedValues().get(1).getValue();
            typedResponse.sender = (String) eventValues.getIndexedValues().get(2).getValue();
            responses.add(typedResponse);
        }
        return responses;
    }

    public List<RoleRevokedEventResponse> getRoleRevokedEvents(
            TransactionReceipt transactionReceipt) {
        List<Contract.EventValuesWithLog> valueList =
                extractEventParametersWithLog(ROLEREVOKED_EVENT, transactionReceipt);
        ArrayList<RoleRevokedEventResponse> responses =
                new ArrayList<RoleRevokedEventResponse>(valueList.size());
        for (Contract.EventValuesWithLog eventValues : valueList) {
            RoleRevokedEventResponse typedResponse = new RoleRevokedEventResponse();
            typedResponse.log = eventValues.getLog();
            typedResponse.role = (byte[]) eventValues.getIndexedValues().get(0).getValue();
            typedResponse.account = (String) eventValues.getIndexedValues().get(1).getValue();
            typedResponse.sender = (String) eventValues.getIndexedValues().get(2).getValue();
            responses.add(typedResponse);
        }
        return responses;
    }

    public List<UserCreatedEventResponse> getUserCreatedEvents(
            TransactionReceipt transactionReceipt) {
        List<Contract.EventValuesWithLog> valueList =
                extractEventParametersWithLog(USERCREATED_EVENT, transactionReceipt);
        ArrayList<UserCreatedEventResponse> responses =
                new ArrayList<UserCreatedEventResponse>(valueList.size());
        for (Contract.EventValuesWithLog eventValues : valueList) {
            UserCreatedEventResponse typedResponse = new UserCreatedEventResponse();
            typedResponse.log = eventValues.getLog();
            typedResponse.sender = (String) eventValues.getIndexedValues().get(0).getValue();
            typedResponse.bid = (byte[]) eventValues.getIndexedValues().get(1).getValue();
            typedResponse.usci = (byte[]) eventValues.getIndexedValues().get(2).getValue();
            responses.add(typedResponse);
        }
        return responses;
    }

    public List<UserRoleChangedEventResponse> getUserRoleChangedEvents(
            TransactionReceipt transactionReceipt) {
        List<Contract.EventValuesWithLog> valueList =
                extractEventParametersWithLog(USERROLECHANGED_EVENT, transactionReceipt);
        ArrayList<UserRoleChangedEventResponse> responses =
                new ArrayList<UserRoleChangedEventResponse>(valueList.size());
        for (Contract.EventValuesWithLog eventValues : valueList) {
            UserRoleChangedEventResponse typedResponse = new UserRoleChangedEventResponse();
            typedResponse.log = eventValues.getLog();
            typedResponse.sender = (String) eventValues.getIndexedValues().get(0).getValue();
            typedResponse.bid = (byte[]) eventValues.getIndexedValues().get(1).getValue();
            responses.add(typedResponse);
        }
        return responses;
    }

    public byte[] DEFAULT_ADMIN_ROLE() throws ContractException {
        final Function function =
                new Function(
                        FUNC_DEFAULT_ADMIN_ROLE,
                        Arrays.<Type>asList(),
                        Arrays.<TypeReference<?>>asList(new TypeReference<Bytes32>() {}));
        return executeCallWithSingleValueReturn(function, byte[].class);
    }

    public byte[] USERMANAGE_ROLE() throws ContractException {
        final Function function =
                new Function(
                        FUNC_USERMANAGE_ROLE,
                        Arrays.<Type>asList(),
                        Arrays.<TypeReference<?>>asList(new TypeReference<Bytes32>() {}));
        return executeCallWithSingleValueReturn(function, byte[].class);
    }

    public TransactionReceipt addReviewEvidence(
            String udri,
            String reviewerBid,
            List<String> reviewDataHash,
            List<String> metaData,
            List<String> variableData) {
        final Function function =
                new Function(
                        FUNC_ADDREVIEWEVIDENCE,
                        Arrays.<Type>asList(
                                new org.fisco.bcos.sdk.v3.codec.datatypes.Utf8String(udri),
                                new org.fisco.bcos.sdk.v3.codec.datatypes.Utf8String(reviewerBid),
                                new org.fisco.bcos.sdk.v3.codec.datatypes.DynamicArray<
                                        org.fisco.bcos.sdk.v3.codec.datatypes.Utf8String>(
                                        org.fisco.bcos.sdk.v3.codec.datatypes.Utf8String.class,
                                        org.fisco.bcos.sdk.v3.codec.Utils.typeMap(
                                                reviewDataHash,
                                                org.fisco.bcos.sdk.v3.codec.datatypes.Utf8String
                                                        .class)),
                                new org.fisco.bcos.sdk.v3.codec.datatypes.DynamicArray<
                                        org.fisco.bcos.sdk.v3.codec.datatypes.Utf8String>(
                                        org.fisco.bcos.sdk.v3.codec.datatypes.Utf8String.class,
                                        org.fisco.bcos.sdk.v3.codec.Utils.typeMap(
                                                metaData,
                                                org.fisco.bcos.sdk.v3.codec.datatypes.Utf8String
                                                        .class)),
                                new org.fisco.bcos.sdk.v3.codec.datatypes.DynamicArray<
                                        org.fisco.bcos.sdk.v3.codec.datatypes.Utf8String>(
                                        org.fisco.bcos.sdk.v3.codec.datatypes.Utf8String.class,
                                        org.fisco.bcos.sdk.v3.codec.Utils.typeMap(
                                                variableData,
                                                org.fisco.bcos.sdk.v3.codec.datatypes.Utf8String
                                                        .class))),
                        Collections.<TypeReference<?>>emptyList(),
                        4);
        return executeTransaction(function);
    }

    public String getSignedTransactionForAddReviewEvidence(
            String udri,
            String reviewerBid,
            List<String> reviewDataHash,
            List<String> metaData,
            List<String> variableData) {
        final Function function =
                new Function(
                        FUNC_ADDREVIEWEVIDENCE,
                        Arrays.<Type>asList(
                                new org.fisco.bcos.sdk.v3.codec.datatypes.Utf8String(udri),
                                new org.fisco.bcos.sdk.v3.codec.datatypes.Utf8String(reviewerBid),
                                new org.fisco.bcos.sdk.v3.codec.datatypes.DynamicArray<
                                        org.fisco.bcos.sdk.v3.codec.datatypes.Utf8String>(
                                        org.fisco.bcos.sdk.v3.codec.datatypes.Utf8String.class,
                                        org.fisco.bcos.sdk.v3.codec.Utils.typeMap(
                                                reviewDataHash,
                                                org.fisco.bcos.sdk.v3.codec.datatypes.Utf8String
                                                        .class)),
                                new org.fisco.bcos.sdk.v3.codec.datatypes.DynamicArray<
                                        org.fisco.bcos.sdk.v3.codec.datatypes.Utf8String>(
                                        org.fisco.bcos.sdk.v3.codec.datatypes.Utf8String.class,
                                        org.fisco.bcos.sdk.v3.codec.Utils.typeMap(
                                                metaData,
                                                org.fisco.bcos.sdk.v3.codec.datatypes.Utf8String
                                                        .class)),
                                new org.fisco.bcos.sdk.v3.codec.datatypes.DynamicArray<
                                        org.fisco.bcos.sdk.v3.codec.datatypes.Utf8String>(
                                        org.fisco.bcos.sdk.v3.codec.datatypes.Utf8String.class,
                                        org.fisco.bcos.sdk.v3.codec.Utils.typeMap(
                                                variableData,
                                                org.fisco.bcos.sdk.v3.codec.datatypes.Utf8String
                                                        .class))),
                        Collections.<TypeReference<?>>emptyList(),
                        4);
        return createSignedTransaction(function);
    }

    public String addReviewEvidence(
            String udri,
            String reviewerBid,
            List<String> reviewDataHash,
            List<String> metaData,
            List<String> variableData,
            TransactionCallback callback) {
        final Function function =
                new Function(
                        FUNC_ADDREVIEWEVIDENCE,
                        Arrays.<Type>asList(
                                new org.fisco.bcos.sdk.v3.codec.datatypes.Utf8String(udri),
                                new org.fisco.bcos.sdk.v3.codec.datatypes.Utf8String(reviewerBid),
                                new org.fisco.bcos.sdk.v3.codec.datatypes.DynamicArray<
                                        org.fisco.bcos.sdk.v3.codec.datatypes.Utf8String>(
                                        org.fisco.bcos.sdk.v3.codec.datatypes.Utf8String.class,
                                        org.fisco.bcos.sdk.v3.codec.Utils.typeMap(
                                                reviewDataHash,
                                                org.fisco.bcos.sdk.v3.codec.datatypes.Utf8String
                                                        .class)),
                                new org.fisco.bcos.sdk.v3.codec.datatypes.DynamicArray<
                                        org.fisco.bcos.sdk.v3.codec.datatypes.Utf8String>(
                                        org.fisco.bcos.sdk.v3.codec.datatypes.Utf8String.class,
                                        org.fisco.bcos.sdk.v3.codec.Utils.typeMap(
                                                metaData,
                                                org.fisco.bcos.sdk.v3.codec.datatypes.Utf8String
                                                        .class)),
                                new org.fisco.bcos.sdk.v3.codec.datatypes.DynamicArray<
                                        org.fisco.bcos.sdk.v3.codec.datatypes.Utf8String>(
                                        org.fisco.bcos.sdk.v3.codec.datatypes.Utf8String.class,
                                        org.fisco.bcos.sdk.v3.codec.Utils.typeMap(
                                                variableData,
                                                org.fisco.bcos.sdk.v3.codec.datatypes.Utf8String
                                                        .class))),
                        Collections.<TypeReference<?>>emptyList(),
                        4);
        return asyncExecuteTransaction(function, callback);
    }

    public Tuple5<String, String, List<String>, List<String>, List<String>>
            getAddReviewEvidenceInput(TransactionReceipt transactionReceipt) {
        String data = transactionReceipt.getInput().substring(10);
        final Function function =
                new Function(
                        FUNC_ADDREVIEWEVIDENCE,
                        Arrays.<Type>asList(),
                        Arrays.<TypeReference<?>>asList(
                                new TypeReference<Utf8String>() {},
                                new TypeReference<Utf8String>() {},
                                new TypeReference<DynamicArray<Utf8String>>() {},
                                new TypeReference<DynamicArray<Utf8String>>() {},
                                new TypeReference<DynamicArray<Utf8String>>() {}));
        List<Type> results =
                this.functionReturnDecoder.decode(data, function.getOutputParameters());
        return new Tuple5<String, String, List<String>, List<String>, List<String>>(
                (String) results.get(0).getValue(),
                (String) results.get(1).getValue(),
                convertToNative((List<Utf8String>) results.get(2).getValue()),
                convertToNative((List<Utf8String>) results.get(3).getValue()),
                convertToNative((List<Utf8String>) results.get(4).getValue()));
    }

    public BigInteger getReviewCount(String udri) throws ContractException {
        final Function function =
                new Function(
                        FUNC_GETREVIEWCOUNT,
                        Arrays.<Type>asList(
                                new org.fisco.bcos.sdk.v3.codec.datatypes.Utf8String(udri)),
                        Arrays.<TypeReference<?>>asList(new TypeReference<Uint256>() {}));
        return executeCallWithSingleValueReturn(function, BigInteger.class);
    }

    public BigInteger getReviewCountOfReviewer(String udri, String reviewerBid)
            throws ContractException {
        final Function function =
                new Function(
                        FUNC_GETREVIEWCOUNTOFREVIEWER,
                        Arrays.<Type>asList(
                                new org.fisco.bcos.sdk.v3.codec.datatypes.Utf8String(udri),
                                new org.fisco.bcos.sdk.v3.codec.datatypes.Utf8String(reviewerBid)),
                        Arrays.<TypeReference<?>>asList(new TypeReference<Uint256>() {}));
        return executeCallWithSingleValueReturn(function, BigInteger.class);
    }

    public byte[] getRoleAdmin(byte[] role) throws ContractException {
        final Function function =
                new Function(
                        FUNC_GETROLEADMIN,
                        Arrays.<Type>asList(
                                new org.fisco.bcos.sdk.v3.codec.datatypes.generated.Bytes32(role)),
                        Arrays.<TypeReference<?>>asList(new TypeReference<Bytes32>() {}));
        return executeCallWithSingleValueReturn(function, byte[].class);
    }

    public Tuple4<Boolean, String, List<String>, List<String>> getVerifyEvidence(
            String udri, BigInteger index) throws ContractException {
        final Function function =
                new Function(
                        FUNC_GETVERIFYEVIDENCE,
                        Arrays.<Type>asList(
                                new org.fisco.bcos.sdk.v3.codec.datatypes.Utf8String(udri),
                                new org.fisco.bcos.sdk.v3.codec.datatypes.generated.Uint32(index)),
                        Arrays.<TypeReference<?>>asList(
                                new TypeReference<Bool>() {},
                                new TypeReference<Utf8String>() {},
                                new TypeReference<DynamicArray<Utf8String>>() {},
                                new TypeReference<DynamicArray<Utf8String>>() {}));
        List<Type> results = executeCallWithMultipleValueReturn(function);
        return new Tuple4<Boolean, String, List<String>, List<String>>(
                (Boolean) results.get(0).getValue(),
                (String) results.get(1).getValue(),
                convertToNative((List<Utf8String>) results.get(2).getValue()),
                convertToNative((List<Utf8String>) results.get(3).getValue()));
    }

    public Tuple3<Boolean, List<String>, List<String>> getVerifyEvidenceOfReviewer(
            String udri, String reviewerBid, BigInteger index) throws ContractException {
        final Function function =
                new Function(
                        FUNC_GETVERIFYEVIDENCEOFREVIEWER,
                        Arrays.<Type>asList(
                                new org.fisco.bcos.sdk.v3.codec.datatypes.Utf8String(udri),
                                new org.fisco.bcos.sdk.v3.codec.datatypes.Utf8String(reviewerBid),
                                new org.fisco.bcos.sdk.v3.codec.datatypes.generated.Uint32(index)),
                        Arrays.<TypeReference<?>>asList(
                                new TypeReference<Bool>() {},
                                new TypeReference<DynamicArray<Utf8String>>() {},
                                new TypeReference<DynamicArray<Utf8String>>() {}));
        List<Type> results = executeCallWithMultipleValueReturn(function);
        return new Tuple3<Boolean, List<String>, List<String>>(
                (Boolean) results.get(0).getValue(),
                convertToNative((List<Utf8String>) results.get(1).getValue()),
                convertToNative((List<Utf8String>) results.get(2).getValue()));
    }

    public TransactionReceipt grantRole(byte[] role, String account) {
        final Function function =
                new Function(
                        FUNC_GRANTROLE,
                        Arrays.<Type>asList(
                                new org.fisco.bcos.sdk.v3.codec.datatypes.generated.Bytes32(role),
                                new org.fisco.bcos.sdk.v3.codec.datatypes.Address(account)),
                        Collections.<TypeReference<?>>emptyList(),
                        4);
        return executeTransaction(function);
    }

    public String getSignedTransactionForGrantRole(byte[] role, String account) {
        final Function function =
                new Function(
                        FUNC_GRANTROLE,
                        Arrays.<Type>asList(
                                new org.fisco.bcos.sdk.v3.codec.datatypes.generated.Bytes32(role),
                                new org.fisco.bcos.sdk.v3.codec.datatypes.Address(account)),
                        Collections.<TypeReference<?>>emptyList(),
                        4);
        return createSignedTransaction(function);
    }

    public String grantRole(byte[] role, String account, TransactionCallback callback) {
        final Function function =
                new Function(
                        FUNC_GRANTROLE,
                        Arrays.<Type>asList(
                                new org.fisco.bcos.sdk.v3.codec.datatypes.generated.Bytes32(role),
                                new org.fisco.bcos.sdk.v3.codec.datatypes.Address(account)),
                        Collections.<TypeReference<?>>emptyList(),
                        4);
        return asyncExecuteTransaction(function, callback);
    }

    public Tuple2<byte[], String> getGrantRoleInput(TransactionReceipt transactionReceipt) {
        String data = transactionReceipt.getInput().substring(10);
        final Function function =
                new Function(
                        FUNC_GRANTROLE,
                        Arrays.<Type>asList(),
                        Arrays.<TypeReference<?>>asList(
                                new TypeReference<Bytes32>() {}, new TypeReference<Address>() {}));
        List<Type> results =
                this.functionReturnDecoder.decode(data, function.getOutputParameters());
        return new Tuple2<byte[], String>(
                (byte[]) results.get(0).getValue(), (String) results.get(1).getValue());
    }

    public TransactionReceipt grantUserManagePermission(String bid, String user) {
        final Function function =
                new Function(
                        FUNC_GRANTUSERMANAGEPERMISSION,
                        Arrays.<Type>asList(
                                new org.fisco.bcos.sdk.v3.codec.datatypes.Utf8String(bid),
                                new org.fisco.bcos.sdk.v3.codec.datatypes.Address(user)),
                        Collections.<TypeReference<?>>emptyList(),
                        0);
        return executeTransaction(function);
    }

    public String getSignedTransactionForGrantUserManagePermission(String bid, String user) {
        final Function function =
                new Function(
                        FUNC_GRANTUSERMANAGEPERMISSION,
                        Arrays.<Type>asList(
                                new org.fisco.bcos.sdk.v3.codec.datatypes.Utf8String(bid),
                                new org.fisco.bcos.sdk.v3.codec.datatypes.Address(user)),
                        Collections.<TypeReference<?>>emptyList(),
                        0);
        return createSignedTransaction(function);
    }

    public String grantUserManagePermission(String bid, String user, TransactionCallback callback) {
        final Function function =
                new Function(
                        FUNC_GRANTUSERMANAGEPERMISSION,
                        Arrays.<Type>asList(
                                new org.fisco.bcos.sdk.v3.codec.datatypes.Utf8String(bid),
                                new org.fisco.bcos.sdk.v3.codec.datatypes.Address(user)),
                        Collections.<TypeReference<?>>emptyList(),
                        0);
        return asyncExecuteTransaction(function, callback);
    }

    public Tuple2<String, String> getGrantUserManagePermissionInput(
            TransactionReceipt transactionReceipt) {
        String data = transactionReceipt.getInput().substring(10);
        final Function function =
                new Function(
                        FUNC_GRANTUSERMANAGEPERMISSION,
                        Arrays.<Type>asList(),
                        Arrays.<TypeReference<?>>asList(
                                new TypeReference<Utf8String>() {},
                                new TypeReference<Address>() {}));
        List<Type> results =
                this.functionReturnDecoder.decode(data, function.getOutputParameters());
        return new Tuple2<String, String>(
                (String) results.get(0).getValue(), (String) results.get(1).getValue());
    }

    public Boolean hasRole(byte[] role, String account) throws ContractException {
        final Function function =
                new Function(
                        FUNC_HASROLE,
                        Arrays.<Type>asList(
                                new org.fisco.bcos.sdk.v3.codec.datatypes.generated.Bytes32(role),
                                new org.fisco.bcos.sdk.v3.codec.datatypes.Address(account)),
                        Arrays.<TypeReference<?>>asList(new TypeReference<Bool>() {}));
        return executeCallWithSingleValueReturn(function, Boolean.class);
    }

    public Boolean hasUserManageRole(String bid) throws ContractException {
        final Function function =
                new Function(
                        FUNC_HASUSERMANAGEROLE,
                        Arrays.<Type>asList(
                                new org.fisco.bcos.sdk.v3.codec.datatypes.Utf8String(bid)),
                        Arrays.<TypeReference<?>>asList(new TypeReference<Bool>() {}));
        return executeCallWithSingleValueReturn(function, Boolean.class);
    }

    public TransactionReceipt renounceRole(byte[] role, String account) {
        final Function function =
                new Function(
                        FUNC_RENOUNCEROLE,
                        Arrays.<Type>asList(
                                new org.fisco.bcos.sdk.v3.codec.datatypes.generated.Bytes32(role),
                                new org.fisco.bcos.sdk.v3.codec.datatypes.Address(account)),
                        Collections.<TypeReference<?>>emptyList(),
                        0);
        return executeTransaction(function);
    }

    public String getSignedTransactionForRenounceRole(byte[] role, String account) {
        final Function function =
                new Function(
                        FUNC_RENOUNCEROLE,
                        Arrays.<Type>asList(
                                new org.fisco.bcos.sdk.v3.codec.datatypes.generated.Bytes32(role),
                                new org.fisco.bcos.sdk.v3.codec.datatypes.Address(account)),
                        Collections.<TypeReference<?>>emptyList(),
                        0);
        return createSignedTransaction(function);
    }

    public String renounceRole(byte[] role, String account, TransactionCallback callback) {
        final Function function =
                new Function(
                        FUNC_RENOUNCEROLE,
                        Arrays.<Type>asList(
                                new org.fisco.bcos.sdk.v3.codec.datatypes.generated.Bytes32(role),
                                new org.fisco.bcos.sdk.v3.codec.datatypes.Address(account)),
                        Collections.<TypeReference<?>>emptyList(),
                        0);
        return asyncExecuteTransaction(function, callback);
    }

    public Tuple2<byte[], String> getRenounceRoleInput(TransactionReceipt transactionReceipt) {
        String data = transactionReceipt.getInput().substring(10);
        final Function function =
                new Function(
                        FUNC_RENOUNCEROLE,
                        Arrays.<Type>asList(),
                        Arrays.<TypeReference<?>>asList(
                                new TypeReference<Bytes32>() {}, new TypeReference<Address>() {}));
        List<Type> results =
                this.functionReturnDecoder.decode(data, function.getOutputParameters());
        return new Tuple2<byte[], String>(
                (byte[]) results.get(0).getValue(), (String) results.get(1).getValue());
    }

    public TransactionReceipt revokeRole(byte[] role, String account) {
        final Function function =
                new Function(
                        FUNC_REVOKEROLE,
                        Arrays.<Type>asList(
                                new org.fisco.bcos.sdk.v3.codec.datatypes.generated.Bytes32(role),
                                new org.fisco.bcos.sdk.v3.codec.datatypes.Address(account)),
                        Collections.<TypeReference<?>>emptyList(),
                        4);
        return executeTransaction(function);
    }

    public String getSignedTransactionForRevokeRole(byte[] role, String account) {
        final Function function =
                new Function(
                        FUNC_REVOKEROLE,
                        Arrays.<Type>asList(
                                new org.fisco.bcos.sdk.v3.codec.datatypes.generated.Bytes32(role),
                                new org.fisco.bcos.sdk.v3.codec.datatypes.Address(account)),
                        Collections.<TypeReference<?>>emptyList(),
                        4);
        return createSignedTransaction(function);
    }

    public String revokeRole(byte[] role, String account, TransactionCallback callback) {
        final Function function =
                new Function(
                        FUNC_REVOKEROLE,
                        Arrays.<Type>asList(
                                new org.fisco.bcos.sdk.v3.codec.datatypes.generated.Bytes32(role),
                                new org.fisco.bcos.sdk.v3.codec.datatypes.Address(account)),
                        Collections.<TypeReference<?>>emptyList(),
                        4);
        return asyncExecuteTransaction(function, callback);
    }

    public Tuple2<byte[], String> getRevokeRoleInput(TransactionReceipt transactionReceipt) {
        String data = transactionReceipt.getInput().substring(10);
        final Function function =
                new Function(
                        FUNC_REVOKEROLE,
                        Arrays.<Type>asList(),
                        Arrays.<TypeReference<?>>asList(
                                new TypeReference<Bytes32>() {}, new TypeReference<Address>() {}));
        List<Type> results =
                this.functionReturnDecoder.decode(data, function.getOutputParameters());
        return new Tuple2<byte[], String>(
                (byte[]) results.get(0).getValue(), (String) results.get(1).getValue());
    }

    public TransactionReceipt revokeUserManagePermission(String bid) {
        final Function function =
                new Function(
                        FUNC_REVOKEUSERMANAGEPERMISSION,
                        Arrays.<Type>asList(
                                new org.fisco.bcos.sdk.v3.codec.datatypes.Utf8String(bid)),
                        Collections.<TypeReference<?>>emptyList(),
                        0);
        return executeTransaction(function);
    }

    public String getSignedTransactionForRevokeUserManagePermission(String bid) {
        final Function function =
                new Function(
                        FUNC_REVOKEUSERMANAGEPERMISSION,
                        Arrays.<Type>asList(
                                new org.fisco.bcos.sdk.v3.codec.datatypes.Utf8String(bid)),
                        Collections.<TypeReference<?>>emptyList(),
                        0);
        return createSignedTransaction(function);
    }

    public String revokeUserManagePermission(String bid, TransactionCallback callback) {
        final Function function =
                new Function(
                        FUNC_REVOKEUSERMANAGEPERMISSION,
                        Arrays.<Type>asList(
                                new org.fisco.bcos.sdk.v3.codec.datatypes.Utf8String(bid)),
                        Collections.<TypeReference<?>>emptyList(),
                        0);
        return asyncExecuteTransaction(function, callback);
    }

    public Tuple1<String> getRevokeUserManagePermissionInput(
            TransactionReceipt transactionReceipt) {
        String data = transactionReceipt.getInput().substring(10);
        final Function function =
                new Function(
                        FUNC_REVOKEUSERMANAGEPERMISSION,
                        Arrays.<Type>asList(),
                        Arrays.<TypeReference<?>>asList(new TypeReference<Utf8String>() {}));
        List<Type> results =
                this.functionReturnDecoder.decode(data, function.getOutputParameters());
        return new Tuple1<String>((String) results.get(0).getValue());
    }

    public Boolean supportsInterface(byte[] interfaceId) throws ContractException {
        final Function function =
                new Function(
                        FUNC_SUPPORTSINTERFACE,
                        Arrays.<Type>asList(
                                new org.fisco.bcos.sdk.v3.codec.datatypes.generated.Bytes4(
                                        interfaceId)),
                        Arrays.<TypeReference<?>>asList(new TypeReference<Bool>() {}));
        return executeCallWithSingleValueReturn(function, Boolean.class);
    }

    public TransactionReceipt withdrawReviewEvidence(String udri, String reviewerBid) {
        final Function function =
                new Function(
                        FUNC_WITHDRAWREVIEWEVIDENCE,
                        Arrays.<Type>asList(
                                new org.fisco.bcos.sdk.v3.codec.datatypes.Utf8String(udri),
                                new org.fisco.bcos.sdk.v3.codec.datatypes.Utf8String(reviewerBid)),
                        Collections.<TypeReference<?>>emptyList(),
                        0);
        return executeTransaction(function);
    }

    public String getSignedTransactionForWithdrawReviewEvidence(String udri, String reviewerBid) {
        final Function function =
                new Function(
                        FUNC_WITHDRAWREVIEWEVIDENCE,
                        Arrays.<Type>asList(
                                new org.fisco.bcos.sdk.v3.codec.datatypes.Utf8String(udri),
                                new org.fisco.bcos.sdk.v3.codec.datatypes.Utf8String(reviewerBid)),
                        Collections.<TypeReference<?>>emptyList(),
                        0);
        return createSignedTransaction(function);
    }

    public String withdrawReviewEvidence(
            String udri, String reviewerBid, TransactionCallback callback) {
        final Function function =
                new Function(
                        FUNC_WITHDRAWREVIEWEVIDENCE,
                        Arrays.<Type>asList(
                                new org.fisco.bcos.sdk.v3.codec.datatypes.Utf8String(udri),
                                new org.fisco.bcos.sdk.v3.codec.datatypes.Utf8String(reviewerBid)),
                        Collections.<TypeReference<?>>emptyList(),
                        0);
        return asyncExecuteTransaction(function, callback);
    }

    public Tuple2<String, String> getWithdrawReviewEvidenceInput(
            TransactionReceipt transactionReceipt) {
        String data = transactionReceipt.getInput().substring(10);
        final Function function =
                new Function(
                        FUNC_WITHDRAWREVIEWEVIDENCE,
                        Arrays.<Type>asList(),
                        Arrays.<TypeReference<?>>asList(
                                new TypeReference<Utf8String>() {},
                                new TypeReference<Utf8String>() {}));
        List<Type> results =
                this.functionReturnDecoder.decode(data, function.getOutputParameters());
        return new Tuple2<String, String>(
                (String) results.get(0).getValue(), (String) results.get(1).getValue());
    }

    public static DREvidenceReviewController load(
            String contractAddress, Client client, CryptoKeyPair credential) {
        return new DREvidenceReviewController(contractAddress, client, credential);
    }

    public static DREvidenceReviewController deploy(Client client, CryptoKeyPair credential)
            throws ContractException {
        return deploy(
                DREvidenceReviewController.class,
                client,
                credential,
                getBinary(client.getCryptoSuite()),
                getABI(),
                null,
                null);
    }

    public static class InitializedEventResponse {
        public TransactionReceipt.Logs log;

        public BigInteger version;
    }

    public static class NewReviewEvidenceStoredEventResponse {
        public TransactionReceipt.Logs log;

        public String sender;

        public byte[] udri;

        public BigInteger index;
    }

    public static class NewRightEvidenceStoredEventResponse {
        public TransactionReceipt.Logs log;

        public String sender;

        public byte[] udri;
    }

    public static class RoleAdminChangedEventResponse {
        public TransactionReceipt.Logs log;

        public byte[] role;

        public byte[] previousAdminRole;

        public byte[] newAdminRole;
    }

    public static class RoleGrantedEventResponse {
        public TransactionReceipt.Logs log;

        public byte[] role;

        public String account;

        public String sender;
    }

    public static class RoleRevokedEventResponse {
        public TransactionReceipt.Logs log;

        public byte[] role;

        public String account;

        public String sender;
    }

    public static class UserCreatedEventResponse {
        public TransactionReceipt.Logs log;

        public String sender;

        public byte[] bid;

        public byte[] usci;
    }

    public static class UserRoleChangedEventResponse {
        public TransactionReceipt.Logs log;

        public String sender;

        public byte[] bid;
    }
}
