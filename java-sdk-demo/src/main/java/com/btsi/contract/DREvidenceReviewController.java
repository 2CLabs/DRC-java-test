package com.btsi.contract;

import java.math.BigInteger;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.Collections;
import java.util.List;
import org.fisco.bcos.sdk.v3.client.Client;
import org.fisco.bcos.sdk.v3.codec.datatypes.Address;
import org.fisco.bcos.sdk.v3.codec.datatypes.Bool;
import org.fisco.bcos.sdk.v3.codec.datatypes.DynamicArray;
import org.fisco.bcos.sdk.v3.codec.datatypes.Event;
import org.fisco.bcos.sdk.v3.codec.datatypes.Function;
import org.fisco.bcos.sdk.v3.codec.datatypes.Type;
import org.fisco.bcos.sdk.v3.codec.datatypes.TypeReference;
import org.fisco.bcos.sdk.v3.codec.datatypes.Utf8String;
import org.fisco.bcos.sdk.v3.codec.datatypes.generated.Bytes32;
import org.fisco.bcos.sdk.v3.codec.datatypes.generated.Uint256;
import org.fisco.bcos.sdk.v3.codec.datatypes.generated.Uint32;
import org.fisco.bcos.sdk.v3.codec.datatypes.generated.Uint8;
import org.fisco.bcos.sdk.v3.codec.datatypes.generated.tuples.generated.Tuple1;
import org.fisco.bcos.sdk.v3.codec.datatypes.generated.tuples.generated.Tuple2;
import org.fisco.bcos.sdk.v3.codec.datatypes.generated.tuples.generated.Tuple3;
import org.fisco.bcos.sdk.v3.codec.datatypes.generated.tuples.generated.Tuple4;
import org.fisco.bcos.sdk.v3.codec.datatypes.generated.tuples.generated.Tuple5;
import org.fisco.bcos.sdk.v3.contract.Contract;
import org.fisco.bcos.sdk.v3.crypto.CryptoSuite;
import org.fisco.bcos.sdk.v3.crypto.keypair.CryptoKeyPair;
import org.fisco.bcos.sdk.v3.model.CryptoType;
import org.fisco.bcos.sdk.v3.model.TransactionReceipt;
import org.fisco.bcos.sdk.v3.model.callback.TransactionCallback;
import org.fisco.bcos.sdk.v3.transaction.model.exception.ContractException;

@SuppressWarnings("unchecked")
public class DREvidenceReviewController extends Contract {
    public static final String[] BINARY_ARRAY = {
        "",
        "",
        "60405190808252806020026020018201604052801561201257816020015b6060815260200190600190039081611ffd5790505b50905060005b84518163ffffffff1610156120f8576000858263ffffffff168151811061204157612041613703565b60200260200101519050600061206a82805190602001208960070161194390919063ffffffff16565b8051909150156120e35781848663ffffffff168151811061208d5761208d613703565b602090810291909101015280846120a5876001613719565b63ffffffff16815181106120bb576120bb613703565b602002602001018190525085806120d1906136df565b96506120e09050856002613719565b94505b505080806120f0906136df565b915050612018565b509450505b5050509392505050565b60008181526003830160205260408120546121645760405162461bcd60e51b815260206004820152601f60248201527f45766964656e636553746f726167653a20656964206e6f74206578697374730060448201526064016103b4565b506000908152600391909101602052604090205490565b60606105ce61218983612ab1565b8490611917565b60008151116121cd5760405162461bcd60e51b81526020600482015260096024820152683134b21032b93937b960b91b60448201526064016103b4565b6121d78282612ac8565b15156001146103c75760405162461bcd60e51b815260206004820152601e60248201527f626974206e6f74207265676973746572206f6e207468697320636861696e000060448201526064016103b4565b6000838152600285016020526040902060080154156122955760405162461bcd60e51b8152602060048201526024808201527f45766964656e636553746f726167653a207564726920616c72656164792065786044820152636973747360e01b60648201526084016103b4565b6000838152600285016020908152604090912083516122b692850190612e1e565b506000838152600285016020908152604090912082516122de92600690920191840190612ea2565b505050600090815260029091016020526040902042600890910155565b611bec828051906020012082866002016000878152602001908152602001600020600101612af89092919063ffffffff16565b611bec828051906020012082866002016000878152602001908152602001600020600301612b149092919063ffffffff16565b611bec828051906020012082866002016000878152602001908152602001600020600401612b409092919063ffffffff16565b600083600101836040516123a8919061365c565b908152604080516020928190038301812081830190925260158152741d5cd95c8e9c995d9a595dce995a590e98dbdd5b9d605a1b9201919091529050600061241e7f8e7e22a149a62d266f1366830ad13fadc3d0c42cdbb2dca110769fc88fb0ddbb600090815260098401602052604090205490565b9050600061245d61099f61243184612b55565b60408051808201909152600f81526e32afb932bb34b2bb9d34b73232bc1d60891b602082015290611917565b6000818152600885016020526040902085905590506040805180820190915260158152741d5cd95c8e9c995d9a595dce995a590e98dbdd5b9d605a1b602090910152610ba07f8e7e22a149a62d266f1366830ad13fadc3d0c42cdbb2dca110769fc88fb0ddbb6124ce8460016138a9565b600091825260098601602052604090912055600190565b600281516124f3919061385b565b1561253c5760405162461bcd60e51b81526020600482015260196024820152783b30b934b0b13632a230ba30903632b733ba341032b93937b960391b60448201526064016103b4565b60006125488585612a08565b905060005b82518163ffffffff1610156106a4576000838263ffffffff168151811061257657612576613703565b602002602001015190506000848360016125909190613719565b63ffffffff16815181106125a6576125a6613703565b602002602001015190506125bb888784612b64565b151560011461261d5760405162461bcd60e51b815260206004820152602860248201527f50617274206f66207661726961626c6544617461206669656c64206973206e6f6044820152673a1030b63637bbb760c11b60648201526084016103b4565b81516020830120612633906007860190836129e1565b5050506002816126439190613719565b905061254d565b6000828152600384016020526040902054156126b45760405162461bcd60e51b815260206004820152602360248201527f45766964656e636553746f726167653a2062696420616c72656164792065786960448201526273747360e81b60648201526084016103b4565b600091825260039092016020526040902055565b60606103186001600160a01b03831660145b606060006126e98360026138c1565b6126f49060026138a9565b6001600160401b0381111561270b5761270b612fed565b6040519080825280601f01601f191660200182016040528015612735576020820181803683370190505b509050600360fc1b8160008151811061275057612750613703565b60200101906001600160f81b031916908160001a905350600f60fb1b8160018151811061277f5761277f613703565b60200101906001600160f81b031916908160001a90535060006127a38460026138c1565b6127ae9060016138a9565b90505b6001811115612826576f181899199a1a9b1b9c1cb0b131b232b360811b85600f16601081106127e2576127e2613703565b1a60f81b8282815181106127f8576127f8613703565b60200101906001600160f81b031916908160001a90535060049490941c9361281f816138e0565b90506127b1565b5083156105415760405162461bcd60e51b815260206004820181905260248201527f537472696e67733a20686578206c656e67746820696e73756666696369656e7460448201526064016103b4565b60408051808201909152601081526f636f6e74726f6c5f656e61626c65643d60801b60208201526000906105417f9dbfebaee4c898490164a8ab686838c633319f3806d3dea7cd93c1cfefb35e07600090815260068501602052604090205463ffffffff1690565b6000908152602091909152604090205490565b6000908152602091909152604090205463ffffffff1690565b60008072184f03e93ff9f4daa797ed6e38ed64bf6a1f0160401b83106129485772184f03e93ff9f4daa797ed6e38ed64bf6a1f0160401b830492506040015b6d04ee2d6d415b85acef81000000008310612974576d04ee2d6d415b85acef8100000000830492506020015b662386f26fc10000831061299257662386f26fc10000830492506010015b6305f5e10083106129aa576305f5e100830492506008015b61271083106129be57612710830492506004015b606483106129d0576064830492506002015b600a83106103185760010192915050565b600082815260208481526040822083516129fd92850190612e1e565b506001949350505050565b6000818152600283016020526040812060080154612a385760405162461bcd60e51b81526004016103b490613817565b5060009081526002919091016020526040902090565b60606000612a9a6040518060400160405280602081526020017f3a7661726961626c655f646174613a737570706f727465645f66696c6564733d8152508461191790919063ffffffff16565b805160208201209091506106366004860182612be7565b606061031882612ac081612ccb565b600101612d35565b60008260010182604051612adc919061365c565b908152604051908190036020019020600b015415159392505050565b600082815260208481526040822083516129fd92850190612ea2565b6000828152602084905260409020805463ffffffff831663ffffffff1990911617905560019392505050565b60009182526020929092526040902055600190565b606061031882612ac084612ccb565b600080612ba883610b2a604051806040016040528060128152602001717661726961626c655f646174613a6b65793d60701b8152508761191790919063ffffffff16565b80516020820120909150612bd360068701826000908152602091909152604090205463ffffffff1690565b63ffffffff16600114925050509392505050565b600081815260208381526040808320805482518185028101850190935280835260609492939192909184015b82821015612cbf578382906000526020600020018054612c32906137b6565b80601f0160208091040260200160405190810160405280929190818152602001828054612c5e906137b6565b8015612cab5780601f10612c8057610100808354040283529160200191612cab565b820191906000526020600020905b815481529060010190602001808311612c8e57829003601f168201915b505050505081526020019060010190612c13565b50505050905092915050565b600080608083901c15612ce35760809290921c916010015b604083901c15612cf85760409290921c916008015b602083901c15612d0d5760209290921c916004015b601083901c15612d225760109290921c916002015b600883901c156103185760010192915050565b6060826000612d458460026138c1565b6001600160401b03811115612d5c57612d5c612fed565b6040519080825280601f01601f191660200182016040528015612d86576020820181803683370190505b5090506000612d968560026138c1565b90505b8015612e15576f181899199a1a9b1b9c1cb0b131b232b360811b83600f1660108110612dc757612dc7613703565b1a60f81b82612dd76001846138f7565b81518110612de757612de7613703565b60200101906001600160f81b031916908160001a90535060049290921c91612e0e816138e0565b9050612d99565b50949350505050565b828054612e2a906137b6565b90600052602060002090601f016020900481019282612e4c5760008555612e92565b82601f10612e6557805160ff1916838001178555612e92565b82800160010185558215612e92579182015b82811115612e92578251825591602001919060010190612e77565b50612e9e929150612efb565b5090565b828054828255906000526020600020908101928215612eef579160200282015b82811115612eef5782518051612edf918491602090910190612e1e565b5091602001919060010190612ec2565b50612e9e929150612f10565b5b80821115612e9e5760008155600101612efc565b80821115612e9e576000612f248282612f2d565b50600101612f10565b508054612f39906137b6565b6000825580601f10612f49575050565b601f01602090049060005260206000209081019061077f9190612efb565b600060208284031215612f7957600080fd5b81356001600160e01b03198116811461054157600080fd5b600060208284031215612fa357600080fd5b5035919050565b80356001600160a01b038116811461052e57600080fd5b60008060408385031215612fd457600080fd5b82359150612fe460208401",
        "612faa565b90509250929050565b634e487b7160e01b600052604160045260246000fd5b604051601f8201601f191681016001600160401b038111828210171561302b5761302b612fed565b604052919050565b600082601f83011261304457600080fd5b81356001600160401b0381111561305d5761305d612fed565b613070601f8201601f1916602001613003565b81815284602083860101111561308557600080fd5b816020850160208301376000918101602001919091529392505050565b600080604083850312156130b557600080fd5b82356001600160401b03808211156130cc57600080fd5b6130d886838701613033565b935060208501359150808211156130ee57600080fd5b506130fb85828601613033565b9150509250929050565b6000806040838503121561311857600080fd5b82356001600160401b0381111561312e57600080fd5b61313a85828601613033565b925050612fe460208401612faa565b60006020828403121561315b57600080fd5b81356001600160401b0381111561317157600080fd5b6105ce84828501613033565b60008083601f84011261318f57600080fd5b5081356001600160401b038111156131a657600080fd5b6020830191508360208285010111156118e657600080fd5b600080602083850312156131d157600080fd5b82356001600160401b038111156131e757600080fd5b6131f38582860161317d565b90969095509350505050565b803563ffffffff8116811461052e57600080fd5b60008060008060006060868803121561322b57600080fd5b85356001600160401b038082111561324257600080fd5b61324e89838a0161317d565b9097509550602088013591508082111561326757600080fd5b506132748882890161317d565b90945092506132879050604087016131ff565b90509295509295909350565b60005b838110156132ae578181015183820152602001613296565b83811115610a205750506000910152565b600081518084526132d7816020860160208601613293565b601f01601f19169290920160200192915050565b600081518084526020808501808196508360051b8101915082860160005b858110156133335782840389526133218483516132bf565b98850198935090840190600101613309565b5091979650505050505050565b831515815260606020820152600061335b60608301856132eb565b828103604084015261336d81856132eb565b9695505050505050565b60008060006040848603121561338c57600080fd5b83356001600160401b038111156133a257600080fd5b6133ae8682870161317d565b90945092506133c19050602085016131ff565b90509250925092565b84151581526080602082015260006133e560808301866132bf565b82810360408401526133f781866132eb565b9050828103606084015261340b81856132eb565b979650505050505050565b600082601f83011261342757600080fd5b813560206001600160401b038083111561344357613443612fed565b8260051b613452838201613003565b938452858101830193838101908886111561346c57600080fd5b84880192505b858310156134a85782358481111561348a5760008081fd5b6134988a87838c0101613033565b8352509184019190840190613472565b98975050505050505050565b600080604083850312156134c757600080fd5b82356001600160401b03808211156134de57600080fd5b6134ea86838701613033565b9350602085013591508082111561350057600080fd5b506130fb85828601613416565b60208152600061054160208301846132bf565b6000806000806040858703121561353657600080fd5b84356001600160401b038082111561354d57600080fd5b6135598883890161317d565b9096509450602087013591508082111561357257600080fd5b5061357f8782880161317d565b95989497509550505050565b600080600080600060a086880312156135a357600080fd5b85356001600160401b03808211156135ba57600080fd5b6135c689838a01613033565b965060208801359150808211156135dc57600080fd5b6135e889838a01613033565b955060408801359150808211156135fe57600080fd5b61360a89838a01613416565b9450606088013591508082111561362057600080fd5b61362c89838a01613416565b9350608088013591508082111561364257600080fd5b5061364f88828901613416565b9150509295509295909350565b6000825161366e818460208701613293565b9190910192915050565b634e487b7160e01b600052601160045260246000fd5b600063ffffffff838116908316818110156136ab576136ab613678565b039392505050565b6020808252601290820152713ab23934903737ba1037b71031b430b4b71760711b604082015260600190565b600063ffffffff808316818114156136f9576136f9613678565b6001019392505050565b634e487b7160e01b600052603260045260246000fd5b600063ffffffff80831681851680830382111561373857613738613678565b01949350505050565b7f416363657373436f6e74726f6c3a206163636f756e7420000000000000000000815260008351613779816017850160208801613293565b7001034b99036b4b9b9b4b733903937b6329607d1b60179184019182015283516137aa816028840160208801613293565b01602801949350505050565b600181811c908216806137ca57607f821691505b602082108114156137eb57634e487b7160e01b600052602260045260246000fd5b50919050565b60008351613803818460208801613293565b835190830190613738818360208801613293565b60208082526024908201527f45766964656e636553746f726167653a2045766964656e6365206e6f742065786040820152636973747360e01b606082015260800190565b60008261387857634e487b7160e01b600052601260045260246000fd5b500690565b600063ffffffff808316818516818304811182151516156138a0576138a0613678565b02949350505050565b600082198211156138bc576138bc613678565b500190565b60008160001904831182151516156138db576138db613678565b500290565b6000816138ef576138ef613678565b506000190190565b60008282101561390957613909613678565b50039056fe445245766964656e636553746f72616765436f6e7374616e742e45564944454e43455f434f4e54524143545f56455253494f4e5f563122f59c2f02edbae5c421247f029fe3112c5a85f70b4a48f5d93b22ada9ea772ea2646970667358221220c5d4c3e9b1d4f0fdae7105a0c20b7d4708e480d5b3884b797b4ae838e26ac5ff64736f6c634300080b0033"
    };

    public static final String BINARY =
            org.fisco.bcos.sdk.v3.utils.StringUtils.joinAll("", BINARY_ARRAY);

    public static final String[] SM_BINARY_ARRAY = {
        "",
        "",
        "",
        "8201601f191681016001600160401b038111828210171561300257613002612fc4565b604052919050565b600082601f83011261301b57600080fd5b81356001600160401b0381111561303457613034612fc4565b613047601f8201601f1916602001612fda565b81815284602083860101111561305c57600080fd5b816020850160208301376000918101602001919091529392505050565b600082601f83011261308a57600080fd5b813560206001600160401b03808311156130a6576130a6612fc4565b8260051b6130b5838201612fda565b93845285810183019383810190888611156130cf57600080fd5b84880192505b8583101561310b578235848111156130ed5760008081fd5b6130fb8a87838c010161300a565b83525091840191908401906130d5565b98975050505050505050565b600080600080600060a0868803121561312f57600080fd5b85356001600160401b038082111561314657600080fd5b61315289838a0161300a565b9650602088013591508082111561316857600080fd5b61317489838a0161300a565b9550604088013591508082111561318a57600080fd5b61319689838a01613079565b945060608801359150808211156131ac57600080fd5b6131b889838a01613079565b935060808801359150808211156131ce57600080fd5b506131db88828901613079565b9150509295509295909350565b60008083601f8401126131fa57600080fd5b5081356001600160401b0381111561321157600080fd5b60208301915083602082850101111561189957600080fd5b6000806020838503121561323c57600080fd5b82356001600160401b0381111561325257600080fd5b61325e858286016131e8565b90969095509350505050565b60006020828403121561327c57600080fd5b81356001600160401b0381111561329257600080fd5b61074d8482850161300a565b60005b838110156132b95781810151838201526020016132a1565b838111156109915750506000910152565b600081518084526132e281602086016020860161329e565b601f01601f19169290920160200192915050565b600081518084526020808501808196508360051b8101915082860160005b8581101561333e57828403895261332c8483516132ca565b98850198935090840190600101613314565b5091979650505050505050565b841515815260806020820152600061336660808301866132ca565b828103604084015261337881866132f6565b9050828103606084015261338c81856132f6565b979650505050505050565b600080604083850312156133aa57600080fd5b82356001600160401b03808211156133c157600080fd5b6133cd8683870161300a565b935060208501359150808211156133e357600080fd5b506133f08582860161300a565b9150509250929050565b6000806000806040858703121561341057600080fd5b84356001600160401b038082111561342757600080fd5b613433888389016131e8565b9096509450602087013591508082111561344c57600080fd5b50613459878288016131e8565b95989497509550505050565b6000806040838503121561347857600080fd5b82356001600160401b0381111561348e57600080fd5b61349a8582860161300a565b925050612fbb60208401612f81565b803563ffffffff811681146105e057600080fd5b6000806000806000606086880312156134d557600080fd5b85356001600160401b03808211156134ec57600080fd5b6134f889838a016131e8565b9097509550602088013591508082111561351157600080fd5b5061351e888289016131e8565b90945092506135319050604087016134a9565b90509295509295909350565b831515815260606020820152600061355860608301856132f6565b828103604084015261356a81856132f6565b9695505050505050565b60006020828403121561358657600080fd5b81356001600160e01b0319811681146103e657600080fd5b6000806000604084860312156135b357600080fd5b83356001600160401b038111156135c957600080fd5b6135d5868287016131e8565b90945092506135e89050602085016134a9565b90509250925092565b6000806040838503121561360457600080fd5b82356001600160401b038082111561361b57600080fd5b6136278683870161300a565b9350602085013591508082111561363d57600080fd5b506133f085828601613079565b6020815260006103e660208301846132ca565b60006020828403121561366f57600080fd5b5035919050565b63b95aa35560e01b600052601160045260246000fd5b600063ffffffff838116908316818110156136a9576136a9613676565b039392505050565b600082516136c381846020870161329e565b9190910192915050565b6020808252601290820152713ab23934903737ba1037b71031b430b4b71760711b604082015260600190565b600063ffffffff80831681851680830382111561371857613718613676565b01949350505050565b600063ffffffff8083168181141561373b5761373b613676565b6001019392505050565b63b95aa35560e01b600052603260045260246000fd5b600181811c9082168061376f57607f821691505b602082108114156137905763b95aa35560e01b600052602260045260246000fd5b50919050565b600083516137a881846020880161329e565b83519083019061371881836020880161329e565b60208082526024908201527f45766964656e636553746f726167653a2045766964656e6365206e6f742065786040820152636973747360e01b606082015260800190565b6000821982111561381357613813613676565b500190565b6000826138355763b95aa35560e01b600052601260045260246000fd5b500690565b7f416363657373436f6e74726f6c3a206163636f756e742000000000000000000081526000835161387281601785016020880161329e565b7001034b99036b4b9b9b4b733903937b6329607d1b60179184019182015283516138a381602884016020880161329e565b01602801949350505050565b600063ffffffff808316818516818304811182151516156138d2576138d2613676565b02949350505050565b60008160001904831182151516156138f5576138f5613676565b500290565b60008161390957613909613676565b506000190190565b60008282101561392357613923613676565b50039056fecda5c054d055f48a2866e1a28d72f8145e422f1db1872bc4c9fe2888702c9f8d445245766964656e636553746f72616765436f6e7374616e742e45564944454e43455f434f4e54524143545f56455253494f4e5f5631a2646970667358221220e4e2a35530967e2b4404e364885caedfc791958d0c4fb675f5ad15d9b6f291cf64736f6c634300080b0033"
    };

    public static final String SM_BINARY =
            org.fisco.bcos.sdk.v3.utils.StringUtils.joinAll("", SM_BINARY_ARRAY);

    public static final String[] ABI_ARRAY = {
        "[{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint8\",\"name\":\"version\",\"type\":\"uint8\"}],\"name\":\"Initialized\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"string\",\"name\":\"udri\",\"type\":\"string\"},{\"indexed\":true,\"internalType\":\"uint32\",\"name\":\"index\",\"type\":\"uint32\"}],\"name\":\"NewReviewEvidenceStored\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"string\",\"name\":\"udri\",\"type\":\"string\"}],\"name\":\"NewRightEvidenceStored\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"previousAdminRole\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"newAdminRole\",\"type\":\"bytes32\"}],\"name\":\"RoleAdminChanged\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"}],\"name\":\"RoleGranted\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"}],\"name\":\"RoleRevoked\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"string\",\"name\":\"bid\",\"type\":\"string\"},{\"indexed\":true,\"internalType\":\"string\",\"name\":\"usci\",\"type\":\"string\"}],\"name\":\"UserCreated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"string\",\"name\":\"bid\",\"type\":\"string\"}],\"name\":\"UserRoleChanged\",\"type\":\"event\"},{\"conflictFields\":[{\"kind\":5}],\"inputs\":[],\"name\":\"DEFAULT_ADMIN_ROLE\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"selector\":[2719481311,456278200],\"stateMutability\":\"view\",\"type\":\"function\"},{\"conflictFields\":[{\"kind\":5}],\"inputs\":[],\"name\":\"USERMANAGE_ROLE\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"selector\":[852968231,3061267160],\"stateMutability\":\"view\",\"type\":\"function\"},{\"conflictFields\":[{\"kind\":5}],\"inputs\":[{\"internalType\":\"string\",\"name\":\"udri\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"reviewerBid\",\"type\":\"string\"},{\"internalType\":\"string[]\",\"name\":\"reviewDataHash\",\"type\":\"string[]\"},{\"internalType\":\"string[]\",\"name\":\"metaData\",\"type\":\"string[]\"},{\"internalType\":\"string[]\",\"name\":\"variableData\",\"type\":\"string[]\"}],\"name\":\"addReviewEvidence\",\"outputs\":[],\"selector\":[4024293368,766756406],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"conflictFields\":[{\"kind\":5}],\"inputs\":[{\"internalType\":\"string\",\"name\":\"udri\",\"type\":\"string\"},{\"internalType\":\"string[]\",\"name\":\"reviewDataHash\",\"type\":\"string[]\"}],\"name\":\"genReviewEid\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"eid\",\"type\":\"string\"}],\"selector\":[2390601602,4131535128],\"stateMutability\":\"view\",\"type\":\"function\"},{\"conflictFields\":[{\"kind\":0}],\"inputs\":[{\"internalType\":\"string\",\"name\":\"udri\",\"type\":\"string\"}],\"name\":\"getReviewCount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"reviewCount\",\"type\":\"uint256\"}],\"selector\":[1485793629,1330250274],\"stateMutability\":\"view\",\"type\":\"function\"},{\"conflictFields\":[{\"kind\":0}],\"inputs\":[{\"internalType\":\"string\",\"name\":\"udri\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"reviewerBid\",\"type\":\"string\"}],\"name\":\"getReviewCountOfReviewer\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"count\",\"type\":\"uint256\"}],\"selector\":[3868489521,2826438872],\"stateMutability\":\"view\",\"type\":\"function\"},{\"conflictFields\":[{\"kind\":0}],\"inputs\":[{\"internalType\":\"string\",\"name\":\"eid\",\"type\":\"string\"}],\"name\":\"getReviewEvidenceViaEid\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"isWithdraw\",\"type\":\"bool\"},{\"internalType\":\"string\",\"name\":\"reviewerBid\",\"type\":\"string\"},{\"internalType\":\"string[]\",\"name\":\"metaData\",\"type\":\"string[]\"},{\"internalType\":\"string[]\",\"name\":\"variableData\",\"type\":\"string[]\"}],\"selector\":[2101214845,1635642682],\"stateMutability\":\"view\",\"type\":\"function\"},{\"conflictFields\":[{\"kind\":3,\"slot\":101,\"value\":[0]}],\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"}],\"name\":\"getRoleAdmin\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"selector\":[613063843,4224970943],\"stateMutability\":\"view\",\"type\":\"function\"},{\"conflictFields\":[{\"kind\":5}],\"inputs\":[{\"internalType\":\"string\",\"name\":\"udri\",\"type\":\"string\"},{\"internalType\":\"uint32\",\"name\":\"index\",\"type\":\"uint32\"}],\"name\":\"getVerifyEvidence\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"isWithdraw\",\"type\":\"bool\"},{\"internalType\":\"string\",\"name\":\"reviewerBid\",\"type\":\"string\"},{\"internalType\":\"string[]\",\"name\":\"metaData\",\"type\":\"string[]\"},{\"internalType\":\"string[]\",\"name\":\"variableData\",\"type\":\"string[]\"}],\"selector\":[1855339097,4061585395],\"stateMutability\":\"view\",\"type\":\"function\"},{\"conflictFields\":[{\"kind\":0}],\"inputs\":[{\"internalType\":\"string\",\"name\":\"udri\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"reviewerBid\",\"type\":\"string\"},{\"internalType\":\"uint32\",\"name\":\"index\",\"type\":\"uint32\"}],\"name\":\"getVerifyEvidenceOfReviewer\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"isWithdraw\",\"type\":\"bool\"},{\"internalType\":\"string[]\",\"name\":\"metaData\",\"type\":\"string[]\"},{\"internalType\":\"string[]\",\"name\":\"variableData\",\"type\":\"string[]\"}],\"selector\":[1591648918,3508812136],\"stateMutability\":\"view\",\"type\":\"function\"},{\"conflictFields\":[{\"kind\":3,\"slot\":101,\"value\":[0]}],\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"grantRole\",\"outputs\":[],\"selector\":[791671133,1416757515],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"conflictFields\":[{\"kind\":0}],\"inputs\":[{\"internalType\":\"string\",\"name\":\"bid\",\"type\":\"string\"},{\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"}],\"name\":\"grantUserManagePermission\",\"outputs\":[],\"selector\":[1037211317,3070963644],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"conflictFields\":[{\"kind\":3,\"slot\":101,\"value\":[0]}],\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"hasRole\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"selector\":[2446411860,3734140252],\"stateMutability\":\"view\",\"type\":\"function\"},{\"conflictFields\":[{\"kind\":0},{\"kind\":4,\"slot\":101,\"value\":[34,245,156,47,2,237,186,229,196,33,36,127,2,159,227,17,44,90,133,247,11,74,72,245,217,59,34,173,169,234,119,46]}],\"inputs\":[{\"internalType\":\"string\",\"name\":\"bid\",\"type\":\"string\"}],\"name\":\"hasUserManageRole\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"selector\":[1290417574,3048132719],\"stateMutability\":\"view\",\"type\":\"function\"},{\"conflictFields\":[{\"kind\":0},{\"kind\":3,\"slot\":101,\"value\":[0]}],\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"renounceRole\",\"outputs\":[],\"selector\":[911641278,399928776],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"conflictFields\":[{\"kind\":3,\"slot\":101,\"value\":[0]}],\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"revokeRole\",\"outputs\":[],\"selector\":[3578229791,4245284822],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"conflictFields\":[{\"kind\":0}],\"inputs\":[{\"internalType\":\"string\",\"name\":\"bid\",\"type\":\"string\"}],\"name\":\"revokeUserManagePermission\",\"outputs\":[],\"selector\":[4233016450,2768200898],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"conflictFields\":[{\"kind\":5}],\"inputs\":[{\"internalType\":\"bytes4\",\"name\":\"interfaceId\",\"type\":\"bytes4\"}],\"name\":\"supportsInterface\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"selector\":[33540519,3934173080],\"stateMutability\":\"view\",\"type\":\"f",
        "unction\"},{\"conflictFields\":[{\"kind\":0}],\"inputs\":[{\"internalType\":\"string\",\"name\":\"udri\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"reviewerBid\",\"type\":\"string\"}],\"name\":\"withdrawReviewEvidence\",\"outputs\":[],\"selector\":[932021754,2229502562],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]"
    };

    public static final String ABI = org.fisco.bcos.sdk.v3.utils.StringUtils.joinAll("", ABI_ARRAY);

    public static final String FUNC_DEFAULT_ADMIN_ROLE = "DEFAULT_ADMIN_ROLE";

    public static final String FUNC_USERMANAGE_ROLE = "USERMANAGE_ROLE";

    public static final String FUNC_ADDREVIEWEVIDENCE = "addReviewEvidence";

    public static final String FUNC_GENREVIEWEID = "genReviewEid";

    public static final String FUNC_GETREVIEWCOUNT = "getReviewCount";

    public static final String FUNC_GETREVIEWCOUNTOFREVIEWER = "getReviewCountOfReviewer";

    public static final String FUNC_GETREVIEWEVIDENCEVIAEID = "getReviewEvidenceViaEid";

    public static final String FUNC_GETROLEADMIN = "getRoleAdmin";

    public static final String FUNC_GETVERIFYEVIDENCE = "getVerifyEvidence";

    public static final String FUNC_GETVERIFYEVIDENCEOFREVIEWER = "getVerifyEvidenceOfReviewer";

    public static final String FUNC_GRANTROLE = "grantRole";

    public static final String FUNC_GRANTUSERMANAGEPERMISSION = "grantUserManagePermission";

    public static final String FUNC_HASROLE = "hasRole";

    public static final String FUNC_HASUSERMANAGEROLE = "hasUserManageRole";

    public static final String FUNC_RENOUNCEROLE = "renounceRole";

    public static final String FUNC_REVOKEROLE = "revokeRole";

    public static final String FUNC_REVOKEUSERMANAGEPERMISSION = "revokeUserManagePermission";

    public static final String FUNC_SUPPORTSINTERFACE = "supportsInterface";

    public static final String FUNC_WITHDRAWREVIEWEVIDENCE = "withdrawReviewEvidence";

    public static final Event INITIALIZED_EVENT =
            new Event(
                    "Initialized", Arrays.<TypeReference<?>>asList(new TypeReference<Uint8>() {}));;

    public static final Event NEWREVIEWEVIDENCESTORED_EVENT =
            new Event(
                    "NewReviewEvidenceStored",
                    Arrays.<TypeReference<?>>asList(
                            new TypeReference<Address>(true) {},
                            new TypeReference<Utf8String>(true) {},
                            new TypeReference<Uint32>(true) {}));;

    public static final Event NEWRIGHTEVIDENCESTORED_EVENT =
            new Event(
                    "NewRightEvidenceStored",
                    Arrays.<TypeReference<?>>asList(
                            new TypeReference<Address>(true) {},
                            new TypeReference<Utf8String>(true) {}));;

    public static final Event ROLEADMINCHANGED_EVENT =
            new Event(
                    "RoleAdminChanged",
                    Arrays.<TypeReference<?>>asList(
                            new TypeReference<Bytes32>(true) {},
                            new TypeReference<Bytes32>(true) {},
                            new TypeReference<Bytes32>(true) {}));;

    public static final Event ROLEGRANTED_EVENT =
            new Event(
                    "RoleGranted",
                    Arrays.<TypeReference<?>>asList(
                            new TypeReference<Bytes32>(true) {},
                            new TypeReference<Address>(true) {},
                            new TypeReference<Address>(true) {}));;

    public static final Event ROLEREVOKED_EVENT =
            new Event(
                    "RoleRevoked",
                    Arrays.<TypeReference<?>>asList(
                            new TypeReference<Bytes32>(true) {},
                            new TypeReference<Address>(true) {},
                            new TypeReference<Address>(true) {}));;

    public static final Event USERCREATED_EVENT =
            new Event(
                    "UserCreated",
                    Arrays.<TypeReference<?>>asList(
                            new TypeReference<Address>(true) {},
                            new TypeReference<Utf8String>(true) {},
                            new TypeReference<Utf8String>(true) {}));;

    public static final Event USERROLECHANGED_EVENT =
            new Event(
                    "UserRoleChanged",
                    Arrays.<TypeReference<?>>asList(
                            new TypeReference<Address>(true) {},
                            new TypeReference<Utf8String>(true) {}));;

    protected DREvidenceReviewController(
            String contractAddress, Client client, CryptoKeyPair credential) {
        super(getBinary(client.getCryptoSuite()), contractAddress, client, credential);
    }

    public static String getBinary(CryptoSuite cryptoSuite) {
        return (cryptoSuite.getCryptoTypeConfig() == CryptoType.ECDSA_TYPE ? BINARY : SM_BINARY);
    }

    public static String getABI() {
        return ABI;
    }

    public List<InitializedEventResponse> getInitializedEvents(
            TransactionReceipt transactionReceipt) {
        List<Contract.EventValuesWithLog> valueList =
                extractEventParametersWithLog(INITIALIZED_EVENT, transactionReceipt);
        ArrayList<InitializedEventResponse> responses =
                new ArrayList<InitializedEventResponse>(valueList.size());
        for (Contract.EventValuesWithLog eventValues : valueList) {
            InitializedEventResponse typedResponse = new InitializedEventResponse();
            typedResponse.log = eventValues.getLog();
            typedResponse.version =
                    (BigInteger) eventValues.getNonIndexedValues().get(0).getValue();
            responses.add(typedResponse);
        }
        return responses;
    }

    public List<NewReviewEvidenceStoredEventResponse> getNewReviewEvidenceStoredEvents(
            TransactionReceipt transactionReceipt) {
        List<Contract.EventValuesWithLog> valueList =
                extractEventParametersWithLog(NEWREVIEWEVIDENCESTORED_EVENT, transactionReceipt);
        ArrayList<NewReviewEvidenceStoredEventResponse> responses =
                new ArrayList<NewReviewEvidenceStoredEventResponse>(valueList.size());
        for (Contract.EventValuesWithLog eventValues : valueList) {
            NewReviewEvidenceStoredEventResponse typedResponse =
                    new NewReviewEvidenceStoredEventResponse();
            typedResponse.log = eventValues.getLog();
            typedResponse.sender = (String) eventValues.getIndexedValues().get(0).getValue();
            typedResponse.udri = (byte[]) eventValues.getIndexedValues().get(1).getValue();
            typedResponse.index = (BigInteger) eventValues.getIndexedValues().get(2).getValue();
            responses.add(typedResponse);
        }
        return responses;
    }

    public List<NewRightEvidenceStoredEventResponse> getNewRightEvidenceStoredEvents(
            TransactionReceipt transactionReceipt) {
        List<Contract.EventValuesWithLog> valueList =
                extractEventParametersWithLog(NEWRIGHTEVIDENCESTORED_EVENT, transactionReceipt);
        ArrayList<NewRightEvidenceStoredEventResponse> responses =
                new ArrayList<NewRightEvidenceStoredEventResponse>(valueList.size());
        for (Contract.EventValuesWithLog eventValues : valueList) {
            NewRightEvidenceStoredEventResponse typedResponse =
                    new NewRightEvidenceStoredEventResponse();
            typedResponse.log = eventValues.getLog();
            typedResponse.sender = (String) eventValues.getIndexedValues().get(0).getValue();
            typedResponse.udri = (byte[]) eventValues.getIndexedValues().get(1).getValue();
            responses.add(typedResponse);
        }
        return responses;
    }

    public List<RoleAdminChangedEventResponse> getRoleAdminChangedEvents(
            TransactionReceipt transactionReceipt) {
        List<Contract.EventValuesWithLog> valueList =
                extractEventParametersWithLog(ROLEADMINCHANGED_EVENT, transactionReceipt);
        ArrayList<RoleAdminChangedEventResponse> responses =
                new ArrayList<RoleAdminChangedEventResponse>(valueList.size());
        for (Contract.EventValuesWithLog eventValues : valueList) {
            RoleAdminChangedEventResponse typedResponse = new RoleAdminChangedEventResponse();
            typedResponse.log = eventValues.getLog();
            typedResponse.role = (byte[]) eventValues.getIndexedValues().get(0).getValue();
            typedResponse.previousAdminRole =
                    (byte[]) eventValues.getIndexedValues().get(1).getValue();
            typedResponse.newAdminRole = (byte[]) eventValues.getIndexedValues().get(2).getValue();
            responses.add(typedResponse);
        }
        return responses;
    }

    public List<RoleGrantedEventResponse> getRoleGrantedEvents(
            TransactionReceipt transactionReceipt) {
        List<Contract.EventValuesWithLog> valueList =
                extractEventParametersWithLog(ROLEGRANTED_EVENT, transactionReceipt);
        ArrayList<RoleGrantedEventResponse> responses =
                new ArrayList<RoleGrantedEventResponse>(valueList.size());
        for (Contract.EventValuesWithLog eventValues : valueList) {
            RoleGrantedEventResponse typedResponse = new RoleGrantedEventResponse();
            typedResponse.log = eventValues.getLog();
            typedResponse.role = (byte[]) eventValues.getIndexedValues().get(0).getValue();
            typedResponse.account = (String) eventValues.getIndexedValues().get(1).getValue();
            typedResponse.sender = (String) eventValues.getIndexedValues().get(2).getValue();
            responses.add(typedResponse);
        }
        return responses;
    }

    public List<RoleRevokedEventResponse> getRoleRevokedEvents(
            TransactionReceipt transactionReceipt) {
        List<Contract.EventValuesWithLog> valueList =
                extractEventParametersWithLog(ROLEREVOKED_EVENT, transactionReceipt);
        ArrayList<RoleRevokedEventResponse> responses =
                new ArrayList<RoleRevokedEventResponse>(valueList.size());
        for (Contract.EventValuesWithLog eventValues : valueList) {
            RoleRevokedEventResponse typedResponse = new RoleRevokedEventResponse();
            typedResponse.log = eventValues.getLog();
            typedResponse.role = (byte[]) eventValues.getIndexedValues().get(0).getValue();
            typedResponse.account = (String) eventValues.getIndexedValues().get(1).getValue();
            typedResponse.sender = (String) eventValues.getIndexedValues().get(2).getValue();
            responses.add(typedResponse);
        }
        return responses;
    }

    public List<UserCreatedEventResponse> getUserCreatedEvents(
            TransactionReceipt transactionReceipt) {
        List<Contract.EventValuesWithLog> valueList =
                extractEventParametersWithLog(USERCREATED_EVENT, transactionReceipt);
        ArrayList<UserCreatedEventResponse> responses =
                new ArrayList<UserCreatedEventResponse>(valueList.size());
        for (Contract.EventValuesWithLog eventValues : valueList) {
            UserCreatedEventResponse typedResponse = new UserCreatedEventResponse();
            typedResponse.log = eventValues.getLog();
            typedResponse.sender = (String) eventValues.getIndexedValues().get(0).getValue();
            typedResponse.bid = (byte[]) eventValues.getIndexedValues().get(1).getValue();
            typedResponse.usci = (byte[]) eventValues.getIndexedValues().get(2).getValue();
            responses.add(typedResponse);
        }
        return responses;
    }

    public List<UserRoleChangedEventResponse> getUserRoleChangedEvents(
            TransactionReceipt transactionReceipt) {
        List<Contract.EventValuesWithLog> valueList =
                extractEventParametersWithLog(USERROLECHANGED_EVENT, transactionReceipt);
        ArrayList<UserRoleChangedEventResponse> responses =
                new ArrayList<UserRoleChangedEventResponse>(valueList.size());
        for (Contract.EventValuesWithLog eventValues : valueList) {
            UserRoleChangedEventResponse typedResponse = new UserRoleChangedEventResponse();
            typedResponse.log = eventValues.getLog();
            typedResponse.sender = (String) eventValues.getIndexedValues().get(0).getValue();
            typedResponse.bid = (byte[]) eventValues.getIndexedValues().get(1).getValue();
            responses.add(typedResponse);
        }
        return responses;
    }

    public byte[] DEFAULT_ADMIN_ROLE() throws ContractException {
        final Function function =
                new Function(
                        FUNC_DEFAULT_ADMIN_ROLE,
                        Arrays.<Type>asList(),
                        Arrays.<TypeReference<?>>asList(new TypeReference<Bytes32>() {}));
        return executeCallWithSingleValueReturn(function, byte[].class);
    }

    public byte[] USERMANAGE_ROLE() throws ContractException {
        final Function function =
                new Function(
                        FUNC_USERMANAGE_ROLE,
                        Arrays.<Type>asList(),
                        Arrays.<TypeReference<?>>asList(new TypeReference<Bytes32>() {}));
        return executeCallWithSingleValueReturn(function, byte[].class);
    }

    public TransactionReceipt addReviewEvidence(
            String udri,
            String reviewerBid,
            List<String> reviewDataHash,
            List<String> metaData,
            List<String> variableData) {
        final Function function =
                new Function(
                        FUNC_ADDREVIEWEVIDENCE,
                        Arrays.<Type>asList(
                                new org.fisco.bcos.sdk.v3.codec.datatypes.Utf8String(udri),
                                new org.fisco.bcos.sdk.v3.codec.datatypes.Utf8String(reviewerBid),
                                new org.fisco.bcos.sdk.v3.codec.datatypes.DynamicArray<
                                        org.fisco.bcos.sdk.v3.codec.datatypes.Utf8String>(
                                        org.fisco.bcos.sdk.v3.codec.datatypes.Utf8String.class,
                                        org.fisco.bcos.sdk.v3.codec.Utils.typeMap(
                                                reviewDataHash,
                                                org.fisco.bcos.sdk.v3.codec.datatypes.Utf8String
                                                        .class)),
                                new org.fisco.bcos.sdk.v3.codec.datatypes.DynamicArray<
                                        org.fisco.bcos.sdk.v3.codec.datatypes.Utf8String>(
                                        org.fisco.bcos.sdk.v3.codec.datatypes.Utf8String.class,
                                        org.fisco.bcos.sdk.v3.codec.Utils.typeMap(
                                                metaData,
                                                org.fisco.bcos.sdk.v3.codec.datatypes.Utf8String
                                                        .class)),
                                new org.fisco.bcos.sdk.v3.codec.datatypes.DynamicArray<
                                        org.fisco.bcos.sdk.v3.codec.datatypes.Utf8String>(
                                        org.fisco.bcos.sdk.v3.codec.datatypes.Utf8String.class,
                                        org.fisco.bcos.sdk.v3.codec.Utils.typeMap(
                                                variableData,
                                                org.fisco.bcos.sdk.v3.codec.datatypes.Utf8String
                                                        .class))),
                        Collections.<TypeReference<?>>emptyList(),
                        4);
        return executeTransaction(function);
    }

    public String getSignedTransactionForAddReviewEvidence(
            String udri,
            String reviewerBid,
            List<String> reviewDataHash,
            List<String> metaData,
            List<String> variableData) {
        final Function function =
                new Function(
                        FUNC_ADDREVIEWEVIDENCE,
                        Arrays.<Type>asList(
                                new org.fisco.bcos.sdk.v3.codec.datatypes.Utf8String(udri),
                                new org.fisco.bcos.sdk.v3.codec.datatypes.Utf8String(reviewerBid),
                                new org.fisco.bcos.sdk.v3.codec.datatypes.DynamicArray<
                                        org.fisco.bcos.sdk.v3.codec.datatypes.Utf8String>(
                                        org.fisco.bcos.sdk.v3.codec.datatypes.Utf8String.class,
                                        org.fisco.bcos.sdk.v3.codec.Utils.typeMap(
                                                reviewDataHash,
                                                org.fisco.bcos.sdk.v3.codec.datatypes.Utf8String
                                                        .class)),
                                new org.fisco.bcos.sdk.v3.codec.datatypes.DynamicArray<
                                        org.fisco.bcos.sdk.v3.codec.datatypes.Utf8String>(
                                        org.fisco.bcos.sdk.v3.codec.datatypes.Utf8String.class,
                                        org.fisco.bcos.sdk.v3.codec.Utils.typeMap(
                                                metaData,
                                                org.fisco.bcos.sdk.v3.codec.datatypes.Utf8String
                                                        .class)),
                                new org.fisco.bcos.sdk.v3.codec.datatypes.DynamicArray<
                                        org.fisco.bcos.sdk.v3.codec.datatypes.Utf8String>(
                                        org.fisco.bcos.sdk.v3.codec.datatypes.Utf8String.class,
                                        org.fisco.bcos.sdk.v3.codec.Utils.typeMap(
                                                variableData,
                                                org.fisco.bcos.sdk.v3.codec.datatypes.Utf8String
                                                        .class))),
                        Collections.<TypeReference<?>>emptyList(),
                        4);
        return createSignedTransaction(function);
    }

    public String addReviewEvidence(
            String udri,
            String reviewerBid,
            List<String> reviewDataHash,
            List<String> metaData,
            List<String> variableData,
            TransactionCallback callback) {
        final Function function =
                new Function(
                        FUNC_ADDREVIEWEVIDENCE,
                        Arrays.<Type>asList(
                                new org.fisco.bcos.sdk.v3.codec.datatypes.Utf8String(udri),
                                new org.fisco.bcos.sdk.v3.codec.datatypes.Utf8String(reviewerBid),
                                new org.fisco.bcos.sdk.v3.codec.datatypes.DynamicArray<
                                        org.fisco.bcos.sdk.v3.codec.datatypes.Utf8String>(
                                        org.fisco.bcos.sdk.v3.codec.datatypes.Utf8String.class,
                                        org.fisco.bcos.sdk.v3.codec.Utils.typeMap(
                                                reviewDataHash,
                                                org.fisco.bcos.sdk.v3.codec.datatypes.Utf8String
                                                        .class)),
                                new org.fisco.bcos.sdk.v3.codec.datatypes.DynamicArray<
                                        org.fisco.bcos.sdk.v3.codec.datatypes.Utf8String>(
                                        org.fisco.bcos.sdk.v3.codec.datatypes.Utf8String.class,
                                        org.fisco.bcos.sdk.v3.codec.Utils.typeMap(
                                                metaData,
                                                org.fisco.bcos.sdk.v3.codec.datatypes.Utf8String
                                                        .class)),
                                new org.fisco.bcos.sdk.v3.codec.datatypes.DynamicArray<
                                        org.fisco.bcos.sdk.v3.codec.datatypes.Utf8String>(
                                        org.fisco.bcos.sdk.v3.codec.datatypes.Utf8String.class,
                                        org.fisco.bcos.sdk.v3.codec.Utils.typeMap(
                                                variableData,
                                                org.fisco.bcos.sdk.v3.codec.datatypes.Utf8String
                                                        .class))),
                        Collections.<TypeReference<?>>emptyList(),
                        4);
        return asyncExecuteTransaction(function, callback);
    }

    public Tuple5<String, String, List<String>, List<String>, List<String>>
            getAddReviewEvidenceInput(TransactionReceipt transactionReceipt) {
        String data = transactionReceipt.getInput().substring(10);
        final Function function =
                new Function(
                        FUNC_ADDREVIEWEVIDENCE,
                        Arrays.<Type>asList(),
                        Arrays.<TypeReference<?>>asList(
                                new TypeReference<Utf8String>() {},
                                new TypeReference<Utf8String>() {},
                                new TypeReference<DynamicArray<Utf8String>>() {},
                                new TypeReference<DynamicArray<Utf8String>>() {},
                                new TypeReference<DynamicArray<Utf8String>>() {}));
        List<Type> results =
                this.functionReturnDecoder.decode(data, function.getOutputParameters());
        return new Tuple5<String, String, List<String>, List<String>, List<String>>(
                (String) results.get(0).getValue(),
                (String) results.get(1).getValue(),
                convertToNative((List<Utf8String>) results.get(2).getValue()),
                convertToNative((List<Utf8String>) results.get(3).getValue()),
                convertToNative((List<Utf8String>) results.get(4).getValue()));
    }

    public String genReviewEid(String udri, List<String> reviewDataHash) throws ContractException {
        final Function function =
                new Function(
                        FUNC_GENREVIEWEID,
                        Arrays.<Type>asList(
                                new org.fisco.bcos.sdk.v3.codec.datatypes.Utf8String(udri),
                                new org.fisco.bcos.sdk.v3.codec.datatypes.DynamicArray<
                                        org.fisco.bcos.sdk.v3.codec.datatypes.Utf8String>(
                                        org.fisco.bcos.sdk.v3.codec.datatypes.Utf8String.class,
                                        org.fisco.bcos.sdk.v3.codec.Utils.typeMap(
                                                reviewDataHash,
                                                org.fisco.bcos.sdk.v3.codec.datatypes.Utf8String
                                                        .class))),
                        Arrays.<TypeReference<?>>asList(new TypeReference<Utf8String>() {}));
        return executeCallWithSingleValueReturn(function, String.class);
    }

    public BigInteger getReviewCount(String udri) throws ContractException {
        final Function function =
                new Function(
                        FUNC_GETREVIEWCOUNT,
                        Arrays.<Type>asList(
                                new org.fisco.bcos.sdk.v3.codec.datatypes.Utf8String(udri)),
                        Arrays.<TypeReference<?>>asList(new TypeReference<Uint256>() {}));
        return executeCallWithSingleValueReturn(function, BigInteger.class);
    }

    public BigInteger getReviewCountOfReviewer(String udri, String reviewerBid)
            throws ContractException {
        final Function function =
                new Function(
                        FUNC_GETREVIEWCOUNTOFREVIEWER,
                        Arrays.<Type>asList(
                                new org.fisco.bcos.sdk.v3.codec.datatypes.Utf8String(udri),
                                new org.fisco.bcos.sdk.v3.codec.datatypes.Utf8String(reviewerBid)),
                        Arrays.<TypeReference<?>>asList(new TypeReference<Uint256>() {}));
        return executeCallWithSingleValueReturn(function, BigInteger.class);
    }

    public Tuple4<Boolean, String, List<String>, List<String>> getReviewEvidenceViaEid(String eid)
            throws ContractException {
        final Function function =
                new Function(
                        FUNC_GETREVIEWEVIDENCEVIAEID,
                        Arrays.<Type>asList(
                                new org.fisco.bcos.sdk.v3.codec.datatypes.Utf8String(eid)),
                        Arrays.<TypeReference<?>>asList(
                                new TypeReference<Bool>() {},
                                new TypeReference<Utf8String>() {},
                                new TypeReference<DynamicArray<Utf8String>>() {},
                                new TypeReference<DynamicArray<Utf8String>>() {}));
        List<Type> results = executeCallWithMultipleValueReturn(function);
        return new Tuple4<Boolean, String, List<String>, List<String>>(
                (Boolean) results.get(0).getValue(),
                (String) results.get(1).getValue(),
                convertToNative((List<Utf8String>) results.get(2).getValue()),
                convertToNative((List<Utf8String>) results.get(3).getValue()));
    }

    public byte[] getRoleAdmin(byte[] role) throws ContractException {
        final Function function =
                new Function(
                        FUNC_GETROLEADMIN,
                        Arrays.<Type>asList(
                                new org.fisco.bcos.sdk.v3.codec.datatypes.generated.Bytes32(role)),
                        Arrays.<TypeReference<?>>asList(new TypeReference<Bytes32>() {}));
        return executeCallWithSingleValueReturn(function, byte[].class);
    }

    public Tuple4<Boolean, String, List<String>, List<String>> getVerifyEvidence(
            String udri, BigInteger index) throws ContractException {
        final Function function =
                new Function(
                        FUNC_GETVERIFYEVIDENCE,
                        Arrays.<Type>asList(
                                new org.fisco.bcos.sdk.v3.codec.datatypes.Utf8String(udri),
                                new org.fisco.bcos.sdk.v3.codec.datatypes.generated.Uint32(index)),
                        Arrays.<TypeReference<?>>asList(
                                new TypeReference<Bool>() {},
                                new TypeReference<Utf8String>() {},
                                new TypeReference<DynamicArray<Utf8String>>() {},
                                new TypeReference<DynamicArray<Utf8String>>() {}));
        List<Type> results = executeCallWithMultipleValueReturn(function);
        return new Tuple4<Boolean, String, List<String>, List<String>>(
                (Boolean) results.get(0).getValue(),
                (String) results.get(1).getValue(),
                convertToNative((List<Utf8String>) results.get(2).getValue()),
                convertToNative((List<Utf8String>) results.get(3).getValue()));
    }

    public Tuple3<Boolean, List<String>, List<String>> getVerifyEvidenceOfReviewer(
            String udri, String reviewerBid, BigInteger index) throws ContractException {
        final Function function =
                new Function(
                        FUNC_GETVERIFYEVIDENCEOFREVIEWER,
                        Arrays.<Type>asList(
                                new org.fisco.bcos.sdk.v3.codec.datatypes.Utf8String(udri),
                                new org.fisco.bcos.sdk.v3.codec.datatypes.Utf8String(reviewerBid),
                                new org.fisco.bcos.sdk.v3.codec.datatypes.generated.Uint32(index)),
                        Arrays.<TypeReference<?>>asList(
                                new TypeReference<Bool>() {},
                                new TypeReference<DynamicArray<Utf8String>>() {},
                                new TypeReference<DynamicArray<Utf8String>>() {}));
        List<Type> results = executeCallWithMultipleValueReturn(function);
        return new Tuple3<Boolean, List<String>, List<String>>(
                (Boolean) results.get(0).getValue(),
                convertToNative((List<Utf8String>) results.get(1).getValue()),
                convertToNative((List<Utf8String>) results.get(2).getValue()));
    }

    public TransactionReceipt grantRole(byte[] role, String account) {
        final Function function =
                new Function(
                        FUNC_GRANTROLE,
                        Arrays.<Type>asList(
                                new org.fisco.bcos.sdk.v3.codec.datatypes.generated.Bytes32(role),
                                new org.fisco.bcos.sdk.v3.codec.datatypes.Address(account)),
                        Collections.<TypeReference<?>>emptyList(),
                        4);
        return executeTransaction(function);
    }

    public String getSignedTransactionForGrantRole(byte[] role, String account) {
        final Function function =
                new Function(
                        FUNC_GRANTROLE,
                        Arrays.<Type>asList(
                                new org.fisco.bcos.sdk.v3.codec.datatypes.generated.Bytes32(role),
                                new org.fisco.bcos.sdk.v3.codec.datatypes.Address(account)),
                        Collections.<TypeReference<?>>emptyList(),
                        4);
        return createSignedTransaction(function);
    }

    public String grantRole(byte[] role, String account, TransactionCallback callback) {
        final Function function =
                new Function(
                        FUNC_GRANTROLE,
                        Arrays.<Type>asList(
                                new org.fisco.bcos.sdk.v3.codec.datatypes.generated.Bytes32(role),
                                new org.fisco.bcos.sdk.v3.codec.datatypes.Address(account)),
                        Collections.<TypeReference<?>>emptyList(),
                        4);
        return asyncExecuteTransaction(function, callback);
    }

    public Tuple2<byte[], String> getGrantRoleInput(TransactionReceipt transactionReceipt) {
        String data = transactionReceipt.getInput().substring(10);
        final Function function =
                new Function(
                        FUNC_GRANTROLE,
                        Arrays.<Type>asList(),
                        Arrays.<TypeReference<?>>asList(
                                new TypeReference<Bytes32>() {}, new TypeReference<Address>() {}));
        List<Type> results =
                this.functionReturnDecoder.decode(data, function.getOutputParameters());
        return new Tuple2<byte[], String>(
                (byte[]) results.get(0).getValue(), (String) results.get(1).getValue());
    }

    public TransactionReceipt grantUserManagePermission(String bid, String user) {
        final Function function =
                new Function(
                        FUNC_GRANTUSERMANAGEPERMISSION,
                        Arrays.<Type>asList(
                                new org.fisco.bcos.sdk.v3.codec.datatypes.Utf8String(bid),
                                new org.fisco.bcos.sdk.v3.codec.datatypes.Address(user)),
                        Collections.<TypeReference<?>>emptyList(),
                        0);
        return executeTransaction(function);
    }

    public String getSignedTransactionForGrantUserManagePermission(String bid, String user) {
        final Function function =
                new Function(
                        FUNC_GRANTUSERMANAGEPERMISSION,
                        Arrays.<Type>asList(
                                new org.fisco.bcos.sdk.v3.codec.datatypes.Utf8String(bid),
                                new org.fisco.bcos.sdk.v3.codec.datatypes.Address(user)),
                        Collections.<TypeReference<?>>emptyList(),
                        0);
        return createSignedTransaction(function);
    }

    public String grantUserManagePermission(String bid, String user, TransactionCallback callback) {
        final Function function =
                new Function(
                        FUNC_GRANTUSERMANAGEPERMISSION,
                        Arrays.<Type>asList(
                                new org.fisco.bcos.sdk.v3.codec.datatypes.Utf8String(bid),
                                new org.fisco.bcos.sdk.v3.codec.datatypes.Address(user)),
                        Collections.<TypeReference<?>>emptyList(),
                        0);
        return asyncExecuteTransaction(function, callback);
    }

    public Tuple2<String, String> getGrantUserManagePermissionInput(
            TransactionReceipt transactionReceipt) {
        String data = transactionReceipt.getInput().substring(10);
        final Function function =
                new Function(
                        FUNC_GRANTUSERMANAGEPERMISSION,
                        Arrays.<Type>asList(),
                        Arrays.<TypeReference<?>>asList(
                                new TypeReference<Utf8String>() {},
                                new TypeReference<Address>() {}));
        List<Type> results =
                this.functionReturnDecoder.decode(data, function.getOutputParameters());
        return new Tuple2<String, String>(
                (String) results.get(0).getValue(), (String) results.get(1).getValue());
    }

    public Boolean hasRole(byte[] role, String account) throws ContractException {
        final Function function =
                new Function(
                        FUNC_HASROLE,
                        Arrays.<Type>asList(
                                new org.fisco.bcos.sdk.v3.codec.datatypes.generated.Bytes32(role),
                                new org.fisco.bcos.sdk.v3.codec.datatypes.Address(account)),
                        Arrays.<TypeReference<?>>asList(new TypeReference<Bool>() {}));
        return executeCallWithSingleValueReturn(function, Boolean.class);
    }

    public Boolean hasUserManageRole(String bid) throws ContractException {
        final Function function =
                new Function(
                        FUNC_HASUSERMANAGEROLE,
                        Arrays.<Type>asList(
                                new org.fisco.bcos.sdk.v3.codec.datatypes.Utf8String(bid)),
                        Arrays.<TypeReference<?>>asList(new TypeReference<Bool>() {}));
        return executeCallWithSingleValueReturn(function, Boolean.class);
    }

    public TransactionReceipt renounceRole(byte[] role, String account) {
        final Function function =
                new Function(
                        FUNC_RENOUNCEROLE,
                        Arrays.<Type>asList(
                                new org.fisco.bcos.sdk.v3.codec.datatypes.generated.Bytes32(role),
                                new org.fisco.bcos.sdk.v3.codec.datatypes.Address(account)),
                        Collections.<TypeReference<?>>emptyList(),
                        0);
        return executeTransaction(function);
    }

    public String getSignedTransactionForRenounceRole(byte[] role, String account) {
        final Function function =
                new Function(
                        FUNC_RENOUNCEROLE,
                        Arrays.<Type>asList(
                                new org.fisco.bcos.sdk.v3.codec.datatypes.generated.Bytes32(role),
                                new org.fisco.bcos.sdk.v3.codec.datatypes.Address(account)),
                        Collections.<TypeReference<?>>emptyList(),
                        0);
        return createSignedTransaction(function);
    }

    public String renounceRole(byte[] role, String account, TransactionCallback callback) {
        final Function function =
                new Function(
                        FUNC_RENOUNCEROLE,
                        Arrays.<Type>asList(
                                new org.fisco.bcos.sdk.v3.codec.datatypes.generated.Bytes32(role),
                                new org.fisco.bcos.sdk.v3.codec.datatypes.Address(account)),
                        Collections.<TypeReference<?>>emptyList(),
                        0);
        return asyncExecuteTransaction(function, callback);
    }

    public Tuple2<byte[], String> getRenounceRoleInput(TransactionReceipt transactionReceipt) {
        String data = transactionReceipt.getInput().substring(10);
        final Function function =
                new Function(
                        FUNC_RENOUNCEROLE,
                        Arrays.<Type>asList(),
                        Arrays.<TypeReference<?>>asList(
                                new TypeReference<Bytes32>() {}, new TypeReference<Address>() {}));
        List<Type> results =
                this.functionReturnDecoder.decode(data, function.getOutputParameters());
        return new Tuple2<byte[], String>(
                (byte[]) results.get(0).getValue(), (String) results.get(1).getValue());
    }

    public TransactionReceipt revokeRole(byte[] role, String account) {
        final Function function =
                new Function(
                        FUNC_REVOKEROLE,
                        Arrays.<Type>asList(
                                new org.fisco.bcos.sdk.v3.codec.datatypes.generated.Bytes32(role),
                                new org.fisco.bcos.sdk.v3.codec.datatypes.Address(account)),
                        Collections.<TypeReference<?>>emptyList(),
                        4);
        return executeTransaction(function);
    }

    public String getSignedTransactionForRevokeRole(byte[] role, String account) {
        final Function function =
                new Function(
                        FUNC_REVOKEROLE,
                        Arrays.<Type>asList(
                                new org.fisco.bcos.sdk.v3.codec.datatypes.generated.Bytes32(role),
                                new org.fisco.bcos.sdk.v3.codec.datatypes.Address(account)),
                        Collections.<TypeReference<?>>emptyList(),
                        4);
        return createSignedTransaction(function);
    }

    public String revokeRole(byte[] role, String account, TransactionCallback callback) {
        final Function function =
                new Function(
                        FUNC_REVOKEROLE,
                        Arrays.<Type>asList(
                                new org.fisco.bcos.sdk.v3.codec.datatypes.generated.Bytes32(role),
                                new org.fisco.bcos.sdk.v3.codec.datatypes.Address(account)),
                        Collections.<TypeReference<?>>emptyList(),
                        4);
        return asyncExecuteTransaction(function, callback);
    }

    public Tuple2<byte[], String> getRevokeRoleInput(TransactionReceipt transactionReceipt) {
        String data = transactionReceipt.getInput().substring(10);
        final Function function =
                new Function(
                        FUNC_REVOKEROLE,
                        Arrays.<Type>asList(),
                        Arrays.<TypeReference<?>>asList(
                                new TypeReference<Bytes32>() {}, new TypeReference<Address>() {}));
        List<Type> results =
                this.functionReturnDecoder.decode(data, function.getOutputParameters());
        return new Tuple2<byte[], String>(
                (byte[]) results.get(0).getValue(), (String) results.get(1).getValue());
    }

    public TransactionReceipt revokeUserManagePermission(String bid) {
        final Function function =
                new Function(
                        FUNC_REVOKEUSERMANAGEPERMISSION,
                        Arrays.<Type>asList(
                                new org.fisco.bcos.sdk.v3.codec.datatypes.Utf8String(bid)),
                        Collections.<TypeReference<?>>emptyList(),
                        0);
        return executeTransaction(function);
    }

    public String getSignedTransactionForRevokeUserManagePermission(String bid) {
        final Function function =
                new Function(
                        FUNC_REVOKEUSERMANAGEPERMISSION,
                        Arrays.<Type>asList(
                                new org.fisco.bcos.sdk.v3.codec.datatypes.Utf8String(bid)),
                        Collections.<TypeReference<?>>emptyList(),
                        0);
        return createSignedTransaction(function);
    }

    public String revokeUserManagePermission(String bid, TransactionCallback callback) {
        final Function function =
                new Function(
                        FUNC_REVOKEUSERMANAGEPERMISSION,
                        Arrays.<Type>asList(
                                new org.fisco.bcos.sdk.v3.codec.datatypes.Utf8String(bid)),
                        Collections.<TypeReference<?>>emptyList(),
                        0);
        return asyncExecuteTransaction(function, callback);
    }

    public Tuple1<String> getRevokeUserManagePermissionInput(
            TransactionReceipt transactionReceipt) {
        String data = transactionReceipt.getInput().substring(10);
        final Function function =
                new Function(
                        FUNC_REVOKEUSERMANAGEPERMISSION,
                        Arrays.<Type>asList(),
                        Arrays.<TypeReference<?>>asList(new TypeReference<Utf8String>() {}));
        List<Type> results =
                this.functionReturnDecoder.decode(data, function.getOutputParameters());
        return new Tuple1<String>((String) results.get(0).getValue());
    }

    public Boolean supportsInterface(byte[] interfaceId) throws ContractException {
        final Function function =
                new Function(
                        FUNC_SUPPORTSINTERFACE,
                        Arrays.<Type>asList(
                                new org.fisco.bcos.sdk.v3.codec.datatypes.generated.Bytes4(
                                        interfaceId)),
                        Arrays.<TypeReference<?>>asList(new TypeReference<Bool>() {}));
        return executeCallWithSingleValueReturn(function, Boolean.class);
    }

    public TransactionReceipt withdrawReviewEvidence(String udri, String reviewerBid) {
        final Function function =
                new Function(
                        FUNC_WITHDRAWREVIEWEVIDENCE,
                        Arrays.<Type>asList(
                                new org.fisco.bcos.sdk.v3.codec.datatypes.Utf8String(udri),
                                new org.fisco.bcos.sdk.v3.codec.datatypes.Utf8String(reviewerBid)),
                        Collections.<TypeReference<?>>emptyList(),
                        0);
        return executeTransaction(function);
    }

    public String getSignedTransactionForWithdrawReviewEvidence(String udri, String reviewerBid) {
        final Function function =
                new Function(
                        FUNC_WITHDRAWREVIEWEVIDENCE,
                        Arrays.<Type>asList(
                                new org.fisco.bcos.sdk.v3.codec.datatypes.Utf8String(udri),
                                new org.fisco.bcos.sdk.v3.codec.datatypes.Utf8String(reviewerBid)),
                        Collections.<TypeReference<?>>emptyList(),
                        0);
        return createSignedTransaction(function);
    }

    public String withdrawReviewEvidence(
            String udri, String reviewerBid, TransactionCallback callback) {
        final Function function =
                new Function(
                        FUNC_WITHDRAWREVIEWEVIDENCE,
                        Arrays.<Type>asList(
                                new org.fisco.bcos.sdk.v3.codec.datatypes.Utf8String(udri),
                                new org.fisco.bcos.sdk.v3.codec.datatypes.Utf8String(reviewerBid)),
                        Collections.<TypeReference<?>>emptyList(),
                        0);
        return asyncExecuteTransaction(function, callback);
    }

    public Tuple2<String, String> getWithdrawReviewEvidenceInput(
            TransactionReceipt transactionReceipt) {
        String data = transactionReceipt.getInput().substring(10);
        final Function function =
                new Function(
                        FUNC_WITHDRAWREVIEWEVIDENCE,
                        Arrays.<Type>asList(),
                        Arrays.<TypeReference<?>>asList(
                                new TypeReference<Utf8String>() {},
                                new TypeReference<Utf8String>() {}));
        List<Type> results =
                this.functionReturnDecoder.decode(data, function.getOutputParameters());
        return new Tuple2<String, String>(
                (String) results.get(0).getValue(), (String) results.get(1).getValue());
    }

    public static DREvidenceReviewController load(
            String contractAddress, Client client, CryptoKeyPair credential) {
        return new DREvidenceReviewController(contractAddress, client, credential);
    }

    public static DREvidenceReviewController deploy(Client client, CryptoKeyPair credential)
            throws ContractException {
        return deploy(
                DREvidenceReviewController.class,
                client,
                credential,
                getBinary(client.getCryptoSuite()),
                getABI(),
                null,
                null);
    }

    public static class InitializedEventResponse {
        public TransactionReceipt.Logs log;

        public BigInteger version;
    }

    public static class NewReviewEvidenceStoredEventResponse {
        public TransactionReceipt.Logs log;

        public String sender;

        public byte[] udri;

        public BigInteger index;
    }

    public static class NewRightEvidenceStoredEventResponse {
        public TransactionReceipt.Logs log;

        public String sender;

        public byte[] udri;
    }

    public static class RoleAdminChangedEventResponse {
        public TransactionReceipt.Logs log;

        public byte[] role;

        public byte[] previousAdminRole;

        public byte[] newAdminRole;
    }

    public static class RoleGrantedEventResponse {
        public TransactionReceipt.Logs log;

        public byte[] role;

        public String account;

        public String sender;
    }

    public static class RoleRevokedEventResponse {
        public TransactionReceipt.Logs log;

        public byte[] role;

        public String account;

        public String sender;
    }

    public static class UserCreatedEventResponse {
        public TransactionReceipt.Logs log;

        public String sender;

        public byte[] bid;

        public byte[] usci;
    }

    public static class UserRoleChangedEventResponse {
        public TransactionReceipt.Logs log;

        public String sender;

        public byte[] bid;
    }
}
