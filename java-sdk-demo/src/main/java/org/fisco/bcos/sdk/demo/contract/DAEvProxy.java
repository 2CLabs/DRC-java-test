package org.fisco.bcos.sdk.demo.contract;

import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;
import org.fisco.bcos.sdk.v3.client.Client;
import org.fisco.bcos.sdk.v3.codec.abi.FunctionEncoder;
import org.fisco.bcos.sdk.v3.codec.datatypes.Address;
import org.fisco.bcos.sdk.v3.codec.datatypes.Event;
import org.fisco.bcos.sdk.v3.codec.datatypes.Type;
import org.fisco.bcos.sdk.v3.codec.datatypes.TypeReference;
import org.fisco.bcos.sdk.v3.contract.Contract;
import org.fisco.bcos.sdk.v3.crypto.CryptoSuite;
import org.fisco.bcos.sdk.v3.crypto.keypair.CryptoKeyPair;
import org.fisco.bcos.sdk.v3.model.CryptoType;
import org.fisco.bcos.sdk.v3.model.TransactionReceipt;
import org.fisco.bcos.sdk.v3.transaction.model.exception.ContractException;

@SuppressWarnings("unchecked")
public class DAEvProxy extends Contract {
    public static final String[] BINARY_ARRAY = {
        "60806040523480156200001157600080fd5b5060405162000fe938038062000fe98339810160408190526200003491620004b1565b8282828281620000478282600062000061565b50620000559050826200009e565b505050505050620005e4565b6200006c83620000f9565b6000825111806200007a5750805b1562000099576200009783836200013b60201b6200007e1760201c565b505b505050565b7f7e644d79422f17c01e4894b5f4f588d331ebfa28653d42ae832dc59e38c9798f620000c96200016a565b604080516001600160a01b03928316815291841660208301520160405180910390a1620000f681620001a3565b50565b620001048162000258565b6040516001600160a01b038216907fbc7cd75a20ee27fd9adebab32041f755214dbc6bffa90cc0225b39da2e5c2d3b90600090a250565b606062000163838360405180606001604052806027815260200162000fc2602791396200030c565b9392505050565b60006200019460008051602062000fa283398151915260001b6200038b60201b620000aa1760201c565b546001600160a01b0316919050565b6001600160a01b0381166200020e5760405162461bcd60e51b815260206004820152602660248201527f455243313936373a206e65772061646d696e20697320746865207a65726f206160448201526564647265737360d01b60648201526084015b60405180910390fd5b806200023760008051602062000fa283398151915260001b6200038b60201b620000aa1760201c565b80546001600160a01b0319166001600160a01b039290921691909117905550565b6200026e816200038e60201b620000ad1760201c565b620002d25760405162461bcd60e51b815260206004820152602d60248201527f455243313936373a206e657720696d706c656d656e746174696f6e206973206e60448201526c1bdd08184818dbdb9d1c9858dd609a1b606482015260840162000205565b80620002377f360894a13ba1a3210667c828492db98dca3e2076cc3735a920a3ca505d382bbc60001b6200038b60201b620000aa1760201c565b6060600080856001600160a01b0316856040516200032b919062000591565b600060405180830381855af49150503d806000811462000368576040519150601f19603f3d011682016040523d82523d6000602084013e6200036d565b606091505b50909250905062000381868383876200039d565b9695505050505050565b90565b6001600160a01b03163b151590565b606083156200040e57825162000406576001600160a01b0385163b620004065760405162461bcd60e51b815260206004820152601d60248201527f416464726573733a2063616c6c20746f206e6f6e2d636f6e7472616374000000604482015260640162000205565b50816200041a565b6200041a838362000422565b949350505050565b815115620004335781518083602001fd5b8060405162461bcd60e51b8152600401620002059190620005af565b80516001600160a01b03811681146200046757600080fd5b919050565b634e487b7160e01b600052604160045260246000fd5b60005b838110156200049f57818101518382015260200162000485565b83811115620000975750506000910152565b600080600060608486031215620004c757600080fd5b620004d2846200044f565b9250620004e2602085016200044f565b60408501519092506001600160401b03808211156200050057600080fd5b818601915086601f8301126200051557600080fd5b8151818111156200052a576200052a6200046c565b604051601f8201601f19908116603f011681019083821181831017156200055557620005556200046c565b816040528281528960208487010111156200056f57600080fd5b6200058283602083016020880162000482565b80955050505050509250925092565b60008251620005a581846020870162000482565b9190910192915050565b6020815260008251806020840152620005d081604085016020870162000482565b601f01601f19169190910160400192915050565b6109ae80620005f46000396000f3fe60806040523661001357610011610017565b005b6100115b61001f6100bc565b6001600160a01b0316336001600160a01b031614156100745760606001600160e01b03196000351663215c7ded60e01b8114156100685761005e6100ea565b9150815160208301f35b610070610154565b5050565b61007c610154565b565b60606100a38383604051806060016040528060278152602001610952602791396102b4565b9392505050565b90565b6001600160a01b03163b151590565b7fb53127684a568b3173ae13b9f8a6016e243e63b6e8ee1178d6a717850b5d6103546001600160a01b031690565b60606000806100fc366004818461075b565b81019061010991906107a1565b6001600160e01b03199190911660009081526020818152604080832080546001600160a01b0319166001600160a01b0390951694909417909355825190810190925281529392505050565b61015c6100bc565b6001600160a01b0316336001600160a01b031614156102ac5760606001600160e01b031960003516631b2ce7f360e11b8114156101a25761019b61032c565b91506102a4565b6001600160e01b0319811663278f794360e11b14156101c35761019b610383565b6001600160e01b031981166308f2839760e41b14156101e45761019b6103c9565b6001600160e01b031981166303e1469160e61b14156102055761019b6103fa565b6001600160e01b03198116635c60da1b60e01b14156102265761019b61043a565b60405162461bcd60e51b815260206004820152604260248201527f5472616e73706172656e745570677261646561626c6550726f78793a2061646d60448201527f696e2063616e6e6f742066616c6c6261636b20746f2070726f78792074617267606482015261195d60f21b608482015260a4015b60405180910390fd5b815160208301f35b61007c61044e565b6060600080856001600160a01b0316856040516102d1919061080f565b600060405180830381855af49150503d806000811461030c576040519150601f19603f3d011682016040523d82523d6000602084013e610311565b606091505b50915091506103228683838761045e565b9695505050505050565b60606103366104dc565b6000610345366004818461075b565b810190610352919061082b565b905061036f816040518060200160405280600081525060006104e7565b505060408051602081019091526000815290565b6060600080610395366004818461075b565b8101906103a2919061085c565b915091506103b2828260016104e7565b604051806020016040528060008152509250505090565b60606103d36104dc565b60006103e2366004818461075b565b8101906103ef919061082b565b905061036f81610513565b60606104046104dc565b600061040e6100bc565b604080516001600160a01b03831660208201529192500160405160208183030381529060405291505090565b60606104446104dc565b600061040e61056a565b61007c61045961056a565b610590565b606083156104ca5782516104c3576001600160a01b0385163b6104c35760405162461bcd60e51b815260206004820152601d60248201527f416464726573733a2063616c6c20746f206e6f6e2d636f6e7472616374000000604482015260640161029b565b50816104d4565b6104d483836105b4565b949350505050565b341561007c57600080fd5b6104f0836105de565b6000825111806104fd5750805b1561050e5761050c838361007e565b505b505050565b7f7e644d79422f17c01e4894b5f4f588d331ebfa28653d42ae832dc59e38c9798f61053c6100bc565b604080516001600160a01b03928316815291841660208301520160405180910390a16105678161061e565b50565b600080356001600160e01b0319168152602081905260409020546001600160a01b031690565b3660008037600080366000845af43d6000803e8080156105af573d6000f35b3d6000fd5b8151156105c45781518083602001fd5b8060405162461bcd60e51b815260040161029b919061091e565b6105e7816106c7565b6040516001600160a01b038216907fbc7cd75a20ee27fd9adebab32041f755214dbc6bffa90cc0225b39da2e5c2d3b90600090a250565b6001600160a01b0381166106835760405162461bcd60e51b815260206004820152602660248201527f455243313936373a206e65772061646d696e20697320746865207a65726f206160448201526564647265737360d01b606482015260840161029b565b807fb53127684a568b3173ae13b9f8a6016e243e63b6e8ee1178d6a717850b5d61035b80546001600160a01b0319166001600160a01b039290921691909117905550565b6001600160a01b0381163b6107345760405162461bcd60e51b815260206004820152602d60248201527f455243313936373a206e657720696d706c656d656e746174696f6e206973206e60448201526c1bdd08184818dbdb9d1c9858dd609a1b606482015260840161029b565b807f360894a13ba1a3210667c828492db98dca3e2076cc3735a920a3ca505d382bbc6106a6565b6000808585111561076b57600080fd5b8386111561077857600080fd5b5050820193919092039150565b80356001600160a01b038116811461079c57600080fd5b919050565b600080604083850312156107b457600080fd5b82356001600160e01b0319811681146107cc57600080fd5b91506107da60208401610785565b90509250929050565b60005b838110156107fe5781810151838201526020016107e6565b8381111561050c5750506000910152565b600082516108218184602087016107e3565b9190910192915050565b60006020828403121561083d57600080fd5b6100a382610785565b634e487b7160e01b600052604160045260246000fd5b6000806040838503121561086f57600080fd5b61087883610785565b9150602083013567ffffffffffffffff8082111561089557600080fd5b818501915085601f8301126108a957600080fd5b8135818111156108bb576108bb610846565b604051601f8201601f19908116603f011681019083821181831017156108e3576108e3610846565b816040528281528860208487010111156108fc57600080fd5b8260208601602083013760006020848301015280955050505050509250929050565b602081526000825180602084015261093d8160408501602087016107e3565b601f01601f1916919091016040019291505056fe416464726573733a206c6f772d6c6576656c2064656c65676174652063616c6c206661696c6564a26469706673582212200661cfbf760b74f3748806ab250338a631421230573a4a27051978f57e3b71b264736f6c634300080b0033b53127684a568b3173ae13b9f8a6016e243e63b6e8ee1178d6a717850b5d6103416464726573733a206c6f772d6c6576656c2064656c65676174652063616c6c206661696c6564"
    };

    public static final String BINARY =
            org.fisco.bcos.sdk.v3.utils.StringUtils.joinAll("", BINARY_ARRAY);

    public static final String[] SM_BINARY_ARRAY = {
        ""
    };

    public static final String SM_BINARY =
            org.fisco.bcos.sdk.v3.utils.StringUtils.joinAll("", SM_BINARY_ARRAY);

    public static final String[] ABI_ARRAY = {
        "[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_logic\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"admin_\",\"type\":\"address\"},{\"internalType\":\"bytes\",\"name\":\"_data\",\"type\":\"bytes\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"previousAdmin\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"newAdmin\",\"type\":\"address\"}],\"name\":\"AdminChanged\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"beacon\",\"type\":\"address\"}],\"name\":\"BeaconUpgraded\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"implementation\",\"type\":\"address\"}],\"name\":\"Upgraded\",\"type\":\"event\"},{\"stateMutability\":\"payable\",\"type\":\"fallback\"},{\"stateMutability\":\"payable\",\"type\":\"receive\"}]"
    };

    public static final String ABI = org.fisco.bcos.sdk.v3.utils.StringUtils.joinAll("", ABI_ARRAY);

    public static final Event ADMINCHANGED_EVENT =
            new Event(
                    "AdminChanged",
                    Arrays.<TypeReference<?>>asList(
                            new TypeReference<Address>() {}, new TypeReference<Address>() {}));;

    public static final Event BEACONUPGRADED_EVENT =
            new Event(
                    "BeaconUpgraded",
                    Arrays.<TypeReference<?>>asList(new TypeReference<Address>(true) {}));;

    public static final Event UPGRADED_EVENT =
            new Event(
                    "Upgraded",
                    Arrays.<TypeReference<?>>asList(new TypeReference<Address>(true) {}));;

    protected DAEvProxy(String contractAddress, Client client, CryptoKeyPair credential) {
        super(getBinary(client.getCryptoSuite()), contractAddress, client, credential);
    }

    public static String getBinary(CryptoSuite cryptoSuite) {
        return (cryptoSuite.getCryptoTypeConfig() == CryptoType.ECDSA_TYPE ? BINARY : SM_BINARY);
    }

    public static String getABI() {
        return ABI;
    }

    public List<AdminChangedEventResponse> getAdminChangedEvents(
            TransactionReceipt transactionReceipt) {
        List<Contract.EventValuesWithLog> valueList =
                extractEventParametersWithLog(ADMINCHANGED_EVENT, transactionReceipt);
        ArrayList<AdminChangedEventResponse> responses =
                new ArrayList<AdminChangedEventResponse>(valueList.size());
        for (Contract.EventValuesWithLog eventValues : valueList) {
            AdminChangedEventResponse typedResponse = new AdminChangedEventResponse();
            typedResponse.log = eventValues.getLog();
            typedResponse.previousAdmin =
                    (String) eventValues.getNonIndexedValues().get(0).getValue();
            typedResponse.newAdmin = (String) eventValues.getNonIndexedValues().get(1).getValue();
            responses.add(typedResponse);
        }
        return responses;
    }

    public List<BeaconUpgradedEventResponse> getBeaconUpgradedEvents(
            TransactionReceipt transactionReceipt) {
        List<Contract.EventValuesWithLog> valueList =
                extractEventParametersWithLog(BEACONUPGRADED_EVENT, transactionReceipt);
        ArrayList<BeaconUpgradedEventResponse> responses =
                new ArrayList<BeaconUpgradedEventResponse>(valueList.size());
        for (Contract.EventValuesWithLog eventValues : valueList) {
            BeaconUpgradedEventResponse typedResponse = new BeaconUpgradedEventResponse();
            typedResponse.log = eventValues.getLog();
            typedResponse.beacon = (String) eventValues.getIndexedValues().get(0).getValue();
            responses.add(typedResponse);
        }
        return responses;
    }

    public List<UpgradedEventResponse> getUpgradedEvents(TransactionReceipt transactionReceipt) {
        List<Contract.EventValuesWithLog> valueList =
                extractEventParametersWithLog(UPGRADED_EVENT, transactionReceipt);
        ArrayList<UpgradedEventResponse> responses =
                new ArrayList<UpgradedEventResponse>(valueList.size());
        for (Contract.EventValuesWithLog eventValues : valueList) {
            UpgradedEventResponse typedResponse = new UpgradedEventResponse();
            typedResponse.log = eventValues.getLog();
            typedResponse.implementation =
                    (String) eventValues.getIndexedValues().get(0).getValue();
            responses.add(typedResponse);
        }
        return responses;
    }

    public static DAEvProxy load(String contractAddress, Client client, CryptoKeyPair credential) {
        return new DAEvProxy(contractAddress, client, credential);
    }

    public static DAEvProxy deploy(
            Client client, CryptoKeyPair credential, String _logic, String admin_, byte[] _data)
            throws ContractException {
        byte[] encodedConstructor =
                FunctionEncoder.encodeConstructor(
                        Arrays.<Type>asList(
                                new org.fisco.bcos.sdk.v3.codec.datatypes.Address(_logic),
                                new org.fisco.bcos.sdk.v3.codec.datatypes.Address(admin_),
                                new org.fisco.bcos.sdk.v3.codec.datatypes.DynamicBytes(_data)));
        return deploy(
                DAEvProxy.class,
                client,
                credential,
                getBinary(client.getCryptoSuite()),
                getABI(),
                encodedConstructor,
                null);
    }

    public static class AdminChangedEventResponse {
        public TransactionReceipt.Logs log;

        public String previousAdmin;

        public String newAdmin;
    }

    public static class BeaconUpgradedEventResponse {
        public TransactionReceipt.Logs log;

        public String beacon;
    }

    public static class UpgradedEventResponse {
        public TransactionReceipt.Logs log;

        public String implementation;
    }
}
