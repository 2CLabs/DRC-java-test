package org.fisco.bcos.sdk.demo.contract;

import java.math.BigInteger;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.Collections;
import java.util.List;
import org.fisco.bcos.sdk.v3.client.Client;
import org.fisco.bcos.sdk.v3.codec.datatypes.Address;
import org.fisco.bcos.sdk.v3.codec.datatypes.Bool;
import org.fisco.bcos.sdk.v3.codec.datatypes.DynamicArray;
import org.fisco.bcos.sdk.v3.codec.datatypes.Event;
import org.fisco.bcos.sdk.v3.codec.datatypes.Function;
import org.fisco.bcos.sdk.v3.codec.datatypes.Type;
import org.fisco.bcos.sdk.v3.codec.datatypes.TypeReference;
import org.fisco.bcos.sdk.v3.codec.datatypes.Utf8String;
import org.fisco.bcos.sdk.v3.codec.datatypes.generated.Bytes32;
import org.fisco.bcos.sdk.v3.codec.datatypes.generated.Uint32;
import org.fisco.bcos.sdk.v3.codec.datatypes.generated.Uint8;
import org.fisco.bcos.sdk.v3.codec.datatypes.generated.tuples.generated.Tuple1;
import org.fisco.bcos.sdk.v3.codec.datatypes.generated.tuples.generated.Tuple2;
import org.fisco.bcos.sdk.v3.contract.Contract;
import org.fisco.bcos.sdk.v3.crypto.CryptoSuite;
import org.fisco.bcos.sdk.v3.crypto.keypair.CryptoKeyPair;
import org.fisco.bcos.sdk.v3.model.CryptoType;
import org.fisco.bcos.sdk.v3.model.TransactionReceipt;
import org.fisco.bcos.sdk.v3.model.callback.TransactionCallback;
import org.fisco.bcos.sdk.v3.transaction.model.exception.ContractException;

@SuppressWarnings("unchecked")
public class DAEvidenceAdminController extends Contract {
    public static final String[] BINARY_ARRAY = {
        "",
        "47a839171b9190a45050565b60006110356040518060400160405280602081526020017f3a7661726961626c655f646174613a737570706f727465645f66696c6564733d8152508461131f90919063ffffffff16565b80516020820120909150600061104e600487018361123b565b905060005b81518163ffffffff1610156110ef5760006110a1604051806040016040528060128152602001717661726961626c655f646174613a6b65793d60701b8152508861131f90919063ffffffff16565b905060006110c0848463ffffffff1681518110610ba957610ba9611bcc565b805160209091012090506110d960068a01826000610ed2565b50505080806110e790611bf8565b915050611053565b5060005b84518163ffffffff16101561118f576000611141604051806040016040528060128152602001717661726961626c655f646174613a6b65793d60701b8152508861131f90919063ffffffff16565b90506000611160878463ffffffff1681518110610ba957610ba9611bcc565b8051602090910120905061117960068a01826001610ed2565b505050808061118790611bf8565b9150506110f3565b5061119e60048701838661134b565b50505050505050565b6105b58282610efe565b600082815260208481526040822083516111cd9285019061167d565b506001949350505050565b6040805180820190915260148152733230ba30afb934b3b43a2fb1b0ba32b3b7b93c9d60611b60209091015260607fb67aaf8c3d37a20d791807426a86a6bbc7b112706f57e87aecb8da9536957594611234600484018261123b565b9392505050565b600081815260208381526040808320805482518185028101850190935280835260609492939192909184015b8282101561131357838290600052602060002001805461128690611c1c565b80601f01602080910402602001604051908101604052809291908181526020018280546112b290611c1c565b80156112ff5780601f106112d4576101008083540402835291602001916112ff565b820191906000526020600020905b8154815290600101906020018083116112e257829003601f168201915b505050505081526020019060010190611267565b50505050905092915050565b60608282604051602001611334929190611c57565b604051602081830303815290604052905092915050565b600082815260208481526040822083516111cd92850190611701565b600081815260208390526040902080546060919061138490611c1c565b80601f01602080910402602001604051908101604052809291908181526020018280546113b090611c1c565b80156113fd5780601f106113d2576101008083540402835291602001916113fd565b820191906000526020600020905b8154815290600101906020018083116113e057829003601f168201915b5050505050905092915050565b606060006114566040518060400160405280602081526020017f3a7661726961626c655f646174613a737570706f727465645f66696c6564733d8152508461131f90919063ffffffff16565b8051602082012090915061146d600486018261123b565b95945050505050565b6114808282610ab3565b6105b55761148d816114cf565b6114988360206114e1565b6040516020016114a9929190611c86565b60408051601f198184030181529082905262461bcd60e51b82526105a291600401611b9d565b60606103fb6001600160a01b03831660145b606060006114f0836002611cfb565b6114fb906002611d1a565b67ffffffffffffffff81111561151357611513611872565b6040519080825280601f01601f19166020018201604052801561153d576020820181803683370190505b509050600360fc1b8160008151811061155857611558611bcc565b60200101906001600160f81b031916908160001a905350600f60fb1b8160018151811061158757611587611bcc565b60200101906001600160f81b031916908160001a90535060006115ab846002611cfb565b6115b6906001611d1a565b90505b600181111561162e576f181899199a1a9b1b9c1cb0b131b232b360811b85600f16601081106115ea576115ea611bcc565b1a60f81b82828151811061160057611600611bcc565b60200101906001600160f81b031916908160001a90535060049490941c9361162781611d32565b90506115b9565b5083156112345760405162461bcd60e51b815260206004820181905260248201527f537472696e67733a20686578206c656e67746820696e73756666696369656e7460448201526064016105a2565b82805461168990611c1c565b90600052602060002090601f0160209004810192826116ab57600085556116f1565b82601f106116c457805160ff19168380011785556116f1565b828001600101855582156116f1579182015b828111156116f15782518255916020019190600101906116d6565b506116fd92915061175a565b5090565b82805482825590600052602060002090810192821561174e579160200282015b8281111561174e578251805161173e91849160209091019061167d565b5091602001919060010190611721565b506116fd92915061176f565b5b808211156116fd576000815560010161175b565b808211156116fd576000611783828261178c565b5060010161176f565b50805461179890611c1c565b6000825580601f106117a8575050565b601f016020900490600052602060002090810190610a9f919061175a565b6000602082840312156117d857600080fd5b81356001600160e01b03198116811461123457600080fd5b60006020828403121561180257600080fd5b813563ffffffff8116811461123457600080fd5b60006020828403121561182857600080fd5b5035919050565b80356001600160a01b038116811461074957600080fd5b6000806040838503121561185957600080fd5b823591506118696020840161182f565b90509250929050565b634e487b7160e01b600052604160045260246000fd5b604051601f8201601f1916810167ffffffffffffffff811182821017156118b1576118b1611872565b604052919050565b600082601f8301126118ca57600080fd5b813567ffffffffffffffff8111156118e4576118e4611872565b6118f7601f8201601f1916602001611888565b81815284602083860101111561190c57600080fd5b816020850160208301376000918101602001919091529392505050565b60006020828403121561193b57600080fd5b813567ffffffffffffffff81111561195257600080fd5b61195e848285016118b9565b949350505050565b6000806040838503121561197957600080fd5b823567ffffffffffffffff81111561199057600080fd5b61199c858286016118b9565b9250506118696020840161182f565b600082601f8301126119bc57600080fd5b8135602067ffffffffffffffff808311156119d9576119d9611872565b8260051b6119e8838201611888565b9384528581018301938381019088861115611a0257600080fd5b84880192505b85831015611a3e57823584811115611a205760008081fd5b611a2e8a87838c01016118b9565b8352509184019190840190611a08565b98975050505050505050565b60008060408385031215611a5d57600080fd5b823567ffffffffffffffff80821115611a7557600080fd5b611a81868387016118b9565b93506020850135915080821115611a9757600080fd5b50611aa4858286016119ab565b9150509250929050565b60005b83811015611ac9578181015183820152602001611ab1565b838111156104635750506000910152565b60008151808452611af2816020860160208601611aae565b601f01601f19169290920160200192915050565b6000602080830181845280855180835260408601915060408160051b870101925083870160005b82811015611b5b57603f19888603018452611b49858351611ada565b94509285019290850190600101611b2d565b5092979650505050505050565b600060208284031215611b7a57600080fd5b813567ffffffffffffffff811115611b9157600080fd5b61195e848285016119ab565b6020815260006112346020830184611ada565b60008251611bc2818460208701611aae565b9190910192915050565b634e487b7160e01b600052603260045260246000fd5b634e487b7160e01b600052601160045260246000fd5b600063ffffffff80831681811415611c1257611c12611be2565b6001019392505050565b600181811c90821680611c3057607f821691505b60208210811415611c5157634e487b7160e01b600052602260045260246000fd5b50919050565b60008351611c69818460208801611aae565b835190830190611c7d818360208801611aae565b01949350505050565b7f416363657373436f6e74726f6c3a206163636f756e7420000000000000000000815260008351611cbe816017850160208801611aae565b7001034b99036b4b9b9b4b733903937b6329607d1b6017918401918201528351611cef816028840160208801611aae565b01602801949350505050565b6000816000190483118215151615611d1557611d15611be2565b500290565b60008219821115611d2d57611d2d611be2565b500190565b600081611d4157611d41611be2565b50600019019056fe9dbfebaee4c898490164a8ab686838c633319f3806d3dea7cd93c1cfefb35e0722f59c2f02edbae5c421247f029fe3112c5a85f70b4a48f5d93b22ada9ea772ea2646970667358221220f3dd0638e264fdde0761fa67c77768c46b9cee98199fe23daee85daeabb2828864736f6c634300080b0033"
    };

    public static final String BINARY =
            org.fisco.bcos.sdk.v3.utils.StringUtils.joinAll("", BINARY_ARRAY);

    public static final String[] SM_BINARY_ARRAY = {
        "",
        "602001828054610fee90611c28565b801561103b5780601f106110105761010080835404028352916020019161103b565b820191906000526020600020905b81548152906001019060200180831161101e57829003601f168201915b5050505050905092915050565b610dee8133611480565b6000828152602084905260409020805463ffffffff831663ffffffff1990911617905560019392505050565b6110888282610b1e565b6104615760008281526065602090815260408083206001600160a01b03851684529091529020805460ff191660011790556110c03390565b6001600160a01b0316816001600160a01b0316837f3a8c19c5eddb5ca7fdd091f00e2b3978b86344c928af4d2d7f6733572cc06b4c60405160405180910390a45050565b600081815260208381526040808320805482518185028101850190935280835260609492939192909184015b828210156111dc57838290600052602060002001805461114f90611c28565b80601f016020809104026020016040519081016040528092919081815260200182805461117b90611c28565b80156111c85780601f1061119d576101008083540402835291602001916111c8565b820191906000526020600020905b8154815290600101906020018083116111ab57829003601f168201915b505050505081526020019060010190611130565b50505050905092915050565b606082826040516020016111fd929190611c63565b604051602081830303815290604052905092915050565b6000828152602084815260408220835161123092850190611689565b506001949350505050565b60006112856040518060400160405280602081526020017f3a7661726961626c655f646174613a737570706f727465645f66696c6564733d815250846111e890919063ffffffff16565b80516020820120909150600061129e6004870183611104565b905060005b81518163ffffffff16101561133f5760006112f1604051806040016040528060128152602001717661726961626c655f646174613a6b65793d60701b815250886111e890919063ffffffff16565b90506000611310848463ffffffff16815181106107ad576107ad611bd8565b8051602090910120905061132960068a01826000611052565b505050808061133790611c04565b9150506112a3565b5060005b84518163ffffffff1610156113df576000611391604051806040016040528060128152602001717661726961626c655f646174613a6b65793d60701b815250886111e890919063ffffffff16565b905060006113b0878463ffffffff16815181106107ad576107ad611bd8565b805160209091012090506113c960068a01826001611052565b50505080806113d790611c04565b915050611343565b506113ee600487018386611214565b50505050505050565b60008281526020848152604082208351611230928501906116e6565b6040805180820190915260148152733230ba30afb934b3b43a2fb1b0ba32b3b7b93c9d60611b60209091015260607f1ef121f667bed00cfcfc37c32099dffa7438068261cb3a514d9463678184448261146f6004840182611104565b9392505050565b610461828261107e565b61148a8282610b1e565b61046157611497816114da565b6114a28360206114ec565b6040516020016114b3929190611c92565b60408051601f1981840301815290829052636381e58960e11b825261044e916004016119c3565b60606103db6001600160a01b03831660145b606060006114fb836002611d07565b611506906002611d26565b67ffffffffffffffff81111561151e5761151e6117d2565b6040519080825280601f01601f191660200182016040528015611548576020820181803683370190505b509050600360fc1b8160008151811061156357611563611bd8565b60200101906001600160f81b031916908160001a905350600f60fb1b8160018151811061159257611592611bd8565b60200101906001600160f81b031916908160001a90535060006115b6846002611d07565b6115c1906001611d26565b90505b6001811115611639576f181899199a1a9b1b9c1cb0b131b232b360811b85600f16601081106115f5576115f5611bd8565b1a60f81b82828151811061160b5761160b611bd8565b60200101906001600160f81b031916908160001a90535060049490941c9361163281611d3e565b90506115c4565b50831561146f57604051636381e58960e11b815260206004820181905260248201527f537472696e67733a20686578206c656e67746820696e73756666696369656e74604482015260640161044e565b8280548282559060005260206000209081019282156116d6579160200282015b828111156116d657825180516116c69184916020909101906116e6565b50916020019190600101906116a9565b506116e2929150611766565b5090565b8280546116f290611c28565b90600052602060002090601f016020900481019282611714576000855561175a565b82601f1061172d57805160ff191683800117855561175a565b8280016001018555821561175a579182015b8281111561175a57825182559160200191906001019061173f565b506116e2929150611783565b808211156116e257600061177a8282611798565b50600101611766565b5b808211156116e25760008155600101611784565b5080546117a490611c28565b6000825580601f106117b4575050565b601f016020900490600052602060002090810190610dee9190611783565b63b95aa35560e01b600052604160045260246000fd5b604051601f8201601f1916810167ffffffffffffffff81118282101715611811576118116117d2565b604052919050565b600082601f83011261182a57600080fd5b813567ffffffffffffffff811115611844576118446117d2565b611857601f8201601f19166020016117e8565b81815284602083860101111561186c57600080fd5b816020850160208301376000918101602001919091529392505050565b60006020828403121561189b57600080fd5b813567ffffffffffffffff8111156118b257600080fd5b6118be84828501611819565b949350505050565b60005b838110156118e15781810151838201526020016118c9565b8381111561056a5750506000910152565b6000815180845261190a8160208601602086016118c6565b601f01601f19169290920160200192915050565b6000602080830181845280855180835260408601915060408160051b870101925083870160005b8281101561197357603f198886030184526119618583516118f2565b94509285019290850190600101611945565b5092979650505050505050565b80356001600160a01b0381168114610ea857600080fd5b600080604083850312156119aa57600080fd5b823591506119ba60208401611980565b90509250929050565b60208152600061146f60208301846118f2565b6000602082840312156119e857600080fd5b813563ffffffff8116811461146f57600080fd5b60008060408385031215611a0f57600080fd5b823567ffffffffffffffff811115611a2657600080fd5b611a3285828601611819565b9250506119ba60208401611980565b600082601f830112611a5257600080fd5b8135602067ffffffffffffffff80831115611a6f57611a6f6117d2565b8260051b611a7e8382016117e8565b9384528581018301938381019088861115611a9857600080fd5b84880192505b85831015611ad457823584811115611ab65760008081fd5b611ac48a87838c0101611819565b8352509184019190840190611a9e565b98975050505050505050565b600060208284031215611af257600080fd5b813567ffffffffffffffff811115611b0957600080fd5b6118be84828501611a41565b60008060408385031215611b2857600080fd5b823567ffffffffffffffff80821115611b4057600080fd5b611b4c86838701611819565b93506020850135915080821115611b6257600080fd5b50611b6f85828601611a41565b9150509250929050565b600060208284031215611b8b57600080fd5b81356001600160e01b03198116811461146f57600080fd5b600060208284031215611bb557600080fd5b5035919050565b60008251611bce8184602087016118c6565b9190910192915050565b63b95aa35560e01b600052603260045260246000fd5b63b95aa35560e01b600052601160045260246000fd5b600063ffffffff80831681811415611c1e57611c1e611bee565b6001019392505050565b600181811c90821680611c3c57607f821691505b60208210811415611c5d5763b95aa35560e01b600052602260045260246000fd5b50919050565b60008351611c758184602088016118c6565b835190830190611c898183602088016118c6565b01949350505050565b7f416363657373436f6e74726f6c3a206163636f756e7420000000000000000000815260008351611cca8160178501602088016118c6565b7001034b99036b4b9b9b4b733903937b6329607d1b6017918401918201528351611cfb8160288401602088016118c6565b01602801949350505050565b6000816000190483118215151615611d2157611d21611bee565b500290565b60008219821115611d3957611d39611bee565b500190565b600081611d4d57611d4d611bee565b50600019019056fee4f23932eff8c7a5c12e0a6fb9b7dc66fcf815724641a77260df59fd307f9a64cda5c054d055f48a2866e1a28d72f8145e422f1db1872bc4c9fe2888702c9f8da2646970667358221220534beea1bb4f3f210239c5bad521c66da3e39c1043221bbadf8e0aa572728eb464736f6c634300080b0033"
    };

    public static final String SM_BINARY =
            org.fisco.bcos.sdk.v3.utils.StringUtils.joinAll("", SM_BINARY_ARRAY);

    public static final String[] ABI_ARRAY = {
        "[{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint8\",\"name\":\"version\",\"type\":\"uint8\"}],\"name\":\"Initialized\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"string\",\"name\":\"udri\",\"type\":\"string\"},{\"indexed\":true,\"internalType\":\"uint32\",\"name\":\"index\",\"type\":\"uint32\"}],\"name\":\"NewReviewEvidenceStored\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"string\",\"name\":\"udri\",\"type\":\"string\"}],\"name\":\"NewRightEvidenceStored\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"previousAdminRole\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"newAdminRole\",\"type\":\"bytes32\"}],\"name\":\"RoleAdminChanged\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"}],\"name\":\"RoleGranted\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"}],\"name\":\"RoleRevoked\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"string\",\"name\":\"bid\",\"type\":\"string\"},{\"indexed\":true,\"internalType\":\"string\",\"name\":\"usci\",\"type\":\"string\"}],\"name\":\"UserCreated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"string\",\"name\":\"bid\",\"type\":\"string\"}],\"name\":\"UserRoleChanged\",\"type\":\"event\"},{\"conflictFields\":[{\"kind\":5}],\"inputs\":[],\"name\":\"DEFAULT_ADMIN_ROLE\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"selector\":[2719481311,456278200],\"stateMutability\":\"view\",\"type\":\"function\"},{\"conflictFields\":[{\"kind\":5}],\"inputs\":[],\"name\":\"USERMANAGE_ROLE\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"selector\":[852968231,3061267160],\"stateMutability\":\"view\",\"type\":\"function\"},{\"conflictFields\":[{\"kind\":0},{\"kind\":4,\"slot\":207,\"value\":[157,191,235,174,228,200,152,73,1,100,168,171,104,104,56,198,51,49,159,56,6,211,222,167,205,147,193,207,239,179,94,7]}],\"inputs\":[],\"name\":\"disableAccessControl\",\"outputs\":[],\"selector\":[1980433629,2854924890],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"conflictFields\":[{\"kind\":0},{\"kind\":4,\"slot\":207,\"value\":[157,191,235,174,228,200,152,73,1,100,168,171,104,104,56,198,51,49,159,56,6,211,222,167,205,147,193,207,239,179,94,7]}],\"inputs\":[],\"name\":\"enableAccessControl\",\"outputs\":[],\"selector\":[922088542,1158894738],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"conflictFields\":[{\"kind\":4,\"slot\":207,\"value\":[157,191,235,174,228,200,152,73,1,100,168,171,104,104,56,198,51,49,159,56,6,211,222,167,205,147,193,207,239,179,94,7]}],\"inputs\":[],\"name\":\"getAccessControl\",\"outputs\":[{\"internalType\":\"uint32\",\"name\":\"status\",\"type\":\"uint32\"}],\"selector\":[4229803393,1904329564],\"stateMutability\":\"view\",\"type\":\"function\"},{\"conflictFields\":[{\"kind\":0},{\"kind\":4,\"slot\":206,\"value\":[162,101,223,69,236,25,33,40,185,206,36,196,169,43,145,125,112,178,202,38,144,225,183,73,205,179,113,171,18,144,4,252]}],\"inputs\":[],\"name\":\"getChainName\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"name\",\"type\":\"string\"}],\"selector\":[3609374908,728140679],\"stateMutability\":\"view\",\"type\":\"function\"},{\"conflictFields\":[{\"kind\":3,\"slot\":210,\"value\":[0]}],\"inputs\":[{\"internalType\":\"string\",\"name\":\"logicName\",\"type\":\"string\"}],\"name\":\"getContract\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"_LogicContract\",\"type\":\"address\"}],\"selector\":[897677171,2871620091],\"stateMutability\":\"view\",\"type\":\"function\"},{\"conflictFields\":[{\"kind\":0},{\"kind\":4,\"slot\":205,\"value\":[182,122,175,140,61,55,162,13,121,24,7,66,106,134,166,187,199,177,18,112,111,87,232,122,236,184,218,149,54,149,117,148]}],\"inputs\":[],\"name\":\"getDataRightCategory\",\"outputs\":[{\"internalType\":\"string[]\",\"name\":\"fields\",\"type\":\"string[]\"}],\"selector\":[2324699571,3796759802],\"stateMutability\":\"view\",\"type\":\"function\"},{\"conflictFields\":[{\"kind\":3,\"slot\":101,\"value\":[0]}],\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"}],\"name\":\"getRoleAdmin\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"selector\":[613063843,4224970943],\"stateMutability\":\"view\",\"type\":\"function\"},{\"conflictFields\":[{\"kind\":0}],\"inputs\":[{\"internalType\":\"string\",\"name\":\"category\",\"type\":\"string\"}],\"name\":\"getSupportVariableDataFields\",\"outputs\":[{\"internalType\":\"string[]\",\"name\":\"fileds\",\"type\":\"string[]\"}],\"selector\":[3869446330,376683502],\"stateMutability\":\"view\",\"type\":\"function\"},{\"conflictFields\":[{\"kind\":4,\"slot\":207,\"value\":[187,62,187,155,152,108,193,70,4,91,130,213,136,99,28,61,51,63,18,248,207,204,115,8,64,167,33,244,177,104,236,135]}],\"inputs\":[],\"name\":\"getTextMaxLen\",\"outputs\":[{\"internalType\":\"uint32\",\"name\":\"len\",\"type\":\"uint32\"}],\"selector\":[3460282540,1588090095],\"stateMutability\":\"view\",\"type\":\"function\"},{\"conflictFields\":[{\"kind\":4,\"slot\":207,\"value\":[128,47,63,182,162,198,146,200,177,157,218,187,249,27,151,217,143,55,78,6,198,201,141,189,43,201,33,107,52,79,78,189]}],\"inputs\":[],\"name\":\"getstrArrayMaxLen\",\"outputs\":[{\"internalType\":\"uint32\",\"name\":\"len\",\"type\":\"uint32\"}],\"selector\":[905356897,1921885619],\"stateMutability\":\"view\",\"type\":\"function\"},{\"conflictFields\":[{\"kind\":3,\"slot\":101,\"value\":[0]}],\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"grantRole\",\"outputs\":[],\"selector\":[791671133,1416757515],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"conflictFields\":[{\"kind\":0}],\"inputs\":[{\"internalType\":\"string\",\"name\":\"bid\",\"type\":\"string\"},{\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"}],\"name\":\"grantUserManagePermission\",\"outputs\":[],\"selector\":[1037211317,3070963644],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"conflictFields\":[{\"kind\":0},{\"kind\":4,\"slot\":101,\"value\":[34,245,156,47,2,237,186,229,196,33,36,127,2,159,227,17,44,90,133,247,11,74,72,245,217,59,34,173,169,234,119,46]}],\"inputs\":[{\"internalType\":\"string\",\"name\":\"bid\",\"type\":\"string\"}],\"name\":\"hasDAUserManageRole\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"selector\":[1195994301,4114364435],\"stateMutability\":\"view\",\"type\":\"function\"},{\"conflictFields\":[{\"kind\":3,\"slot\":101,\"value\":[0]}],\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"hasRole\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"selector\":[2446411860,3734140252],\"stateMutability\":\"view\",\"type\":\"function\"},{\"conflictFields\":[{\"kind\":0},{\"kind\":2,\"slot\":101,\"value\":[0]},{\"kind\":4,\"value\":[0]},{\"kind\":4,\"slot\":207,\"value\":[128,47,63,182,162,198,146,200,177,157,218,187,249,27,151,217,143,55,78,6,198,201,141,189,43,201,33,107,52,79,78,189]},{\"kind\":4,\"slot\":207,\"value\":[157,191,235,174,228,200,152,73,1,100,168,171,104,104,56,198,51,49,159,56,6,211,222,167,205,147,193,207,239,179,94,7]},{\"kind\":4,\"slot\":207,\"value\":[187,62,187,155,152,108,193,70,4,91,130,213,136,99,28,61,51,63,18,248,207,204,115,8,64,167,33,244,177,104,236,135]}],\"inputs\":[],\"name\":\"initialize\",\"outputs\":[],\"selector\":[2167012380,3932184381],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"conflictFields\":[{\"kind\":0},{\"kind\":3,\"slot\":101,\"value\":[0]}],\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"renounceRole\",\"outputs\":[],\"selector\":[911641278,399928776],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"conflictFields\":[{\"kind\":3,\"slot\":101,\"value\":[0]}],\"inputs\":[{\"internalType\":\"bytes32\",\"",
        "name\":\"role\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"revokeRole\",\"outputs\":[],\"selector\":[3578229791,4245284822],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"conflictFields\":[{\"kind\":0}],\"inputs\":[{\"internalType\":\"string\",\"name\":\"bid\",\"type\":\"string\"}],\"name\":\"revokeUserManagePermission\",\"outputs\":[],\"selector\":[4233016450,2768200898],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"conflictFields\":[{\"kind\":5}],\"inputs\":[{\"internalType\":\"string\",\"name\":\"name\",\"type\":\"string\"}],\"name\":\"setChainName\",\"outputs\":[],\"selector\":[3234078498,3307895570],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"conflictFields\":[{\"kind\":0}],\"inputs\":[{\"internalType\":\"string\",\"name\":\"logicName\",\"type\":\"string\"},{\"internalType\":\"address\",\"name\":\"_LogicContract\",\"type\":\"address\"}],\"name\":\"setContract\",\"outputs\":[],\"selector\":[1057935583,1641680881],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"conflictFields\":[{\"kind\":0},{\"kind\":4,\"slot\":205,\"value\":[182,122,175,140,61,55,162,13,121,24,7,66,106,134,166,187,199,177,18,112,111,87,232,122,236,184,218,149,54,149,117,148]}],\"inputs\":[{\"internalType\":\"string[]\",\"name\":\"fields\",\"type\":\"string[]\"}],\"name\":\"setDataRightCategory\",\"outputs\":[],\"selector\":[2472945857,2087572871],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"conflictFields\":[{\"kind\":5}],\"inputs\":[{\"internalType\":\"string\",\"name\":\"category\",\"type\":\"string\"},{\"internalType\":\"string[]\",\"name\":\"fields\",\"type\":\"string[]\"}],\"name\":\"setDataRightSupportVariableDataFields\",\"outputs\":[],\"selector\":[1199116808,2135762870],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"conflictFields\":[{\"kind\":0},{\"kind\":4,\"slot\":207,\"value\":[187,62,187,155,152,108,193,70,4,91,130,213,136,99,28,61,51,63,18,248,207,204,115,8,64,167,33,244,177,104,236,135]}],\"inputs\":[{\"internalType\":\"uint32\",\"name\":\"len\",\"type\":\"uint32\"}],\"name\":\"setTextMaxLen\",\"outputs\":[],\"selector\":[1356933702,1285167137],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"conflictFields\":[{\"kind\":0},{\"kind\":4,\"slot\":207,\"value\":[128,47,63,182,162,198,146,200,177,157,218,187,249,27,151,217,143,55,78,6,198,201,141,189,43,201,33,107,52,79,78,189]}],\"inputs\":[{\"internalType\":\"uint32\",\"name\":\"len\",\"type\":\"uint32\"}],\"name\":\"setstrArrayMaxLen\",\"outputs\":[],\"selector\":[453424020,3279923519],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"conflictFields\":[{\"kind\":5}],\"inputs\":[{\"internalType\":\"bytes4\",\"name\":\"interfaceId\",\"type\":\"bytes4\"}],\"name\":\"supportsInterface\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"selector\":[33540519,3934173080],\"stateMutability\":\"view\",\"type\":\"function\"}]"
    };

    public static final String ABI = org.fisco.bcos.sdk.v3.utils.StringUtils.joinAll("", ABI_ARRAY);

    public static final String FUNC_DEFAULT_ADMIN_ROLE = "DEFAULT_ADMIN_ROLE";

    public static final String FUNC_USERMANAGE_ROLE = "USERMANAGE_ROLE";

    public static final String FUNC_DISABLEACCESSCONTROL = "disableAccessControl";

    public static final String FUNC_ENABLEACCESSCONTROL = "enableAccessControl";

    public static final String FUNC_GETACCESSCONTROL = "getAccessControl";

    public static final String FUNC_GETCHAINNAME = "getChainName";

    public static final String FUNC_GETCONTRACT = "getContract";

    public static final String FUNC_GETDATARIGHTCATEGORY = "getDataRightCategory";

    public static final String FUNC_GETROLEADMIN = "getRoleAdmin";

    public static final String FUNC_GETSUPPORTVARIABLEDATAFIELDS = "getSupportVariableDataFields";

    public static final String FUNC_GETTEXTMAXLEN = "getTextMaxLen";

    public static final String FUNC_GETSTRARRAYMAXLEN = "getstrArrayMaxLen";

    public static final String FUNC_GRANTROLE = "grantRole";

    public static final String FUNC_GRANTUSERMANAGEPERMISSION = "grantUserManagePermission";

    public static final String FUNC_HASDAUSERMANAGEROLE = "hasDAUserManageRole";

    public static final String FUNC_HASROLE = "hasRole";

    public static final String FUNC_INITIALIZE = "initialize";

    public static final String FUNC_RENOUNCEROLE = "renounceRole";

    public static final String FUNC_REVOKEROLE = "revokeRole";

    public static final String FUNC_REVOKEUSERMANAGEPERMISSION = "revokeUserManagePermission";

    public static final String FUNC_SETCHAINNAME = "setChainName";

    public static final String FUNC_SETCONTRACT = "setContract";

    public static final String FUNC_SETDATARIGHTCATEGORY = "setDataRightCategory";

    public static final String FUNC_SETDATARIGHTSUPPORTVARIABLEDATAFIELDS =
            "setDataRightSupportVariableDataFields";

    public static final String FUNC_SETTEXTMAXLEN = "setTextMaxLen";

    public static final String FUNC_SETSTRARRAYMAXLEN = "setstrArrayMaxLen";

    public static final String FUNC_SUPPORTSINTERFACE = "supportsInterface";

    public static final Event INITIALIZED_EVENT =
            new Event(
                    "Initialized", Arrays.<TypeReference<?>>asList(new TypeReference<Uint8>() {}));;

    public static final Event NEWREVIEWEVIDENCESTORED_EVENT =
            new Event(
                    "NewReviewEvidenceStored",
                    Arrays.<TypeReference<?>>asList(
                            new TypeReference<Address>(true) {},
                            new TypeReference<Utf8String>(true) {},
                            new TypeReference<Uint32>(true) {}));;

    public static final Event NEWRIGHTEVIDENCESTORED_EVENT =
            new Event(
                    "NewRightEvidenceStored",
                    Arrays.<TypeReference<?>>asList(
                            new TypeReference<Address>(true) {},
                            new TypeReference<Utf8String>(true) {}));;

    public static final Event ROLEADMINCHANGED_EVENT =
            new Event(
                    "RoleAdminChanged",
                    Arrays.<TypeReference<?>>asList(
                            new TypeReference<Bytes32>(true) {},
                            new TypeReference<Bytes32>(true) {},
                            new TypeReference<Bytes32>(true) {}));;

    public static final Event ROLEGRANTED_EVENT =
            new Event(
                    "RoleGranted",
                    Arrays.<TypeReference<?>>asList(
                            new TypeReference<Bytes32>(true) {},
                            new TypeReference<Address>(true) {},
                            new TypeReference<Address>(true) {}));;

    public static final Event ROLEREVOKED_EVENT =
            new Event(
                    "RoleRevoked",
                    Arrays.<TypeReference<?>>asList(
                            new TypeReference<Bytes32>(true) {},
                            new TypeReference<Address>(true) {},
                            new TypeReference<Address>(true) {}));;

    public static final Event USERCREATED_EVENT =
            new Event(
                    "UserCreated",
                    Arrays.<TypeReference<?>>asList(
                            new TypeReference<Address>(true) {},
                            new TypeReference<Utf8String>(true) {},
                            new TypeReference<Utf8String>(true) {}));;

    public static final Event USERROLECHANGED_EVENT =
            new Event(
                    "UserRoleChanged",
                    Arrays.<TypeReference<?>>asList(
                            new TypeReference<Address>(true) {},
                            new TypeReference<Utf8String>(true) {}));;

    protected DAEvidenceAdminController(
            String contractAddress, Client client, CryptoKeyPair credential) {
        super(getBinary(client.getCryptoSuite()), contractAddress, client, credential);
    }

    public static String getBinary(CryptoSuite cryptoSuite) {
        return (cryptoSuite.getCryptoTypeConfig() == CryptoType.ECDSA_TYPE ? BINARY : SM_BINARY);
    }

    public static String getABI() {
        return ABI;
    }

    public List<InitializedEventResponse> getInitializedEvents(
            TransactionReceipt transactionReceipt) {
        List<Contract.EventValuesWithLog> valueList =
                extractEventParametersWithLog(INITIALIZED_EVENT, transactionReceipt);
        ArrayList<InitializedEventResponse> responses =
                new ArrayList<InitializedEventResponse>(valueList.size());
        for (Contract.EventValuesWithLog eventValues : valueList) {
            InitializedEventResponse typedResponse = new InitializedEventResponse();
            typedResponse.log = eventValues.getLog();
            typedResponse.version =
                    (BigInteger) eventValues.getNonIndexedValues().get(0).getValue();
            responses.add(typedResponse);
        }
        return responses;
    }

    public List<NewReviewEvidenceStoredEventResponse> getNewReviewEvidenceStoredEvents(
            TransactionReceipt transactionReceipt) {
        List<Contract.EventValuesWithLog> valueList =
                extractEventParametersWithLog(NEWREVIEWEVIDENCESTORED_EVENT, transactionReceipt);
        ArrayList<NewReviewEvidenceStoredEventResponse> responses =
                new ArrayList<NewReviewEvidenceStoredEventResponse>(valueList.size());
        for (Contract.EventValuesWithLog eventValues : valueList) {
            NewReviewEvidenceStoredEventResponse typedResponse =
                    new NewReviewEvidenceStoredEventResponse();
            typedResponse.log = eventValues.getLog();
            typedResponse.sender = (String) eventValues.getIndexedValues().get(0).getValue();
            typedResponse.udri = (byte[]) eventValues.getIndexedValues().get(1).getValue();
            typedResponse.index = (BigInteger) eventValues.getIndexedValues().get(2).getValue();
            responses.add(typedResponse);
        }
        return responses;
    }

    public List<NewRightEvidenceStoredEventResponse> getNewRightEvidenceStoredEvents(
            TransactionReceipt transactionReceipt) {
        List<Contract.EventValuesWithLog> valueList =
                extractEventParametersWithLog(NEWRIGHTEVIDENCESTORED_EVENT, transactionReceipt);
        ArrayList<NewRightEvidenceStoredEventResponse> responses =
                new ArrayList<NewRightEvidenceStoredEventResponse>(valueList.size());
        for (Contract.EventValuesWithLog eventValues : valueList) {
            NewRightEvidenceStoredEventResponse typedResponse =
                    new NewRightEvidenceStoredEventResponse();
            typedResponse.log = eventValues.getLog();
            typedResponse.sender = (String) eventValues.getIndexedValues().get(0).getValue();
            typedResponse.udri = (byte[]) eventValues.getIndexedValues().get(1).getValue();
            responses.add(typedResponse);
        }
        return responses;
    }

    public List<RoleAdminChangedEventResponse> getRoleAdminChangedEvents(
            TransactionReceipt transactionReceipt) {
        List<Contract.EventValuesWithLog> valueList =
                extractEventParametersWithLog(ROLEADMINCHANGED_EVENT, transactionReceipt);
        ArrayList<RoleAdminChangedEventResponse> responses =
                new ArrayList<RoleAdminChangedEventResponse>(valueList.size());
        for (Contract.EventValuesWithLog eventValues : valueList) {
            RoleAdminChangedEventResponse typedResponse = new RoleAdminChangedEventResponse();
            typedResponse.log = eventValues.getLog();
            typedResponse.role = (byte[]) eventValues.getIndexedValues().get(0).getValue();
            typedResponse.previousAdminRole =
                    (byte[]) eventValues.getIndexedValues().get(1).getValue();
            typedResponse.newAdminRole = (byte[]) eventValues.getIndexedValues().get(2).getValue();
            responses.add(typedResponse);
        }
        return responses;
    }

    public List<RoleGrantedEventResponse> getRoleGrantedEvents(
            TransactionReceipt transactionReceipt) {
        List<Contract.EventValuesWithLog> valueList =
                extractEventParametersWithLog(ROLEGRANTED_EVENT, transactionReceipt);
        ArrayList<RoleGrantedEventResponse> responses =
                new ArrayList<RoleGrantedEventResponse>(valueList.size());
        for (Contract.EventValuesWithLog eventValues : valueList) {
            RoleGrantedEventResponse typedResponse = new RoleGrantedEventResponse();
            typedResponse.log = eventValues.getLog();
            typedResponse.role = (byte[]) eventValues.getIndexedValues().get(0).getValue();
            typedResponse.account = (String) eventValues.getIndexedValues().get(1).getValue();
            typedResponse.sender = (String) eventValues.getIndexedValues().get(2).getValue();
            responses.add(typedResponse);
        }
        return responses;
    }

    public List<RoleRevokedEventResponse> getRoleRevokedEvents(
            TransactionReceipt transactionReceipt) {
        List<Contract.EventValuesWithLog> valueList =
                extractEventParametersWithLog(ROLEREVOKED_EVENT, transactionReceipt);
        ArrayList<RoleRevokedEventResponse> responses =
                new ArrayList<RoleRevokedEventResponse>(valueList.size());
        for (Contract.EventValuesWithLog eventValues : valueList) {
            RoleRevokedEventResponse typedResponse = new RoleRevokedEventResponse();
            typedResponse.log = eventValues.getLog();
            typedResponse.role = (byte[]) eventValues.getIndexedValues().get(0).getValue();
            typedResponse.account = (String) eventValues.getIndexedValues().get(1).getValue();
            typedResponse.sender = (String) eventValues.getIndexedValues().get(2).getValue();
            responses.add(typedResponse);
        }
        return responses;
    }

    public List<UserCreatedEventResponse> getUserCreatedEvents(
            TransactionReceipt transactionReceipt) {
        List<Contract.EventValuesWithLog> valueList =
                extractEventParametersWithLog(USERCREATED_EVENT, transactionReceipt);
        ArrayList<UserCreatedEventResponse> responses =
                new ArrayList<UserCreatedEventResponse>(valueList.size());
        for (Contract.EventValuesWithLog eventValues : valueList) {
            UserCreatedEventResponse typedResponse = new UserCreatedEventResponse();
            typedResponse.log = eventValues.getLog();
            typedResponse.sender = (String) eventValues.getIndexedValues().get(0).getValue();
            typedResponse.bid = (byte[]) eventValues.getIndexedValues().get(1).getValue();
            typedResponse.usci = (byte[]) eventValues.getIndexedValues().get(2).getValue();
            responses.add(typedResponse);
        }
        return responses;
    }

    public List<UserRoleChangedEventResponse> getUserRoleChangedEvents(
            TransactionReceipt transactionReceipt) {
        List<Contract.EventValuesWithLog> valueList =
                extractEventParametersWithLog(USERROLECHANGED_EVENT, transactionReceipt);
        ArrayList<UserRoleChangedEventResponse> responses =
                new ArrayList<UserRoleChangedEventResponse>(valueList.size());
        for (Contract.EventValuesWithLog eventValues : valueList) {
            UserRoleChangedEventResponse typedResponse = new UserRoleChangedEventResponse();
            typedResponse.log = eventValues.getLog();
            typedResponse.sender = (String) eventValues.getIndexedValues().get(0).getValue();
            typedResponse.bid = (byte[]) eventValues.getIndexedValues().get(1).getValue();
            responses.add(typedResponse);
        }
        return responses;
    }

    public byte[] DEFAULT_ADMIN_ROLE() throws ContractException {
        final Function function =
                new Function(
                        FUNC_DEFAULT_ADMIN_ROLE,
                        Arrays.<Type>asList(),
                        Arrays.<TypeReference<?>>asList(new TypeReference<Bytes32>() {}));
        return executeCallWithSingleValueReturn(function, byte[].class);
    }

    public byte[] USERMANAGE_ROLE() throws ContractException {
        final Function function =
                new Function(
                        FUNC_USERMANAGE_ROLE,
                        Arrays.<Type>asList(),
                        Arrays.<TypeReference<?>>asList(new TypeReference<Bytes32>() {}));
        return executeCallWithSingleValueReturn(function, byte[].class);
    }

    public TransactionReceipt disableAccessControl() {
        final Function function =
                new Function(
                        FUNC_DISABLEACCESSCONTROL,
                        Arrays.<Type>asList(),
                        Collections.<TypeReference<?>>emptyList(),
                        0);
        return executeTransaction(function);
    }

    public String getSignedTransactionForDisableAccessControl() {
        final Function function =
                new Function(
                        FUNC_DISABLEACCESSCONTROL,
                        Arrays.<Type>asList(),
                        Collections.<TypeReference<?>>emptyList(),
                        0);
        return createSignedTransaction(function);
    }

    public String disableAccessControl(TransactionCallback callback) {
        final Function function =
                new Function(
                        FUNC_DISABLEACCESSCONTROL,
                        Arrays.<Type>asList(),
                        Collections.<TypeReference<?>>emptyList(),
                        0);
        return asyncExecuteTransaction(function, callback);
    }

    public TransactionReceipt enableAccessControl() {
        final Function function =
                new Function(
                        FUNC_ENABLEACCESSCONTROL,
                        Arrays.<Type>asList(),
                        Collections.<TypeReference<?>>emptyList(),
                        0);
        return executeTransaction(function);
    }

    public String getSignedTransactionForEnableAccessControl() {
        final Function function =
                new Function(
                        FUNC_ENABLEACCESSCONTROL,
                        Arrays.<Type>asList(),
                        Collections.<TypeReference<?>>emptyList(),
                        0);
        return createSignedTransaction(function);
    }

    public String enableAccessControl(TransactionCallback callback) {
        final Function function =
                new Function(
                        FUNC_ENABLEACCESSCONTROL,
                        Arrays.<Type>asList(),
                        Collections.<TypeReference<?>>emptyList(),
                        0);
        return asyncExecuteTransaction(function, callback);
    }

    public BigInteger getAccessControl() throws ContractException {
        final Function function =
                new Function(
                        FUNC_GETACCESSCONTROL,
                        Arrays.<Type>asList(),
                        Arrays.<TypeReference<?>>asList(new TypeReference<Uint32>() {}));
        return executeCallWithSingleValueReturn(function, BigInteger.class);
    }

    public String getChainName() throws ContractException {
        final Function function =
                new Function(
                        FUNC_GETCHAINNAME,
                        Arrays.<Type>asList(),
                        Arrays.<TypeReference<?>>asList(new TypeReference<Utf8String>() {}));
        return executeCallWithSingleValueReturn(function, String.class);
    }

    public String getContract(String logicName) throws ContractException {
        final Function function =
                new Function(
                        FUNC_GETCONTRACT,
                        Arrays.<Type>asList(
                                new org.fisco.bcos.sdk.v3.codec.datatypes.Utf8String(logicName)),
                        Arrays.<TypeReference<?>>asList(new TypeReference<Address>() {}));
        return executeCallWithSingleValueReturn(function, String.class);
    }

    public List getDataRightCategory() throws ContractException {
        final Function function =
                new Function(
                        FUNC_GETDATARIGHTCATEGORY,
                        Arrays.<Type>asList(),
                        Arrays.<TypeReference<?>>asList(
                                new TypeReference<DynamicArray<Utf8String>>() {}));
        List<Type> result = (List<Type>) executeCallWithSingleValueReturn(function, List.class);
        return convertToNative(result);
    }

    public byte[] getRoleAdmin(byte[] role) throws ContractException {
        final Function function =
                new Function(
                        FUNC_GETROLEADMIN,
                        Arrays.<Type>asList(
                                new org.fisco.bcos.sdk.v3.codec.datatypes.generated.Bytes32(role)),
                        Arrays.<TypeReference<?>>asList(new TypeReference<Bytes32>() {}));
        return executeCallWithSingleValueReturn(function, byte[].class);
    }

    public List getSupportVariableDataFields(String category) throws ContractException {
        final Function function =
                new Function(
                        FUNC_GETSUPPORTVARIABLEDATAFIELDS,
                        Arrays.<Type>asList(
                                new org.fisco.bcos.sdk.v3.codec.datatypes.Utf8String(category)),
                        Arrays.<TypeReference<?>>asList(
                                new TypeReference<DynamicArray<Utf8String>>() {}));
        List<Type> result = (List<Type>) executeCallWithSingleValueReturn(function, List.class);
        return convertToNative(result);
    }

    public BigInteger getTextMaxLen() throws ContractException {
        final Function function =
                new Function(
                        FUNC_GETTEXTMAXLEN,
                        Arrays.<Type>asList(),
                        Arrays.<TypeReference<?>>asList(new TypeReference<Uint32>() {}));
        return executeCallWithSingleValueReturn(function, BigInteger.class);
    }

    public BigInteger getstrArrayMaxLen() throws ContractException {
        final Function function =
                new Function(
                        FUNC_GETSTRARRAYMAXLEN,
                        Arrays.<Type>asList(),
                        Arrays.<TypeReference<?>>asList(new TypeReference<Uint32>() {}));
        return executeCallWithSingleValueReturn(function, BigInteger.class);
    }

    public TransactionReceipt grantRole(byte[] role, String account) {
        final Function function =
                new Function(
                        FUNC_GRANTROLE,
                        Arrays.<Type>asList(
                                new org.fisco.bcos.sdk.v3.codec.datatypes.generated.Bytes32(role),
                                new org.fisco.bcos.sdk.v3.codec.datatypes.Address(account)),
                        Collections.<TypeReference<?>>emptyList(),
                        4);
        return executeTransaction(function);
    }

    public String getSignedTransactionForGrantRole(byte[] role, String account) {
        final Function function =
                new Function(
                        FUNC_GRANTROLE,
                        Arrays.<Type>asList(
                                new org.fisco.bcos.sdk.v3.codec.datatypes.generated.Bytes32(role),
                                new org.fisco.bcos.sdk.v3.codec.datatypes.Address(account)),
                        Collections.<TypeReference<?>>emptyList(),
                        4);
        return createSignedTransaction(function);
    }

    public String grantRole(byte[] role, String account, TransactionCallback callback) {
        final Function function =
                new Function(
                        FUNC_GRANTROLE,
                        Arrays.<Type>asList(
                                new org.fisco.bcos.sdk.v3.codec.datatypes.generated.Bytes32(role),
                                new org.fisco.bcos.sdk.v3.codec.datatypes.Address(account)),
                        Collections.<TypeReference<?>>emptyList(),
                        4);
        return asyncExecuteTransaction(function, callback);
    }

    public Tuple2<byte[], String> getGrantRoleInput(TransactionReceipt transactionReceipt) {
        String data = transactionReceipt.getInput().substring(10);
        final Function function =
                new Function(
                        FUNC_GRANTROLE,
                        Arrays.<Type>asList(),
                        Arrays.<TypeReference<?>>asList(
                                new TypeReference<Bytes32>() {}, new TypeReference<Address>() {}));
        List<Type> results =
                this.functionReturnDecoder.decode(data, function.getOutputParameters());
        return new Tuple2<byte[], String>(
                (byte[]) results.get(0).getValue(), (String) results.get(1).getValue());
    }

    public TransactionReceipt grantUserManagePermission(String bid, String user) {
        final Function function =
                new Function(
                        FUNC_GRANTUSERMANAGEPERMISSION,
                        Arrays.<Type>asList(
                                new org.fisco.bcos.sdk.v3.codec.datatypes.Utf8String(bid),
                                new org.fisco.bcos.sdk.v3.codec.datatypes.Address(user)),
                        Collections.<TypeReference<?>>emptyList(),
                        0);
        return executeTransaction(function);
    }

    public String getSignedTransactionForGrantUserManagePermission(String bid, String user) {
        final Function function =
                new Function(
                        FUNC_GRANTUSERMANAGEPERMISSION,
                        Arrays.<Type>asList(
                                new org.fisco.bcos.sdk.v3.codec.datatypes.Utf8String(bid),
                                new org.fisco.bcos.sdk.v3.codec.datatypes.Address(user)),
                        Collections.<TypeReference<?>>emptyList(),
                        0);
        return createSignedTransaction(function);
    }

    public String grantUserManagePermission(String bid, String user, TransactionCallback callback) {
        final Function function =
                new Function(
                        FUNC_GRANTUSERMANAGEPERMISSION,
                        Arrays.<Type>asList(
                                new org.fisco.bcos.sdk.v3.codec.datatypes.Utf8String(bid),
                                new org.fisco.bcos.sdk.v3.codec.datatypes.Address(user)),
                        Collections.<TypeReference<?>>emptyList(),
                        0);
        return asyncExecuteTransaction(function, callback);
    }

    public Tuple2<String, String> getGrantUserManagePermissionInput(
            TransactionReceipt transactionReceipt) {
        String data = transactionReceipt.getInput().substring(10);
        final Function function =
                new Function(
                        FUNC_GRANTUSERMANAGEPERMISSION,
                        Arrays.<Type>asList(),
                        Arrays.<TypeReference<?>>asList(
                                new TypeReference<Utf8String>() {},
                                new TypeReference<Address>() {}));
        List<Type> results =
                this.functionReturnDecoder.decode(data, function.getOutputParameters());
        return new Tuple2<String, String>(
                (String) results.get(0).getValue(), (String) results.get(1).getValue());
    }

    public Boolean hasDAUserManageRole(String bid) throws ContractException {
        final Function function =
                new Function(
                        FUNC_HASDAUSERMANAGEROLE,
                        Arrays.<Type>asList(
                                new org.fisco.bcos.sdk.v3.codec.datatypes.Utf8String(bid)),
                        Arrays.<TypeReference<?>>asList(new TypeReference<Bool>() {}));
        return executeCallWithSingleValueReturn(function, Boolean.class);
    }

    public Boolean hasRole(byte[] role, String account) throws ContractException {
        final Function function =
                new Function(
                        FUNC_HASROLE,
                        Arrays.<Type>asList(
                                new org.fisco.bcos.sdk.v3.codec.datatypes.generated.Bytes32(role),
                                new org.fisco.bcos.sdk.v3.codec.datatypes.Address(account)),
                        Arrays.<TypeReference<?>>asList(new TypeReference<Bool>() {}));
        return executeCallWithSingleValueReturn(function, Boolean.class);
    }

    public TransactionReceipt initialize() {
        final Function function =
                new Function(
                        FUNC_INITIALIZE,
                        Arrays.<Type>asList(),
                        Collections.<TypeReference<?>>emptyList(),
                        0);
        return executeTransaction(function);
    }

    public String getSignedTransactionForInitialize() {
        final Function function =
                new Function(
                        FUNC_INITIALIZE,
                        Arrays.<Type>asList(),
                        Collections.<TypeReference<?>>emptyList(),
                        0);
        return createSignedTransaction(function);
    }

    public String initialize(TransactionCallback callback) {
        final Function function =
                new Function(
                        FUNC_INITIALIZE,
                        Arrays.<Type>asList(),
                        Collections.<TypeReference<?>>emptyList(),
                        0);
        return asyncExecuteTransaction(function, callback);
    }

    public TransactionReceipt renounceRole(byte[] role, String account) {
        final Function function =
                new Function(
                        FUNC_RENOUNCEROLE,
                        Arrays.<Type>asList(
                                new org.fisco.bcos.sdk.v3.codec.datatypes.generated.Bytes32(role),
                                new org.fisco.bcos.sdk.v3.codec.datatypes.Address(account)),
                        Collections.<TypeReference<?>>emptyList(),
                        0);
        return executeTransaction(function);
    }

    public String getSignedTransactionForRenounceRole(byte[] role, String account) {
        final Function function =
                new Function(
                        FUNC_RENOUNCEROLE,
                        Arrays.<Type>asList(
                                new org.fisco.bcos.sdk.v3.codec.datatypes.generated.Bytes32(role),
                                new org.fisco.bcos.sdk.v3.codec.datatypes.Address(account)),
                        Collections.<TypeReference<?>>emptyList(),
                        0);
        return createSignedTransaction(function);
    }

    public String renounceRole(byte[] role, String account, TransactionCallback callback) {
        final Function function =
                new Function(
                        FUNC_RENOUNCEROLE,
                        Arrays.<Type>asList(
                                new org.fisco.bcos.sdk.v3.codec.datatypes.generated.Bytes32(role),
                                new org.fisco.bcos.sdk.v3.codec.datatypes.Address(account)),
                        Collections.<TypeReference<?>>emptyList(),
                        0);
        return asyncExecuteTransaction(function, callback);
    }

    public Tuple2<byte[], String> getRenounceRoleInput(TransactionReceipt transactionReceipt) {
        String data = transactionReceipt.getInput().substring(10);
        final Function function =
                new Function(
                        FUNC_RENOUNCEROLE,
                        Arrays.<Type>asList(),
                        Arrays.<TypeReference<?>>asList(
                                new TypeReference<Bytes32>() {}, new TypeReference<Address>() {}));
        List<Type> results =
                this.functionReturnDecoder.decode(data, function.getOutputParameters());
        return new Tuple2<byte[], String>(
                (byte[]) results.get(0).getValue(), (String) results.get(1).getValue());
    }

    public TransactionReceipt revokeRole(byte[] role, String account) {
        final Function function =
                new Function(
                        FUNC_REVOKEROLE,
                        Arrays.<Type>asList(
                                new org.fisco.bcos.sdk.v3.codec.datatypes.generated.Bytes32(role),
                                new org.fisco.bcos.sdk.v3.codec.datatypes.Address(account)),
                        Collections.<TypeReference<?>>emptyList(),
                        4);
        return executeTransaction(function);
    }

    public String getSignedTransactionForRevokeRole(byte[] role, String account) {
        final Function function =
                new Function(
                        FUNC_REVOKEROLE,
                        Arrays.<Type>asList(
                                new org.fisco.bcos.sdk.v3.codec.datatypes.generated.Bytes32(role),
                                new org.fisco.bcos.sdk.v3.codec.datatypes.Address(account)),
                        Collections.<TypeReference<?>>emptyList(),
                        4);
        return createSignedTransaction(function);
    }

    public String revokeRole(byte[] role, String account, TransactionCallback callback) {
        final Function function =
                new Function(
                        FUNC_REVOKEROLE,
                        Arrays.<Type>asList(
                                new org.fisco.bcos.sdk.v3.codec.datatypes.generated.Bytes32(role),
                                new org.fisco.bcos.sdk.v3.codec.datatypes.Address(account)),
                        Collections.<TypeReference<?>>emptyList(),
                        4);
        return asyncExecuteTransaction(function, callback);
    }

    public Tuple2<byte[], String> getRevokeRoleInput(TransactionReceipt transactionReceipt) {
        String data = transactionReceipt.getInput().substring(10);
        final Function function =
                new Function(
                        FUNC_REVOKEROLE,
                        Arrays.<Type>asList(),
                        Arrays.<TypeReference<?>>asList(
                                new TypeReference<Bytes32>() {}, new TypeReference<Address>() {}));
        List<Type> results =
                this.functionReturnDecoder.decode(data, function.getOutputParameters());
        return new Tuple2<byte[], String>(
                (byte[]) results.get(0).getValue(), (String) results.get(1).getValue());
    }

    public TransactionReceipt revokeUserManagePermission(String bid) {
        final Function function =
                new Function(
                        FUNC_REVOKEUSERMANAGEPERMISSION,
                        Arrays.<Type>asList(
                                new org.fisco.bcos.sdk.v3.codec.datatypes.Utf8String(bid)),
                        Collections.<TypeReference<?>>emptyList(),
                        0);
        return executeTransaction(function);
    }

    public String getSignedTransactionForRevokeUserManagePermission(String bid) {
        final Function function =
                new Function(
                        FUNC_REVOKEUSERMANAGEPERMISSION,
                        Arrays.<Type>asList(
                                new org.fisco.bcos.sdk.v3.codec.datatypes.Utf8String(bid)),
                        Collections.<TypeReference<?>>emptyList(),
                        0);
        return createSignedTransaction(function);
    }

    public String revokeUserManagePermission(String bid, TransactionCallback callback) {
        final Function function =
                new Function(
                        FUNC_REVOKEUSERMANAGEPERMISSION,
                        Arrays.<Type>asList(
                                new org.fisco.bcos.sdk.v3.codec.datatypes.Utf8String(bid)),
                        Collections.<TypeReference<?>>emptyList(),
                        0);
        return asyncExecuteTransaction(function, callback);
    }

    public Tuple1<String> getRevokeUserManagePermissionInput(
            TransactionReceipt transactionReceipt) {
        String data = transactionReceipt.getInput().substring(10);
        final Function function =
                new Function(
                        FUNC_REVOKEUSERMANAGEPERMISSION,
                        Arrays.<Type>asList(),
                        Arrays.<TypeReference<?>>asList(new TypeReference<Utf8String>() {}));
        List<Type> results =
                this.functionReturnDecoder.decode(data, function.getOutputParameters());
        return new Tuple1<String>((String) results.get(0).getValue());
    }

    public TransactionReceipt setChainName(String name) {
        final Function function =
                new Function(
                        FUNC_SETCHAINNAME,
                        Arrays.<Type>asList(
                                new org.fisco.bcos.sdk.v3.codec.datatypes.Utf8String(name)),
                        Collections.<TypeReference<?>>emptyList(),
                        4);
        return executeTransaction(function);
    }

    public String getSignedTransactionForSetChainName(String name) {
        final Function function =
                new Function(
                        FUNC_SETCHAINNAME,
                        Arrays.<Type>asList(
                                new org.fisco.bcos.sdk.v3.codec.datatypes.Utf8String(name)),
                        Collections.<TypeReference<?>>emptyList(),
                        4);
        return createSignedTransaction(function);
    }

    public String setChainName(String name, TransactionCallback callback) {
        final Function function =
                new Function(
                        FUNC_SETCHAINNAME,
                        Arrays.<Type>asList(
                                new org.fisco.bcos.sdk.v3.codec.datatypes.Utf8String(name)),
                        Collections.<TypeReference<?>>emptyList(),
                        4);
        return asyncExecuteTransaction(function, callback);
    }

    public Tuple1<String> getSetChainNameInput(TransactionReceipt transactionReceipt) {
        String data = transactionReceipt.getInput().substring(10);
        final Function function =
                new Function(
                        FUNC_SETCHAINNAME,
                        Arrays.<Type>asList(),
                        Arrays.<TypeReference<?>>asList(new TypeReference<Utf8String>() {}));
        List<Type> results =
                this.functionReturnDecoder.decode(data, function.getOutputParameters());
        return new Tuple1<String>((String) results.get(0).getValue());
    }

    public TransactionReceipt setContract(String logicName, String _LogicContract) {
        final Function function =
                new Function(
                        FUNC_SETCONTRACT,
                        Arrays.<Type>asList(
                                new org.fisco.bcos.sdk.v3.codec.datatypes.Utf8String(logicName),
                                new org.fisco.bcos.sdk.v3.codec.datatypes.Address(_LogicContract)),
                        Collections.<TypeReference<?>>emptyList(),
                        0);
        return executeTransaction(function);
    }

    public String getSignedTransactionForSetContract(String logicName, String _LogicContract) {
        final Function function =
                new Function(
                        FUNC_SETCONTRACT,
                        Arrays.<Type>asList(
                                new org.fisco.bcos.sdk.v3.codec.datatypes.Utf8String(logicName),
                                new org.fisco.bcos.sdk.v3.codec.datatypes.Address(_LogicContract)),
                        Collections.<TypeReference<?>>emptyList(),
                        0);
        return createSignedTransaction(function);
    }

    public String setContract(
            String logicName, String _LogicContract, TransactionCallback callback) {
        final Function function =
                new Function(
                        FUNC_SETCONTRACT,
                        Arrays.<Type>asList(
                                new org.fisco.bcos.sdk.v3.codec.datatypes.Utf8String(logicName),
                                new org.fisco.bcos.sdk.v3.codec.datatypes.Address(_LogicContract)),
                        Collections.<TypeReference<?>>emptyList(),
                        0);
        return asyncExecuteTransaction(function, callback);
    }

    public Tuple2<String, String> getSetContractInput(TransactionReceipt transactionReceipt) {
        String data = transactionReceipt.getInput().substring(10);
        final Function function =
                new Function(
                        FUNC_SETCONTRACT,
                        Arrays.<Type>asList(),
                        Arrays.<TypeReference<?>>asList(
                                new TypeReference<Utf8String>() {},
                                new TypeReference<Address>() {}));
        List<Type> results =
                this.functionReturnDecoder.decode(data, function.getOutputParameters());
        return new Tuple2<String, String>(
                (String) results.get(0).getValue(), (String) results.get(1).getValue());
    }

    public TransactionReceipt setDataRightCategory(List<String> fields) {
        final Function function =
                new Function(
                        FUNC_SETDATARIGHTCATEGORY,
                        Arrays.<Type>asList(
                                new org.fisco.bcos.sdk.v3.codec.datatypes.DynamicArray<
                                        org.fisco.bcos.sdk.v3.codec.datatypes.Utf8String>(
                                        org.fisco.bcos.sdk.v3.codec.datatypes.Utf8String.class,
                                        org.fisco.bcos.sdk.v3.codec.Utils.typeMap(
                                                fields,
                                                org.fisco.bcos.sdk.v3.codec.datatypes.Utf8String
                                                        .class))),
                        Collections.<TypeReference<?>>emptyList(),
                        0);
        return executeTransaction(function);
    }

    public String getSignedTransactionForSetDataRightCategory(List<String> fields) {
        final Function function =
                new Function(
                        FUNC_SETDATARIGHTCATEGORY,
                        Arrays.<Type>asList(
                                new org.fisco.bcos.sdk.v3.codec.datatypes.DynamicArray<
                                        org.fisco.bcos.sdk.v3.codec.datatypes.Utf8String>(
                                        org.fisco.bcos.sdk.v3.codec.datatypes.Utf8String.class,
                                        org.fisco.bcos.sdk.v3.codec.Utils.typeMap(
                                                fields,
                                                org.fisco.bcos.sdk.v3.codec.datatypes.Utf8String
                                                        .class))),
                        Collections.<TypeReference<?>>emptyList(),
                        0);
        return createSignedTransaction(function);
    }

    public String setDataRightCategory(List<String> fields, TransactionCallback callback) {
        final Function function =
                new Function(
                        FUNC_SETDATARIGHTCATEGORY,
                        Arrays.<Type>asList(
                                new org.fisco.bcos.sdk.v3.codec.datatypes.DynamicArray<
                                        org.fisco.bcos.sdk.v3.codec.datatypes.Utf8String>(
                                        org.fisco.bcos.sdk.v3.codec.datatypes.Utf8String.class,
                                        org.fisco.bcos.sdk.v3.codec.Utils.typeMap(
                                                fields,
                                                org.fisco.bcos.sdk.v3.codec.datatypes.Utf8String
                                                        .class))),
                        Collections.<TypeReference<?>>emptyList(),
                        0);
        return asyncExecuteTransaction(function, callback);
    }

    public Tuple1<List<String>> getSetDataRightCategoryInput(
            TransactionReceipt transactionReceipt) {
        String data = transactionReceipt.getInput().substring(10);
        final Function function =
                new Function(
                        FUNC_SETDATARIGHTCATEGORY,
                        Arrays.<Type>asList(),
                        Arrays.<TypeReference<?>>asList(
                                new TypeReference<DynamicArray<Utf8String>>() {}));
        List<Type> results =
                this.functionReturnDecoder.decode(data, function.getOutputParameters());
        return new Tuple1<List<String>>(
                convertToNative((List<Utf8String>) results.get(0).getValue()));
    }

    public TransactionReceipt setDataRightSupportVariableDataFields(
            String category, List<String> fields) {
        final Function function =
                new Function(
                        FUNC_SETDATARIGHTSUPPORTVARIABLEDATAFIELDS,
                        Arrays.<Type>asList(
                                new org.fisco.bcos.sdk.v3.codec.datatypes.Utf8String(category),
                                new org.fisco.bcos.sdk.v3.codec.datatypes.DynamicArray<
                                        org.fisco.bcos.sdk.v3.codec.datatypes.Utf8String>(
                                        org.fisco.bcos.sdk.v3.codec.datatypes.Utf8String.class,
                                        org.fisco.bcos.sdk.v3.codec.Utils.typeMap(
                                                fields,
                                                org.fisco.bcos.sdk.v3.codec.datatypes.Utf8String
                                                        .class))),
                        Collections.<TypeReference<?>>emptyList(),
                        4);
        return executeTransaction(function);
    }

    public String getSignedTransactionForSetDataRightSupportVariableDataFields(
            String category, List<String> fields) {
        final Function function =
                new Function(
                        FUNC_SETDATARIGHTSUPPORTVARIABLEDATAFIELDS,
                        Arrays.<Type>asList(
                                new org.fisco.bcos.sdk.v3.codec.datatypes.Utf8String(category),
                                new org.fisco.bcos.sdk.v3.codec.datatypes.DynamicArray<
                                        org.fisco.bcos.sdk.v3.codec.datatypes.Utf8String>(
                                        org.fisco.bcos.sdk.v3.codec.datatypes.Utf8String.class,
                                        org.fisco.bcos.sdk.v3.codec.Utils.typeMap(
                                                fields,
                                                org.fisco.bcos.sdk.v3.codec.datatypes.Utf8String
                                                        .class))),
                        Collections.<TypeReference<?>>emptyList(),
                        4);
        return createSignedTransaction(function);
    }

    public String setDataRightSupportVariableDataFields(
            String category, List<String> fields, TransactionCallback callback) {
        final Function function =
                new Function(
                        FUNC_SETDATARIGHTSUPPORTVARIABLEDATAFIELDS,
                        Arrays.<Type>asList(
                                new org.fisco.bcos.sdk.v3.codec.datatypes.Utf8String(category),
                                new org.fisco.bcos.sdk.v3.codec.datatypes.DynamicArray<
                                        org.fisco.bcos.sdk.v3.codec.datatypes.Utf8String>(
                                        org.fisco.bcos.sdk.v3.codec.datatypes.Utf8String.class,
                                        org.fisco.bcos.sdk.v3.codec.Utils.typeMap(
                                                fields,
                                                org.fisco.bcos.sdk.v3.codec.datatypes.Utf8String
                                                        .class))),
                        Collections.<TypeReference<?>>emptyList(),
                        4);
        return asyncExecuteTransaction(function, callback);
    }

    public Tuple2<String, List<String>> getSetDataRightSupportVariableDataFieldsInput(
            TransactionReceipt transactionReceipt) {
        String data = transactionReceipt.getInput().substring(10);
        final Function function =
                new Function(
                        FUNC_SETDATARIGHTSUPPORTVARIABLEDATAFIELDS,
                        Arrays.<Type>asList(),
                        Arrays.<TypeReference<?>>asList(
                                new TypeReference<Utf8String>() {},
                                new TypeReference<DynamicArray<Utf8String>>() {}));
        List<Type> results =
                this.functionReturnDecoder.decode(data, function.getOutputParameters());
        return new Tuple2<String, List<String>>(
                (String) results.get(0).getValue(),
                convertToNative((List<Utf8String>) results.get(1).getValue()));
    }

    public TransactionReceipt setTextMaxLen(BigInteger len) {
        final Function function =
                new Function(
                        FUNC_SETTEXTMAXLEN,
                        Arrays.<Type>asList(
                                new org.fisco.bcos.sdk.v3.codec.datatypes.generated.Uint32(len)),
                        Collections.<TypeReference<?>>emptyList(),
                        0);
        return executeTransaction(function);
    }

    public String getSignedTransactionForSetTextMaxLen(BigInteger len) {
        final Function function =
                new Function(
                        FUNC_SETTEXTMAXLEN,
                        Arrays.<Type>asList(
                                new org.fisco.bcos.sdk.v3.codec.datatypes.generated.Uint32(len)),
                        Collections.<TypeReference<?>>emptyList(),
                        0);
        return createSignedTransaction(function);
    }

    public String setTextMaxLen(BigInteger len, TransactionCallback callback) {
        final Function function =
                new Function(
                        FUNC_SETTEXTMAXLEN,
                        Arrays.<Type>asList(
                                new org.fisco.bcos.sdk.v3.codec.datatypes.generated.Uint32(len)),
                        Collections.<TypeReference<?>>emptyList(),
                        0);
        return asyncExecuteTransaction(function, callback);
    }

    public Tuple1<BigInteger> getSetTextMaxLenInput(TransactionReceipt transactionReceipt) {
        String data = transactionReceipt.getInput().substring(10);
        final Function function =
                new Function(
                        FUNC_SETTEXTMAXLEN,
                        Arrays.<Type>asList(),
                        Arrays.<TypeReference<?>>asList(new TypeReference<Uint32>() {}));
        List<Type> results =
                this.functionReturnDecoder.decode(data, function.getOutputParameters());
        return new Tuple1<BigInteger>((BigInteger) results.get(0).getValue());
    }

    public TransactionReceipt setstrArrayMaxLen(BigInteger len) {
        final Function function =
                new Function(
                        FUNC_SETSTRARRAYMAXLEN,
                        Arrays.<Type>asList(
                                new org.fisco.bcos.sdk.v3.codec.datatypes.generated.Uint32(len)),
                        Collections.<TypeReference<?>>emptyList(),
                        0);
        return executeTransaction(function);
    }

    public String getSignedTransactionForSetstrArrayMaxLen(BigInteger len) {
        final Function function =
                new Function(
                        FUNC_SETSTRARRAYMAXLEN,
                        Arrays.<Type>asList(
                                new org.fisco.bcos.sdk.v3.codec.datatypes.generated.Uint32(len)),
                        Collections.<TypeReference<?>>emptyList(),
                        0);
        return createSignedTransaction(function);
    }

    public String setstrArrayMaxLen(BigInteger len, TransactionCallback callback) {
        final Function function =
                new Function(
                        FUNC_SETSTRARRAYMAXLEN,
                        Arrays.<Type>asList(
                                new org.fisco.bcos.sdk.v3.codec.datatypes.generated.Uint32(len)),
                        Collections.<TypeReference<?>>emptyList(),
                        0);
        return asyncExecuteTransaction(function, callback);
    }

    public Tuple1<BigInteger> getSetstrArrayMaxLenInput(TransactionReceipt transactionReceipt) {
        String data = transactionReceipt.getInput().substring(10);
        final Function function =
                new Function(
                        FUNC_SETSTRARRAYMAXLEN,
                        Arrays.<Type>asList(),
                        Arrays.<TypeReference<?>>asList(new TypeReference<Uint32>() {}));
        List<Type> results =
                this.functionReturnDecoder.decode(data, function.getOutputParameters());
        return new Tuple1<BigInteger>((BigInteger) results.get(0).getValue());
    }

    public Boolean supportsInterface(byte[] interfaceId) throws ContractException {
        final Function function =
                new Function(
                        FUNC_SUPPORTSINTERFACE,
                        Arrays.<Type>asList(
                                new org.fisco.bcos.sdk.v3.codec.datatypes.generated.Bytes4(
                                        interfaceId)),
                        Arrays.<TypeReference<?>>asList(new TypeReference<Bool>() {}));
        return executeCallWithSingleValueReturn(function, Boolean.class);
    }

    public static DAEvidenceAdminController load(
            String contractAddress, Client client, CryptoKeyPair credential) {
        return new DAEvidenceAdminController(contractAddress, client, credential);
    }

    public static DAEvidenceAdminController deploy(Client client, CryptoKeyPair credential)
            throws ContractException {
        return deploy(
                DAEvidenceAdminController.class,
                client,
                credential,
                getBinary(client.getCryptoSuite()),
                getABI(),
                null,
                null);
    }

    public static class InitializedEventResponse {
        public TransactionReceipt.Logs log;

        public BigInteger version;
    }

    public static class NewReviewEvidenceStoredEventResponse {
        public TransactionReceipt.Logs log;

        public String sender;

        public byte[] udri;

        public BigInteger index;
    }

    public static class NewRightEvidenceStoredEventResponse {
        public TransactionReceipt.Logs log;

        public String sender;

        public byte[] udri;
    }

    public static class RoleAdminChangedEventResponse {
        public TransactionReceipt.Logs log;

        public byte[] role;

        public byte[] previousAdminRole;

        public byte[] newAdminRole;
    }

    public static class RoleGrantedEventResponse {
        public TransactionReceipt.Logs log;

        public byte[] role;

        public String account;

        public String sender;
    }

    public static class RoleRevokedEventResponse {
        public TransactionReceipt.Logs log;

        public byte[] role;

        public String account;

        public String sender;
    }

    public static class UserCreatedEventResponse {
        public TransactionReceipt.Logs log;

        public String sender;

        public byte[] bid;

        public byte[] usci;
    }

    public static class UserRoleChangedEventResponse {
        public TransactionReceipt.Logs log;

        public String sender;

        public byte[] bid;
    }
}
