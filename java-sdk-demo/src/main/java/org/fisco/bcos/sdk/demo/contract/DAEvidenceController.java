package org.fisco.bcos.sdk.demo.contract;

import java.math.BigInteger;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.Collections;
import java.util.List;
import org.fisco.bcos.sdk.v3.client.Client;
import org.fisco.bcos.sdk.v3.codec.datatypes.Address;
import org.fisco.bcos.sdk.v3.codec.datatypes.Bool;
import org.fisco.bcos.sdk.v3.codec.datatypes.DynamicArray;
import org.fisco.bcos.sdk.v3.codec.datatypes.Event;
import org.fisco.bcos.sdk.v3.codec.datatypes.Function;
import org.fisco.bcos.sdk.v3.codec.datatypes.Type;
import org.fisco.bcos.sdk.v3.codec.datatypes.TypeReference;
import org.fisco.bcos.sdk.v3.codec.datatypes.Utf8String;
import org.fisco.bcos.sdk.v3.codec.datatypes.generated.Bytes32;
import org.fisco.bcos.sdk.v3.codec.datatypes.generated.Uint256;
import org.fisco.bcos.sdk.v3.codec.datatypes.generated.Uint32;
import org.fisco.bcos.sdk.v3.codec.datatypes.generated.Uint8;
import org.fisco.bcos.sdk.v3.codec.datatypes.generated.tuples.generated.Tuple1;
import org.fisco.bcos.sdk.v3.codec.datatypes.generated.tuples.generated.Tuple2;
import org.fisco.bcos.sdk.v3.codec.datatypes.generated.tuples.generated.Tuple3;
import org.fisco.bcos.sdk.v3.codec.datatypes.generated.tuples.generated.Tuple5;
import org.fisco.bcos.sdk.v3.codec.datatypes.generated.tuples.generated.Tuple6;
import org.fisco.bcos.sdk.v3.contract.Contract;
import org.fisco.bcos.sdk.v3.crypto.CryptoSuite;
import org.fisco.bcos.sdk.v3.crypto.keypair.CryptoKeyPair;
import org.fisco.bcos.sdk.v3.model.CryptoType;
import org.fisco.bcos.sdk.v3.model.TransactionReceipt;
import org.fisco.bcos.sdk.v3.model.callback.TransactionCallback;
import org.fisco.bcos.sdk.v3.transaction.model.exception.ContractException;

@SuppressWarnings("unchecked")
public class DAEvidenceController extends Contract {
    public static final String[] BINARY_ARRAY = {
        "",
        "604051610feb91906156ff565b908152604051908190036020019020546001600160a01b031661171b565b600060978360405161101b91906156ff565b90815260405190819003602001902080546001600160a01b03929092166001600160a01b03199092169190911790555050565b60006110908686868080601f01602080910402602001604051908101604052809392919081815260200183838082843760009201919091525061331992505050565b15156001146110b15760405162461bcd60e51b81526004016107279061576b565b600061110f86868080601f016020809104026020016040519081016040528093929190818152602001838380828437600092019190915250506040805180820190915260058152641c9a59da1d60da1b602082015292915050612337565b80519060200120905060006111836040518060400160405280600e81526020016d3a7265766965775f636f756e743d60901b81525086868080601f01602080910402602001604051908101604052809392919081815260200183838082843760009201919091525092939250506123379050565b9050611190888383613374565b63ffffffff1698975050505050505050565b606080606080606060006111b68888613319565b15156001146112025760405162461bcd60e51b81526020600482015260186024820152773ab23934903737ba1032bc34b9ba1037b71031b430b4b71760411b6044820152606401610727565b600061120e89896133d5565b905060006112388a8360405180604001604052806003815260200162189a5960ea1b815250613425565b905060006112678b84604051806040016040528060088152602001670c8c2e8c290c2e6d60c31b81525061347f565b60408051808201825260068082526561637469766560d01b602092830152825180840190935282526573746174757360d01b908201529091507f9651c33eb23976f7c15240e86443dc2ded40546fa9ba457a14abab4090e023b5906112cf908d908690613425565b805190602001201415935060008060006112e98e876134e3565b9450945094505050836000815181106113045761130461571b565b60200260200101519b50836001815181106113215761132161571b565b60200260200101519a506113368e878761375a565b99508198506113468e8785613792565b97505050505050509295509295509295565b60408051600480825260a0820190925260609160009190816020015b60608152602001906001900390816113745790505090506040518060400160405280600b81526020016a3230ba30afb437b63232b960a91b815250816000815181106113c2576113c261571b565b6020026020010181905250604051806040016040528060088152602001673932bb34b2bbb2b960c11b815250816001815181106114015761140161571b565b602002602001018190525060405180604001604052806008815260200167726567697374727960c01b815250816002815181106114405761144061571b565b602002602001018190525060405180604001604052806008815260200167706c6174666f726d60c01b8152508160038151811061147f5761147f61571b565b6020908102919091010152919050565b610afe81336139bc565b6114a38383613a15565b15156001146114c45760405162461bcd60e51b815260040161072790615797565b60006114d08484613a45565b905060005b82518163ffffffff161015610d3f5761156361154961153e858463ffffffff16815181106115055761150561571b565b60200260200101516040518060400160405280600a8152602001693ab9b2b92fb937b6329d60b11b81525061233790919063ffffffff16565b805160209091012090565b604080516020810190915260008152600585019190613a6f565b508061156e81615747565b9150506114d5565b606060006115ba8585858080601f016020809104026020016040519081016040528093929190818152602001838380828437600092019190915250613a8b92505050565b90506105d68582604051806040016040528060048152602001637564726960e01b815250613425565b6115ed8282610b66565b61073a5760008281526065602090815260408083206001600160a01b03851684529091529020805460ff191660011790556116253390565b6001600160a01b0316816001600160a01b0316837f2f8788117e7eff1d82e926ec794901d17c78024a50270940304540a733656f0d60405160405180910390a45050565b60006116ab8484848080601f016020809104026020016040519081016040528093929190818152602001838380828437600092019190915250613a1592505050565b15156001146116cc5760405162461bcd60e51b8152600401610727906157c0565b600061170e8585858080601f016020809104026020016040519081016040528093929190818152602001838380828437600092019190915250613a4592505050565b6003015495945050505050565b6117258282610b66565b1561073a5760008281526065602090815260408083206001600160a01b0385168085529252808320805460ff1916905551339285917ff6391f5c32d9c69d2a47ea670b442974b53935d1edc7fd64eb21e047a839171b9190a45050565b60008061179060c933613aac565b90925090506001821515146117e35760405162461bcd60e51b815260206004820152601960248201527829b2b73232b91034b9903737ba103932b3b4b9ba32b932b21760391b6044820152606401610727565b60006117f060c983613a45565b905061185e60405180604001604052806005815260200164195e1a5cdd60da1b81525061185861184e61153e886040518060400160405280600a8152602001693ab9b2b92fb937b6329d60b11b81525061233790919063ffffffff16565b6005850190613b64565b90613c07565b15156001146118c45760405162461bcd60e51b815260206004820152602c60248201527f5573657220776974686f757420636f72726573706f6e64696e6720726f6c652060448201526b3832b936b4b9b9b4b7b7399760a11b6064820152608401610727565b50505050565b6118d48383613319565b15156001146118f55760405162461bcd60e51b81526004016107279061576b565b6040805180820190915260058152641c9a59da1d60da1b602082015260009061191e9084612337565b80519060200120905060006119626040518060400160405280600e81526020016d3a7265766965775f636f756e743d60901b8152508461233790919063ffffffff16565b90506000611971868484613374565b905060005b8163ffffffff168163ffffffff161015610dea5760006119d461199e8363ffffffff16613c2c565b60408051808201909152600e81526d1d3932bb34b2bb9d34b73232bc1d60911b60208201526119ce908990612337565b90612337565b905060006119e3898784613cc8565b9050611a2f89826040518060400160405280600681526020016573746174757360d01b81525060405180604001604052806008815260200167191a5cd8589b195960c21b815250613d29565b50508080611a3c90615747565b915050611976565b6060611a508484613319565b1515600114611a9c5760405162461bcd60e51b81526020600482015260186024820152773ab23934903737ba1032bc34b9ba1037b71031b430b4b71760411b6044820152606401610727565b6000611aa885856133d5565b90506000611ab586613d51565b90506000805b82518163ffffffff161015611b1f57611af5888588868563ffffffff1681518110611ae857611ae861571b565b6020026020010151613dad565b151560011415611b0d57611b0a6001836157ed565b91505b80611b1781615747565b915050611abb565b5063ffffffff811615611c265760008163ffffffff166001600160401b03811115611b4c57611b4c614e53565b604051908082528060200260200182016040528015611b7f57816020015b6060815260200190600190039081611b6a5790505b5090506000805b84518163ffffffff161015611c2057611bb38a878a888563ffffffff1681518110611ae857611ae861571b565b151560011415611c0e57848163ffffffff1681518110611bd557611bd561571b565b6020026020010151838363ffffffff1681518110611bf557611bf561571b565b6020908102919091010152611c0b6001836157ed565b91505b80611c1881615747565b915050611b86565b50909450505b5050509392505050565b6000611c7a6040518060400160405280602081526020017f3a7661726961626c655f646174613a737570706f727465645f66696c6564733d8152508461233790919063ffffffff16565b805160208201209091506000611c936004870183612253565b905060005b81518163ffffffff161015611d34576000611ce6604051806040016040528060128152602001717661726961626c655f646174613a6b65793d60701b8152508861233790919063ffffffff16565b90506000611d05878463ffffffff1681518110610c5c57610c5c61571b565b80516020909101209050611d1e60068a01826000612363565b5050508080611d2c90615747565b915050611c98565b5060005b84518163ffffffff161015611dd4576000611d86604051806040016040528060128152602001717661726961626c655f646174613a6b65793d60701b8152508861233790919063ffffffff16565b90506000611da5878463ffffffff1681518110610c5c57610c5c61571b565b80516020909101209050611dbe60068a01826001612363565b5050508080611dcc90615747565b915050611d38565b50610dea60048701838661238f565b6000611e258484848080601f01602080910402602001604051908101604052809392919081815260200183838082843760009201919091525061331992505050565b1515600114611e465760405162461bcd60e51b81526004016107279061576b565b6000611ea484848080601f016020809104026020016040519081016040528093929190818152602001838380828437600092019190915250506040805180820190915260058152641c9a59da1d60da1b602082015292915050612337565b805190602001209050611edd85826040518060400160405280600d81526020016c7265766965775f636f756e743d60981b815250613374565b63ffffffff1695945050505050565b6040805180820190915260058152641c9a59da1d60da1b6020820152600090611f159083612337565b80516020909101209050600080611f2d60c933613aac565b9092509050600182151514611f805760405162461bcd60e51b815260206004820152601960248201527829b2b73232b91034b9903737ba103932b3b4b9ba32b932b21760391b6044820152606401610727565b6000611f8d60c985613e3f565b9050806008015460001415611fdd5760405162461bcd60e51b815260206004820152601660248201527532bb34b232b731b29034b9903737ba1032bc34b9ba1760511b6044820152606401610727565b60",
        "",
        "",
        "5260005b82518163ffffffff161015610e39576000614029848363ffffffff168151811061400e5761400e61571b565b60200260200101516119ce878661233790919063ffffffff16565b905061404687878360405180602001604052806000815250613d29565b508061405181615747565b915050613fe2565b60606105c08261406884614a73565b600101614add565b6000908152602091909152604090205490565b6000805b82518163ffffffff1610156140fd5760006140d7848363ffffffff16815181106140b3576140b361571b565b6020026020010151805190602001208660040160030161407090919063ffffffff16565b905080156140ea576001925050506105c0565b50806140f581615747565b915050614087565b5060009392505050565b60008151116141445760405162461bcd60e51b81526020600482015260096024820152683134b21032b93937b960b91b6044820152606401610727565b61414e8282613a15565b151560011461073a5760405162461bcd60e51b815260206004820152601e60248201527f626974206e6f74207265676973746572206f6e207468697320636861696e00006044820152606401610727565b60008481526002860160205260409020600801541561420c5760405162461bcd60e51b8152602060048201526024808201527f45766964656e636553746f726167653a207564726920616c72656164792065786044820152636973747360e01b6064820152608401610727565b60008481526002860160209081526040909120845161422d92860190614c34565b5060008481526002860160209081526040909120835161425592600590920191850190614cb8565b5060008481526002860160209081526040909120825161427d92600690920191840190614cb8565b50505060009182525060029091016020526040902042600890910155565b610d3f828051906020012082866002016000878152602001908152602001600020600101614bc69092919063ffffffff16565b60005b82518163ffffffff1610156118c457614325838263ffffffff16815181106142fb576142fb61571b565b60209081029190910181015180519082012060009081526007870190915260409020839055600190565b508061433081615747565b9150506142d1565b60408051808201909152600a8152693230ba30a934b3b43a1d60b11b602082015260005b82518163ffffffff1610156143c6576000614388848363ffffffff168151811061400e5761400e61571b565b90506143b387878360405180604001604052806005815260200164195e1a5cdd60da1b815250613d29565b50806143be81615747565b91505061435c565b50610d3f85856143d68487612337565b8561429b565b6040805180820190915260048152637564726960e01b60208201526118c4906144059084612337565b805160209182012060009081526007860190915260409020829055600190565b6000846001018460405161443991906156ff565b908152604080516020928190038301902060008681526006820190935291208390559050600381015461446d9060016158cf565b60039091015550505050565b60606105c08261406881614a73565b6000828152600384016020526040902054156144f25760405162461bcd60e51b815260206004820152602360248201527f45766964656e636553746f726167653a2062696420616c72656164792065786960448201526273747360e81b6064820152608401610727565b600091825260039092016020526040902055565b846001018460405161451891906156ff565b9081526020016040518091039020600801546000146145795760405162461bcd60e51b815260206004820152601f60248201527f5573657253746f726167653a2062696420616c726561647920657869737473006044820152606401610727565b6001600160a01b0381166000908152602086905260409020805461459c9061586e565b1590506145fb5760405162461bcd60e51b815260206004820152602760248201527f45766964656e636553746f726167653a206163636f756e7420616c72656164796044820152662065786973747360c81b6064820152608401610727565b6000856001018560405161460f91906156ff565b9081526020016040518091039020905084816000019080519060200190614637929190614c34565b50835161464d9060018301906020870190614c34565b5082516146639060028301906020860190614c34565b506000600382018190556004820180546001600160a01b0319166001600160a01b0385169081179091554260088401558152602087815260409091208651610dea92880190614c34565b610d3f828051906020012082866002016000878152602001908152602001600020600301614bf69092919063ffffffff16565b610d3f828051906020012082866002016000878152602001908152602001600020600401614c039092919063ffffffff16565b6000908152602091909152604090205463ffffffff1690565b60606105c06001600160a01b03831660145b6060600061474d8360026159e7565b6147589060026158cf565b6001600160401b0381111561476f5761476f614e53565b6040519080825280601f01601f191660200182016040528015614799576020820181803683370190505b509050600360fc1b816000815181106147b4576147b461571b565b60200101906001600160f81b031916908160001a905350600f60fb1b816001815181106147e3576147e361571b565b60200101906001600160f81b031916908160001a90535060006148078460026159e7565b6148129060016158cf565b90505b600181111561488a576f181899199a1a9b1b9c1cb0b131b232b360811b85600f16601081106148465761484661571b565b1a60f81b82828151811061485c5761485c61571b565b60200101906001600160f81b031916908160001a90535060049490941c9361488381615a06565b9050614815565b5083156106815760405162461bcd60e51b815260206004820181905260248201527f537472696e67733a20686578206c656e67746820696e73756666696369656e746044820152606401610727565b60008072184f03e93ff9f4daa797ed6e38ed64bf6a1f0160401b83106149185772184f03e93ff9f4daa797ed6e38ed64bf6a1f0160401b830492506040015b6d04ee2d6d415b85acef81000000008310614944576d04ee2d6d415b85acef8100000000830492506020015b662386f26fc10000831061496257662386f26fc10000830492506010015b6305f5e100831061497a576305f5e100830492506008015b612710831061498e57612710830492506004015b606483106149a0576064830492506002015b600a83106105c05760010192915050565b60006149bd8484614c1b565b6149e85760008381526020858152604090912083516149de92850190614c34565b5060019050610681565b506000610681565b600080614a34836119ce604051806040016040528060128152602001717661726961626c655f646174613a6b65793d60701b8152508761233790919063ffffffff16565b80516020820120909150614a5f60068701826000908152602091909152604090205463ffffffff1690565b63ffffffff16600114925050509392505050565b600080608083901c15614a8b5760809290921c916010015b604083901c15614aa05760409290921c916008015b602083901c15614ab55760209290921c916004015b601083901c15614aca5760109290921c916002015b600883901c156105c05760010192915050565b6060826000614aed8460026159e7565b6001600160401b03811115614b0457614b04614e53565b6040519080825280601f01601f191660200182016040528015614b2e576020820181803683370190505b5090506000614b3e8560026159e7565b90505b8015614bbd576f181899199a1a9b1b9c1cb0b131b232b360811b83600f1660108110614b6f57614b6f61571b565b1a60f81b82614b7f600184615a1d565b81518110614b8f57614b8f61571b565b60200101906001600160f81b031916908160001a90535060049290921c91614bb681615a06565b9050614b41565b50949350505050565b6000828152602084905260408120546149e85760008381526020858152604090912083516149de92850190614cb8565b6000610d55848484612363565b60008281526020849052604081208290556001610d55565b6000818152602083905260408120805461336a9061586e565b828054614c409061586e565b90600052602060002090601f016020900481019282614c625760008555614ca8565b82601f10614c7b57805160ff1916838001178555614ca8565b82800160010185558215614ca8579182015b82811115614ca8578251825591602001919060010190614c8d565b50614cb4929150614d11565b5090565b828054828255906000526020600020908101928215614d05579160200282015b82811115614d055782518051614cf5918491602090910190614c34565b5091602001919060010190614cd8565b50614cb4929150614d26565b5b80821115614cb45760008155600101614d12565b80821115614cb4576000614d3a8282614d43565b50600101614d26565b508054614d4f9061586e565b6000825580601f10614d5f575050565b601f016020900490600052602060002090810190610afe9190614d11565b600060208284031215614d8f57600080fd5b81356001600160e01b03198116811461068157600080fd5b60008083601f840112614db957600080fd5b5081356001600160401b03811115614dd057600080fd5b602083019150836020828501011115613b5d57600080fd5b60008060008060408587031215614dfe57600080fd5b84356001600160401b0380821115614e1557600080fd5b614e2188838901614da7565b90965094506020870135915080821115614e3a57600080fd5b50614e4787828801614da7565b95989497509550505050565b634e487b7160e01b600052604160045260246000fd5b604051601f8201601f191681016001600160401b0381118282101715614e9157614e91614e53565b604052919050565b600082601f830112614eaa57600080fd5b81356001600160401b03811115614ec357614ec3614e53565b614ed6601f8201601f1916602001614e69565b818152846020838601011115614eeb57600080fd5b816020850160208301376000918101602001919091529392505050565b600060208284031215614f1a57600080fd5b81356001600160401b03811115614f3057600080fd5b610d5584828501614e99565b60005b83811015614f57578181015183820152602001614f3f565b838111156118c45750506000910152565b60008151808452614f80816020860160208601614f3c565b601f01601f19169290920160200192915050565b600082825180855260208086019550808260051b84010181860160005b84811015614fdf57601f19868403018952614fcd838351614f68565b98840198925090830190600101614fb156",
        "5b5090979650505050505050565b60c081526000614fff60c0830189614f68565b82810360208401526150118189614f68565b905082810360408401526150258188614f94565b905082810360608401526150398187614f94565b9050828103608084015261504d8186614f94565b91505082151560a0830152979650505050505050565b6020815260006106816020830184614f94565b803563ffffffff811681146108cc57600080fd5b60006020828403121561509c57600080fd5b61068182615076565b600082601f8301126150b657600080fd5b813560206001600160401b03808311156150d2576150d2614e53565b8260051b6150e1838201614e69565b93845285810183019383810190888611156150fb57600080fd5b84880192505b85831015615137578235848111156151195760008081fd5b6151278a87838c0101614e99565b8352509184019190840190615101565b98975050505050505050565b6000806040838503121561515657600080fd5b82356001600160401b038082111561516d57600080fd5b61517986838701614e99565b9350602085013591508082111561518f57600080fd5b5061519c858286016150a5565b9150509250929050565b6000602082840312156151b857600080fd5b5035919050565b600080602083850312156151d257600080fd5b82356001600160401b038111156151e857600080fd5b6151f485828601614da7565b90969095509350505050565b6020815260006106816020830184614f68565b80356001600160a01b03811681146108cc57600080fd5b6000806040838503121561523d57600080fd5b82359150612c1b60208401615213565b6000806040838503121561526057600080fd5b82356001600160401b038082111561527757600080fd5b61528386838701614e99565b9350602085013591508082111561529957600080fd5b5061519c85828601614e99565b600080604083850312156152b957600080fd5b82356001600160401b038111156152cf57600080fd5b6152db85828601614e99565b925050612c1b60208401615213565b6000602082840312156152fc57600080fd5b81356001600160401b0381111561531257600080fd5b610d55848285016150a5565b60008060006060848603121561533357600080fd5b83356001600160401b0381111561534957600080fd5b61535586828701614e99565b9660208601359650604090950135949350505050565b60608152600061537e6060830186614f68565b82810360208401526153908186614f68565b905082810360408401526153a48185614f94565b9695505050505050565b60008060008060008060c087890312156153c757600080fd5b86356001600160401b03808211156153de57600080fd5b6153ea8a838b01614e99565b9750602089013591508082111561540057600080fd5b61540c8a838b01614e99565b9650604089013591508082111561542257600080fd5b61542e8a838b016150a5565b9550606089013591508082111561544457600080fd5b6154508a838b016150a5565b9450608089013591508082111561546657600080fd5b6154728a838b016150a5565b935060a089013591508082111561548857600080fd5b5061549589828a016150a5565b9150509295509295509295565b600080600080600060a086880312156154ba57600080fd5b85356001600160401b03808211156154d157600080fd5b6154dd89838a01614e99565b965060208801359150808211156154f357600080fd5b6154ff89838a01614e99565b9550604088013591508082111561551557600080fd5b61552189838a01614e99565b945061552f60608901615213565b9350608088013591508082111561554557600080fd5b50615552888289016150a5565b9150509295509295909350565b60008060006060848603121561557457600080fd5b83356001600160401b038082111561558b57600080fd5b61559787838801614e99565b945060208601359150808211156155ad57600080fd5b6155b987838801614e99565b935060408601359150808211156155cf57600080fd5b506155dc868287016150a5565b9150509250925092565b6000806000604084860312156155fb57600080fd5b83356001600160401b0381111561561157600080fd5b61561d86828701614da7565b9094509250615630905060208501615076565b90509250925092565b60608152600061564c6060830186614f68565b82810360208401526153908186614f94565b600080600080600060a0868803121561567657600080fd5b85356001600160401b038082111561568d57600080fd5b61569989838a01614e99565b965060208801359150808211156156af57600080fd5b6156bb89838a01614e99565b955060408801359150808211156156d157600080fd5b6156dd89838a016150a5565b945060608801359150808211156156f357600080fd5b61552f89838a016150a5565b60008251615711818460208701614f3c565b9190910192915050565b634e487b7160e01b600052603260045260246000fd5b634e487b7160e01b600052601160045260246000fd5b600063ffffffff8083168181141561576157615761615731565b6001019392505050565b6020808252601290820152713ab23934903737ba1037b71031b430b4b71760711b604082015260600190565b6020808252600f908201526e2ab9b2b9103737ba1032bc34b9ba1760891b604082015260600190565b6020808252601390820152722ab9b2b91030b63932b0b23c9032bc34b9ba1760691b604082015260600190565b600063ffffffff80831681851680830382111561580c5761580c615731565b01949350505050565b60008261583257634e487b7160e01b600052601260045260246000fd5b500690565b60208082526019908201527f7661726961626c6544617461206c656e677468206572726f7200000000000000604082015260600190565b600181811c9082168061588257607f821691505b602082108114156158a357634e487b7160e01b600052602260045260246000fd5b50919050565b600083516158bb818460208801614f3c565b83519083019061580c818360208801614f3c565b600082198211156158e2576158e2615731565b500190565b60006000198214156158fb576158fb615731565b5060010190565b60208082526024908201527f45766964656e636553746f726167653a2045766964656e6365206e6f742065786040820152636973747360e01b606082015260800190565b600063ffffffff8083168185168183048111821515161561596957615969615731565b02949350505050565b7f416363657373436f6e74726f6c3a206163636f756e74200000000000000000008152600083516159aa816017850160208801614f3c565b7001034b99036b4b9b9b4b733903937b6329607d1b60179184019182015283516159db816028840160208801614f3c565b01602801949350505050565b6000816000190483118215151615615a0157615a01615731565b500290565b600081615a1557615a15615731565b506000190190565b600082821015615a2f57615a2f615731565b50039056fe22f59c2f02edbae5c421247f029fe3112c5a85f70b4a48f5d93b22ada9ea772ea26469706673582212209d7b8858690b66dcbafb662b24cd4724cadc28565b9f86cc05de8b2797d1f88264736f6c634300080b0033"
    };

    public static final String BINARY =
            org.fisco.bcos.sdk.v3.utils.StringUtils.joinAll("", BINARY_ARRAY);

    public static final String[] SM_BINARY_ARRAY = {
        "",
        "",
        "",
        "9081815260200183838082843760009201919091525061468792505050565b9050610fa38582604051806040016040528060048152602001637564726960e01b815250613b55565b61064f8282611d89565b606080606080606060006130448888613626565b151560011461309157604051636381e58960e11b81526020600482015260186024820152773ab23934903737ba1032bc34b9ba1037b71031b430b4b71760411b604482015260640161063c565b600061309d8989613c4b565b905060006130c78a8360405180604001604052806003815260200162189a5960ea1b815250613b55565b905060006130f68b84604051806040016040528060088152602001670c8c2e8c290c2e6d60c31b8152506146a8565b60408051808201825260068082526561637469766560d01b602092830152825180840190935282526573746174757360d01b908201529091507f263066cab4abd1a0e00c12b937c3a5c7a4b2c4f9819ea7b491788bb7bb69fcd69061315e908d908690613b55565b805190602001201415935060008060006131788e87613eb1565b94509450945050508360008151811061319357613193615732565b60200260200101519b50836001815181106131b0576131b0615732565b60200260200101519a506131c58e878761470d565b99508198506131d58e8785614128565b97505050505050509295509295509295565b60006132298686868080601f01602080910402602001604051908101604052809392919081815260200183838082843760009201919091525061362692505050565b151560011461324b57604051636381e58960e11b815260040161063c906157c7565b60006132a986868080601f016020809104026020016040519081016040528093929190818152602001838380828437600092019190915250506040805180820190915260058152641c9a59da1d60da1b6020820152929150506124f9565b805190602001209050600061331d6040518060400160405280600e81526020016d3a7265766965775f636f756e743d60901b81525086868080601f01602080910402602001604051908101604052809392919081815260200183838082843760009201919091525092939250506124f99050565b905061332a8883836137d9565b63ffffffff1698975050505050505050565b6133468282610d86565b61064f5761335381614745565b61335e836020614757565b60405160200161336f929190615935565b60408051601f1981840301815290829052636381e58960e11b825261063c916004016155fa565b600082600101826040516133aa9190615782565b9081526040519081900360200190206008015415159392505050565b600082600101826040516133da9190615782565b9081526020016040518091039020905092915050565b6000828152602084815260408220835161256d92850190614c67565b6001600160a01b03811660009081526020839052604081208054606091839161343490615874565b80601f016020809104026020016040519081016040528092919081815260200182805461346090615874565b80156134ad5780601f10613482576101008083540402835291602001916134ad565b820191906000526020600020905b81548152906001019060200180831161349057829003601f168201915b5050835115159650929450505050505b9250929050565b60008181526020839052604090208054606091906134e190615874565b80601f016020809104026020016040519081016040528092919081815260200182805461350d90615874565b801561355a5780601f1061352f5761010080835404028352916020019161355a565b820191906000526020600020905b81548152906001019060200180831161353d57829003601f168201915b5050505050905092915050565b60008151835114801561073f5750508051602091820120825192909101919091201490565b60008151116135ca57604051636381e58960e11b81526020600482015260096024820152683134b21032b93937b960b91b604482015260640161063c565b6135d48282613396565b151560011461064f57604051636381e58960e11b815260206004820152601e60248201527f626974206e6f74207265676973746572206f6e207468697320636861696e0000604482015260640161063c565b60008061367761365b84604051806040016040528060048152602001637564726960e01b8152506124f990919063ffffffff16565b8051602091820120600090815260078701909152604090205490565b1515949350505050565b6000848152600286016020526040902060080154156136ef57604051636381e58960e11b8152602060048201526024808201527f45766964656e636553746f726167653a207564726920616c72656164792065786044820152636973747360e01b606482015260840161063c565b60008481526002860160209081526040909120845161371092860190614c67565b5060008481526002860160209081526040909120835161373892600590920191850190614ceb565b5060008481526002860160209081526040909120825161376092600690920191840190614ceb565b50505060009182525060029091016020526040902042600890910155565b815160208084019190912060008581526002808801909352604090206109d3920190836148f3565b6109d38280519060200120828660020160008781526020019081526020016000206001016149329092919063ffffffff16565b600082815260028401602052604081206008015461380a57604051636381e58960e11b815260040161063c906159aa565b61080e828051906020012085600201600086815260200190815260200160002060030161496290919063ffffffff16565b6109d382805190602001208286600201600087815260200190815260200160002060030161497b9092919063ffffffff16565b6060600061387b83614988565b60010190506000816001600160401b0381111561389a5761389a614db0565b6040519080825280601f01601f1916602001820160405280156138c4576020820181803683370190505b5090508181016020015b600019016f181899199a1a9b1b9c1cb0b131b232b360811b600a86061a8153600a85049450846138fd57613902565b6138ce565b509392505050565b6109d3828051906020012082866002016000878152602001908152602001600020600401614a609092919063ffffffff16565b6002815161394b919061581b565b1561396957604051636381e58960e11b815260040161063c9061583d565b60006139758585613b0e565b905060005b82518163ffffffff1610156106c1576000838263ffffffff16815181106139a3576139a3615732565b602002602001015190506000848360016139bd91906157f3565b63ffffffff16815181106139d3576139d3615732565b602002602001015190506139e8888784614a78565b1515600114613a4b57604051636381e58960e11b815260206004820152602860248201527f50617274206f66207661726961626c6544617461206669656c64206973206e6f6044820152673a1030b63637bbb760c11b606482015260840161063c565b81516020830120613a61906007860190836133f0565b505050600281613a7191906157f3565b905061397a565b60606105c982613a8781614afb565b600101614b65565b600082815260038401602052604090205415613afa57604051636381e58960e11b815260206004820152602360248201527f45766964656e636553746f726167653a2062696420616c72656164792065786960448201526273747360e81b606482015260840161063c565b600091825260039092016020526040902055565b6000818152600283016020526040812060080154613b3f57604051636381e58960e11b815260040161063c906159aa565b5060009081526002919091016020526040902090565b6000828152600284016020526040902060080154606090613b8957604051636381e58960e11b815260040161063c906159aa565b8151602080840191909120600085815260028088019093526040902061080e9201906134c4565b60408051808201909152600a8152693230ba30a934b3b43a1d60b11b602082015260005b82518163ffffffff1610156106c1576000613c1b848363ffffffff1681518110613c0057613c00615732565b602002602001015161160887866124f990919063ffffffff16565b9050613c388787836040518060200160405280600081525061377e565b5080613c438161575e565b915050613bd4565b600061073f613c7f83604051806040016040528060048152602001637564726960e01b8152506124f990919063ffffffff16565b8051602091820120600090815260078601909152604090205490565b6040805180820190915260148152733230ba30afb934b3b43a2fb1b0ba32b3b7b93c9d60611b60209091015260607f1ef121f667bed00cfcfc37c32099dffa7438068261cb3a514d9463678184448261073f6004840182612415565b60408051808201909152600a8152693230ba30a934b3b43a1d60b11b602082015260009081613d2a8461160884886124f9565b90506000613d39888884613b55565b604080518082019091526005815264195e1a5cdd60da1b60209182015281519101207f333682e8896f9ac5ad40b64ca8defda834eba071426a71626de981219247a47e1498975050505050505050565b60606105c982613a8784614afb565b6000908152602091909152604090205490565b6000828152600284016020526040812060080154613ddc57604051636381e58960e11b815260040161063c906159aa565b61080e8280519060200120856002016000868152602001908152602001600020600401613d9890919063ffffffff16565b60408051808201909152600a8152693230ba30a934b3b43a1d60b11b602082015260005b82518163ffffffff161015613e9b576000613e5d848363ffffffff1681518110613c0057613c00615732565b9050613e8887878360405180604001604052806005815260200164195e1a5cdd60da1b81525061377e565b5080613e938161575e565b915050613e31565b506109d38585613eab84876124f9565b856137a6565b600081815260028301602052604081206008810154815483926060928392839291801515918390600582019060068301908390613eed90615874565b80601f0160208091040260200160405190810160405280929190818152602001828054613f1990615874565b8015613f665780601f10613f3b57610100808354040283529160200191613f66565b820191906000526020600020905b815481529060010190602001808311613f4957829003601f168201915b5050505050925081805480602002602001604051908101604052809291908181526020016000905b8282101561403a578382906000526020600020018054613fad90615874565b80601f0160208091040260200160405190810160405280929190818152602001828054613fd990615874565b8015614026",
        "",
        "601f01601f19169290920160200192915050565b600082825180855260208086019550808260051b84010181860160005b8481101561503d57601f1986840301895261502b838351614fc6565b9884019892509083019060010161500f565b5090979650505050505050565b60208152600061073f6020830184614ff2565b80356001600160a01b038116811461102e57600080fd5b6000806040838503121561508757600080fd5b823591506117896020840161505d565b600080600080600060a086880312156150af57600080fd5b85356001600160401b03808211156150c657600080fd5b6150d289838a01614df6565b965060208801359150808211156150e857600080fd5b6150f489838a01614df6565b9550604088013591508082111561510a57600080fd5b61511689838a01614e65565b9450606088013591508082111561512c57600080fd5b61513889838a01614e65565b9350608088013591508082111561514e57600080fd5b5061515b88828901614e65565b9150509295509295909350565b6000806040838503121561517b57600080fd5b82356001600160401b038082111561519257600080fd5b61519e86838701614df6565b935060208501359150808211156151b457600080fd5b50614f5c85828601614df6565b803563ffffffff8116811461102e57600080fd5b6000602082840312156151e757600080fd5b61073f826151c1565b60008083601f84011261520257600080fd5b5081356001600160401b0381111561521957600080fd5b6020830191508360208285010111156134bd57600080fd5b6000806020838503121561524457600080fd5b82356001600160401b0381111561525a57600080fd5b615266858286016151f0565b90969095509350505050565b6060815260006152856060830186614fc6565b82810360208401526152978186614fc6565b905082810360408401526152ab8185614ff2565b9695505050505050565b6000806000606084860312156152ca57600080fd5b83356001600160401b038111156152e057600080fd5b6152ec86828701614df6565b9660208601359650604090950135949350505050565b60006020828403121561531457600080fd5b81356001600160401b0381111561532a57600080fd5b61080e84828501614e65565b60008060006060848603121561534b57600080fd5b83356001600160401b038082111561536257600080fd5b61536e87838801614df6565b9450602086013591508082111561538457600080fd5b61539087838801614df6565b935060408601359150808211156153a657600080fd5b506153b386828701614e65565b9150509250925092565b600080604083850312156153d057600080fd5b82356001600160401b038111156153e657600080fd5b6153f285828601614df6565b9250506117896020840161505d565b60008060006040848603121561541657600080fd5b83356001600160401b0381111561542c57600080fd5b615438868287016151f0565b909450925061544b9050602085016151c1565b90509250925092565b6060815260006154676060830186614fc6565b82810360208401526152978186614ff2565b60008060008060008060c0878903121561549257600080fd5b86356001600160401b03808211156154a957600080fd5b6154b58a838b01614df6565b975060208901359150808211156154cb57600080fd5b6154d78a838b01614df6565b965060408901359150808211156154ed57600080fd5b6154f98a838b01614e65565b9550606089013591508082111561550f57600080fd5b61551b8a838b01614e65565b9450608089013591508082111561553157600080fd5b61553d8a838b01614e65565b935060a089013591508082111561555357600080fd5b5061556089828a01614e65565b9150509295509295509295565b600080600080600060a0868803121561558557600080fd5b85356001600160401b038082111561559c57600080fd5b6155a889838a01614df6565b965060208801359150808211156155be57600080fd5b6155ca89838a01614df6565b955060408801359150808211156155e057600080fd5b6155ec89838a01614df6565b94506151386060890161505d565b60208152600061073f6020830184614fc6565b60006020828403121561561f57600080fd5b81356001600160e01b03198116811461073f57600080fd5b60c08152600061564a60c0830189614fc6565b828103602084015261565c8189614fc6565b905082810360408401526156708188614ff2565b905082810360608401526156848187614ff2565b905082810360808401526156988186614ff2565b91505082151560a0830152979650505050505050565b600080600080604085870312156156c457600080fd5b84356001600160401b03808211156156db57600080fd5b6156e7888389016151f0565b9096509450602087013591508082111561570057600080fd5b5061570d878288016151f0565b95989497509550505050565b60006020828403121561572b57600080fd5b5035919050565b63b95aa35560e01b600052603260045260246000fd5b63b95aa35560e01b600052601160045260246000fd5b600063ffffffff8083168181141561577857615778615748565b6001019392505050565b60008251615794818460208701614f9a565b9190910192915050565b6020808252600f908201526e2ab9b2b9103737ba1032bc34b9ba1760891b604082015260600190565b6020808252601290820152713ab23934903737ba1037b71031b430b4b71760711b604082015260600190565b600063ffffffff80831681851680830382111561581257615812615748565b01949350505050565b6000826158385763b95aa35560e01b600052601260045260246000fd5b500690565b60208082526019908201527f7661726961626c6544617461206c656e677468206572726f7200000000000000604082015260600190565b600181811c9082168061588857607f821691505b602082108114156158a95763b95aa35560e01b600052602260045260246000fd5b50919050565b6020808252601390820152722ab9b2b91030b63932b0b23c9032bc34b9ba1760691b604082015260600190565b600082198211156158ef576158ef615748565b500190565b600060001982141561590857615908615748565b5060010190565b60008351615921818460208801614f9a565b835190830190615812818360208801614f9a565b7f416363657373436f6e74726f6c3a206163636f756e742000000000000000000081526000835161596d816017850160208801614f9a565b7001034b99036b4b9b9b4b733903937b6329607d1b601791840191820152835161599e816028840160208801614f9a565b01602801949350505050565b60208082526024908201527f45766964656e636553746f726167653a2045766964656e6365206e6f742065786040820152636973747360e01b606082015260800190565b600063ffffffff80831681851681830481118215151615615a1157615a11615748565b02949350505050565b6000816000190483118215151615615a3457615a34615748565b500290565b600081615a4857615a48615748565b506000190190565b600082821015615a6257615a62615748565b50039056fecda5c054d055f48a2866e1a28d72f8145e422f1db1872bc4c9fe2888702c9f8da26469706673582212203858fcea230f6834cceec7f5c32ee9fa2a752d222291247df18bf8fd006df21a64736f6c634300080b0033"
    };

    public static final String SM_BINARY =
            org.fisco.bcos.sdk.v3.utils.StringUtils.joinAll("", SM_BINARY_ARRAY);

    public static final String[] ABI_ARRAY = {
        "[{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"string\",\"name\":\"eid\",\"type\":\"string\"}],\"name\":\"EvidenceCommStored\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"string\",\"name\":\"udri\",\"type\":\"string\"},{\"indexed\":true,\"internalType\":\"string\",\"name\":\"usci\",\"type\":\"string\"}],\"name\":\"EvidenceStored\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint8\",\"name\":\"version\",\"type\":\"uint8\"}],\"name\":\"Initialized\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"previousAdminRole\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"newAdminRole\",\"type\":\"bytes32\"}],\"name\":\"RoleAdminChanged\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"}],\"name\":\"RoleGranted\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"}],\"name\":\"RoleRevoked\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"string\",\"name\":\"bid\",\"type\":\"string\"},{\"indexed\":true,\"internalType\":\"string\",\"name\":\"usci\",\"type\":\"string\"}],\"name\":\"UserCreated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"string\",\"name\":\"bid\",\"type\":\"string\"}],\"name\":\"UserRoleChanged\",\"type\":\"event\"},{\"conflictFields\":[{\"kind\":5}],\"inputs\":[],\"name\":\"DEFAULT_ADMIN_ROLE\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"selector\":[2719481311,456278200],\"stateMutability\":\"view\",\"type\":\"function\"},{\"conflictFields\":[{\"kind\":5}],\"inputs\":[],\"name\":\"USERMANAGE_ROLE\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"selector\":[852968231,3061267160],\"stateMutability\":\"view\",\"type\":\"function\"},{\"conflictFields\":[{\"kind\":0},{\"kind\":2,\"slot\":201,\"value\":[0]}],\"inputs\":[{\"internalType\":\"string\",\"name\":\"udri\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"bid\",\"type\":\"string\"},{\"internalType\":\"string[]\",\"name\":\"dataHash\",\"type\":\"string[]\"},{\"internalType\":\"string[]\",\"name\":\"dataRight\",\"type\":\"string[]\"},{\"internalType\":\"string[]\",\"name\":\"metaData\",\"type\":\"string[]\"},{\"internalType\":\"string[]\",\"name\":\"variableData\",\"type\":\"string[]\"}],\"name\":\"addDataRightEvidence\",\"outputs\":[],\"selector\":[2635209621,3623663505],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"conflictFields\":[{\"kind\":0},{\"kind\":2,\"slot\":201,\"value\":[0]}],\"inputs\":[{\"internalType\":\"string\",\"name\":\"udri\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"reviewerBid\",\"type\":\"string\"},{\"internalType\":\"string[]\",\"name\":\"reviewDataHash\",\"type\":\"string[]\"},{\"internalType\":\"string[]\",\"name\":\"metaData\",\"type\":\"string[]\"},{\"internalType\":\"string[]\",\"name\":\"variableData\",\"type\":\"string[]\"}],\"name\":\"addReviewEvidence\",\"outputs\":[],\"selector\":[4024293368,766756406],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"conflictFields\":[{\"kind\":0}],\"inputs\":[{\"internalType\":\"string\",\"name\":\"bid\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"usci\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"name\",\"type\":\"string\"},{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"internalType\":\"string[]\",\"name\":\"roles\",\"type\":\"string[]\"}],\"name\":\"addUser\",\"outputs\":[],\"selector\":[3239424820,3652011643],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"conflictFields\":[{\"kind\":0},{\"kind\":2,\"slot\":201,\"value\":[0]}],\"inputs\":[{\"internalType\":\"string\",\"name\":\"udri\",\"type\":\"string\"},{\"internalType\":\"string[]\",\"name\":\"variableData\",\"type\":\"string[]\"}],\"name\":\"appendVariableData\",\"outputs\":[],\"selector\":[2138450037,1301797456],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"conflictFields\":[{\"kind\":2,\"slot\":101,\"value\":[0]},{\"kind\":4,\"value\":[1,3]}],\"inputs\":[],\"name\":\"disableAccessControl\",\"outputs\":[],\"selector\":[1980433629,2854924890],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"conflictFields\":[{\"kind\":2,\"slot\":101,\"value\":[0]},{\"kind\":4,\"value\":[1,3]}],\"inputs\":[],\"name\":\"enableAccessControl\",\"outputs\":[],\"selector\":[922088542,1158894738],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"conflictFields\":[{\"kind\":0}],\"inputs\":[{\"internalType\":\"string\",\"name\":\"bid\",\"type\":\"string\"}],\"name\":\"getDataCount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"count\",\"type\":\"uint256\"}],\"selector\":[816278328,3023591269],\"stateMutability\":\"view\",\"type\":\"function\"},{\"conflictFields\":[{\"kind\":0}],\"inputs\":[{\"internalType\":\"string\",\"name\":\"bid\",\"type\":\"string\"},{\"internalType\":\"uint256\",\"name\":\"start\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"count\",\"type\":\"uint256\"}],\"name\":\"getDataList\",\"outputs\":[{\"internalType\":\"string[]\",\"name\":\"udriArray\",\"type\":\"string[]\"}],\"selector\":[2492434596,1794719790],\"stateMutability\":\"view\",\"type\":\"function\"},{\"conflictFields\":[{\"kind\":0}],\"inputs\":[{\"internalType\":\"string\",\"name\":\"udri\",\"type\":\"string\"}],\"name\":\"getRegisteredData\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"dataHashSM\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"dataHashSHA\",\"type\":\"string\"},{\"internalType\":\"string[]\",\"name\":\"dataRight\",\"type\":\"string[]\"},{\"internalType\":\"string[]\",\"name\":\"metadata\",\"type\":\"string[]\"},{\"internalType\":\"string[]\",\"name\":\"variabledata\",\"type\":\"string[]\"},{\"internalType\":\"bool\",\"name\":\"isWithdraw\",\"type\":\"bool\"}],\"selector\":[208288129,3936625741],\"stateMutability\":\"view\",\"type\":\"function\"},{\"conflictFields\":[{\"kind\":0}],\"inputs\":[{\"internalType\":\"string\",\"name\":\"udri\",\"type\":\"string\"}],\"name\":\"getReviewCount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"count\",\"type\":\"uint256\"}],\"selector\":[1485793629,1330250274],\"stateMutability\":\"view\",\"type\":\"function\"},{\"conflictFields\":[{\"kind\":0}],\"inputs\":[{\"internalType\":\"string\",\"name\":\"udri\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"reviewerBid\",\"type\":\"string\"}],\"name\":\"getReviewCountOfUser\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"count\",\"type\":\"uint256\"}],\"selector\":[44555732,4057915877],\"stateMutability\":\"view\",\"type\":\"function\"},{\"conflictFields\":[{\"kind\":3,\"slot\":101,\"value\":[0]}],\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"}],\"name\":\"getRoleAdmin\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"selector\":[613063843,4224970943],\"stateMutability\":\"view\",\"type\":\"function\"},{\"conflictFields\":[{\"kind\":0}],\"inputs\":[{\"internalType\":\"string\",\"name\":\"category\",\"type\":\"string\"}],\"name\":\"getSupportVariableDataFields\",\"outputs\":[{\"internalType\":\"string[]\",\"name\":\"fileds\",\"type\":\"string[]\"}],\"selector\":[3869446330,376683502],\"stateMutability\":\"view\",\"type\":\"function\"},{\"conflictFields\":[{\"kind\":0}],\"inputs\":[{\"internalType\":\"string\",\"name\":\"dataHash\",\"type\":\"string\"}],\"name\":\"getUdriByDatahash\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"udri\",\"type\":\"string\"}],\"selector\":[633708824,3726531728],\"stateMutability\":\"view\",\"type\":\"function\"},{\"conflictFields\":[{\"kind\":0},{\"kind\":4,\"slot\":205,\"value\":[182,122,175,140,61,55,162,13,121,24,7,66,106,134,166,187,199,177,18,112,111,87,232,122,236,184,218,149,54,149,117,148]}],\"inputs\":[{\"internalType\":\"string\",\"name\":\"udri\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"bid\",\"type\":\"string\"}],\"name\":\"getUserDataRight\",\"outputs\":[{\"internalType\":\"string[]\",\"name\":\"outRights\",\"type\":\"string[]\"}],\"selector\":[1105228669,1195862205],\"stateMutability\":\"view\",\"type\":\"function\"},{\"conflictFields\":[{\"kind\":0}],\"inputs\":[{\"internalType\":\"string\",\"name\":\"bid\",\"type\":\"string\"}],\"name\":\"getUserRoles\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"usci\",\"type\":\"string\"},{\"internalType\":\"string\",\"n",
        "ame\":\"name\",\"type\":\"string\"},{\"internalType\":\"string[]\",\"name\":\"roles\",\"type\":\"string[]\"}],\"selector\":[2573946725,1585755409],\"stateMutability\":\"view\",\"type\":\"function\"},{\"conflictFields\":[{\"kind\":0}],\"inputs\":[{\"internalType\":\"string\",\"name\":\"udri\",\"type\":\"string\"},{\"internalType\":\"uint32\",\"name\":\"index\",\"type\":\"uint32\"}],\"name\":\"getVerifyDAEvidence\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"reviewerBid\",\"type\":\"string\"},{\"internalType\":\"string[]\",\"name\":\"metaData\",\"type\":\"string[]\"},{\"internalType\":\"string[]\",\"name\":\"variableData\",\"type\":\"string[]\"}],\"selector\":[3966063325,3363562759],\"stateMutability\":\"view\",\"type\":\"function\"},{\"conflictFields\":[{\"kind\":3,\"slot\":101,\"value\":[0]}],\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"grantRole\",\"outputs\":[],\"selector\":[791671133,1416757515],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"conflictFields\":[{\"kind\":0},{\"kind\":2,\"slot\":201,\"value\":[0]}],\"inputs\":[{\"internalType\":\"string\",\"name\":\"udri\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"bid\",\"type\":\"string\"},{\"internalType\":\"string[]\",\"name\":\"dataRight\",\"type\":\"string[]\"}],\"name\":\"grantUserDataRight\",\"outputs\":[],\"selector\":[3258251539,3358242835],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"conflictFields\":[{\"kind\":0}],\"inputs\":[{\"internalType\":\"string\",\"name\":\"bid\",\"type\":\"string\"},{\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"}],\"name\":\"grantUserManagePermission\",\"outputs\":[],\"selector\":[1037211317,3070963644],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"conflictFields\":[{\"kind\":0}],\"inputs\":[{\"internalType\":\"string\",\"name\":\"bid\",\"type\":\"string\"},{\"internalType\":\"string[]\",\"name\":\"roles\",\"type\":\"string[]\"}],\"name\":\"grantUserRoles\",\"outputs\":[],\"selector\":[2322354691,115265356],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"conflictFields\":[{\"kind\":0},{\"kind\":4,\"slot\":101,\"value\":[34,245,156,47,2,237,186,229,196,33,36,127,2,159,227,17,44,90,133,247,11,74,72,245,217,59,34,173,169,234,119,46]}],\"inputs\":[{\"internalType\":\"string\",\"name\":\"bid\",\"type\":\"string\"}],\"name\":\"hasDAUserManageRole\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"selector\":[1195994301,4114364435],\"stateMutability\":\"view\",\"type\":\"function\"},{\"conflictFields\":[{\"kind\":3,\"slot\":101,\"value\":[0]}],\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"hasRole\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"selector\":[2446411860,3734140252],\"stateMutability\":\"view\",\"type\":\"function\"},{\"conflictFields\":[{\"kind\":0},{\"kind\":2,\"slot\":101,\"value\":[0]},{\"kind\":4,\"value\":[0]},{\"kind\":4,\"value\":[1,2]},{\"kind\":4,\"value\":[1,3]}],\"inputs\":[],\"name\":\"initialize\",\"outputs\":[],\"selector\":[2167012380,3932184381],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"conflictFields\":[{\"kind\":5}],\"inputs\":[],\"name\":\"queryUserRole\",\"outputs\":[{\"internalType\":\"string[]\",\"name\":\"\",\"type\":\"string[]\"}],\"selector\":[289407936,1912013404],\"stateMutability\":\"view\",\"type\":\"function\"},{\"conflictFields\":[{\"kind\":0},{\"kind\":3,\"slot\":101,\"value\":[0]}],\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"renounceRole\",\"outputs\":[],\"selector\":[911641278,399928776],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"conflictFields\":[{\"kind\":3,\"slot\":101,\"value\":[0]}],\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"revokeRole\",\"outputs\":[],\"selector\":[3578229791,4245284822],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"conflictFields\":[{\"kind\":0}],\"inputs\":[{\"internalType\":\"string\",\"name\":\"bid\",\"type\":\"string\"}],\"name\":\"revokeUserManagePermission\",\"outputs\":[],\"selector\":[4233016450,2768200898],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"conflictFields\":[{\"kind\":0}],\"inputs\":[{\"internalType\":\"string\",\"name\":\"bid\",\"type\":\"string\"},{\"internalType\":\"string[]\",\"name\":\"roles\",\"type\":\"string[]\"}],\"name\":\"revokeUserRoles\",\"outputs\":[],\"selector\":[593762734,2271659916],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"conflictFields\":[{\"kind\":4,\"value\":[1,2]}],\"inputs\":[{\"internalType\":\"string\",\"name\":\"name\",\"type\":\"string\"}],\"name\":\"setChainName\",\"outputs\":[],\"selector\":[3234078498,3307895570],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"conflictFields\":[{\"kind\":0},{\"kind\":4,\"slot\":205,\"value\":[182,122,175,140,61,55,162,13,121,24,7,66,106,134,166,187,199,177,18,112,111,87,232,122,236,184,218,149,54,149,117,148]}],\"inputs\":[{\"internalType\":\"string[]\",\"name\":\"fields\",\"type\":\"string[]\"}],\"name\":\"setDataRightCategory\",\"outputs\":[],\"selector\":[2472945857,2087572871],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"conflictFields\":[{\"kind\":5}],\"inputs\":[{\"internalType\":\"string\",\"name\":\"category\",\"type\":\"string\"},{\"internalType\":\"string[]\",\"name\":\"fields\",\"type\":\"string[]\"}],\"name\":\"setDataRightSupportVariableDataFields\",\"outputs\":[],\"selector\":[1199116808,2135762870],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"conflictFields\":[{\"kind\":4,\"value\":[1,3]}],\"inputs\":[{\"internalType\":\"uint32\",\"name\":\"len\",\"type\":\"uint32\"}],\"name\":\"setTextMaxLen\",\"outputs\":[],\"selector\":[1356933702,1285167137],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"conflictFields\":[{\"kind\":4,\"value\":[1,3]}],\"inputs\":[{\"internalType\":\"uint32\",\"name\":\"len\",\"type\":\"uint32\"}],\"name\":\"setstrArrayMaxLen\",\"outputs\":[],\"selector\":[453424020,3279923519],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"conflictFields\":[{\"kind\":5}],\"inputs\":[{\"internalType\":\"bytes4\",\"name\":\"interfaceId\",\"type\":\"bytes4\"}],\"name\":\"supportsInterface\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"selector\":[33540519,3934173080],\"stateMutability\":\"view\",\"type\":\"function\"},{\"conflictFields\":[{\"kind\":0},{\"kind\":2,\"slot\":201,\"value\":[0]}],\"inputs\":[{\"internalType\":\"string\",\"name\":\"udri\",\"type\":\"string\"},{\"internalType\":\"string[]\",\"name\":\"dataRight\",\"type\":\"string[]\"}],\"name\":\"withdrawDataRightRegister\",\"outputs\":[],\"selector\":[2392051885,1179902888],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"conflictFields\":[{\"kind\":0},{\"kind\":2,\"slot\":201,\"value\":[0]}],\"inputs\":[{\"internalType\":\"string\",\"name\":\"udri\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"reviewerBid\",\"type\":\"string\"}],\"name\":\"withdrawReviewEvidence\",\"outputs\":[],\"selector\":[932021754,2229502562],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"conflictFields\":[{\"kind\":0},{\"kind\":2,\"slot\":201,\"value\":[0]}],\"inputs\":[{\"internalType\":\"string\",\"name\":\"udri\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"bid\",\"type\":\"string\"},{\"internalType\":\"string[]\",\"name\":\"dataRight\",\"type\":\"string[]\"}],\"name\":\"withdrawUserDataRight\",\"outputs\":[],\"selector\":[4211774851,2825282343],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]"
    };

    public static final String ABI = org.fisco.bcos.sdk.v3.utils.StringUtils.joinAll("", ABI_ARRAY);

    public static final String FUNC_DEFAULT_ADMIN_ROLE = "DEFAULT_ADMIN_ROLE";

    public static final String FUNC_USERMANAGE_ROLE = "USERMANAGE_ROLE";

    public static final String FUNC_ADDDATARIGHTEVIDENCE = "addDataRightEvidence";

    public static final String FUNC_ADDREVIEWEVIDENCE = "addReviewEvidence";

    public static final String FUNC_ADDUSER = "addUser";

    public static final String FUNC_APPENDVARIABLEDATA = "appendVariableData";

    public static final String FUNC_DISABLEACCESSCONTROL = "disableAccessControl";

    public static final String FUNC_ENABLEACCESSCONTROL = "enableAccessControl";

    public static final String FUNC_GETDATACOUNT = "getDataCount";

    public static final String FUNC_GETDATALIST = "getDataList";

    public static final String FUNC_GETREGISTEREDDATA = "getRegisteredData";

    public static final String FUNC_GETREVIEWCOUNT = "getReviewCount";

    public static final String FUNC_GETREVIEWCOUNTOFUSER = "getReviewCountOfUser";

    public static final String FUNC_GETROLEADMIN = "getRoleAdmin";

    public static final String FUNC_GETSUPPORTVARIABLEDATAFIELDS = "getSupportVariableDataFields";

    public static final String FUNC_GETUDRIBYDATAHASH = "getUdriByDatahash";

    public static final String FUNC_GETUSERDATARIGHT = "getUserDataRight";

    public static final String FUNC_GETUSERROLES = "getUserRoles";

    public static final String FUNC_GETVERIFYDAEVIDENCE = "getVerifyDAEvidence";

    public static final String FUNC_GRANTROLE = "grantRole";

    public static final String FUNC_GRANTUSERDATARIGHT = "grantUserDataRight";

    public static final String FUNC_GRANTUSERMANAGEPERMISSION = "grantUserManagePermission";

    public static final String FUNC_GRANTUSERROLES = "grantUserRoles";

    public static final String FUNC_HASDAUSERMANAGEROLE = "hasDAUserManageRole";

    public static final String FUNC_HASROLE = "hasRole";

    public static final String FUNC_INITIALIZE = "initialize";

    public static final String FUNC_QUERYUSERROLE = "queryUserRole";

    public static final String FUNC_RENOUNCEROLE = "renounceRole";

    public static final String FUNC_REVOKEROLE = "revokeRole";

    public static final String FUNC_REVOKEUSERMANAGEPERMISSION = "revokeUserManagePermission";

    public static final String FUNC_REVOKEUSERROLES = "revokeUserRoles";

    public static final String FUNC_SETCHAINNAME = "setChainName";

    public static final String FUNC_SETDATARIGHTCATEGORY = "setDataRightCategory";

    public static final String FUNC_SETDATARIGHTSUPPORTVARIABLEDATAFIELDS =
            "setDataRightSupportVariableDataFields";

    public static final String FUNC_SETTEXTMAXLEN = "setTextMaxLen";

    public static final String FUNC_SETSTRARRAYMAXLEN = "setstrArrayMaxLen";

    public static final String FUNC_SUPPORTSINTERFACE = "supportsInterface";

    public static final String FUNC_WITHDRAWDATARIGHTREGISTER = "withdrawDataRightRegister";

    public static final String FUNC_WITHDRAWREVIEWEVIDENCE = "withdrawReviewEvidence";

    public static final String FUNC_WITHDRAWUSERDATARIGHT = "withdrawUserDataRight";

    public static final Event EVIDENCECOMMSTORED_EVENT =
            new Event(
                    "EvidenceCommStored",
                    Arrays.<TypeReference<?>>asList(
                            new TypeReference<Address>(true) {},
                            new TypeReference<Utf8String>(true) {}));;

    public static final Event EVIDENCESTORED_EVENT =
            new Event(
                    "EvidenceStored",
                    Arrays.<TypeReference<?>>asList(
                            new TypeReference<Address>(true) {},
                            new TypeReference<Utf8String>(true) {},
                            new TypeReference<Utf8String>(true) {}));;

    public static final Event INITIALIZED_EVENT =
            new Event(
                    "Initialized", Arrays.<TypeReference<?>>asList(new TypeReference<Uint8>() {}));;

    public static final Event ROLEADMINCHANGED_EVENT =
            new Event(
                    "RoleAdminChanged",
                    Arrays.<TypeReference<?>>asList(
                            new TypeReference<Bytes32>(true) {},
                            new TypeReference<Bytes32>(true) {},
                            new TypeReference<Bytes32>(true) {}));;

    public static final Event ROLEGRANTED_EVENT =
            new Event(
                    "RoleGranted",
                    Arrays.<TypeReference<?>>asList(
                            new TypeReference<Bytes32>(true) {},
                            new TypeReference<Address>(true) {},
                            new TypeReference<Address>(true) {}));;

    public static final Event ROLEREVOKED_EVENT =
            new Event(
                    "RoleRevoked",
                    Arrays.<TypeReference<?>>asList(
                            new TypeReference<Bytes32>(true) {},
                            new TypeReference<Address>(true) {},
                            new TypeReference<Address>(true) {}));;

    public static final Event USERCREATED_EVENT =
            new Event(
                    "UserCreated",
                    Arrays.<TypeReference<?>>asList(
                            new TypeReference<Address>(true) {},
                            new TypeReference<Utf8String>(true) {},
                            new TypeReference<Utf8String>(true) {}));;

    public static final Event USERROLECHANGED_EVENT =
            new Event(
                    "UserRoleChanged",
                    Arrays.<TypeReference<?>>asList(
                            new TypeReference<Address>(true) {},
                            new TypeReference<Utf8String>(true) {}));;

    protected DAEvidenceController(
            String contractAddress, Client client, CryptoKeyPair credential) {
        super(getBinary(client.getCryptoSuite()), contractAddress, client, credential);
    }

    public static String getBinary(CryptoSuite cryptoSuite) {
        return (cryptoSuite.getCryptoTypeConfig() == CryptoType.ECDSA_TYPE ? BINARY : SM_BINARY);
    }

    public static String getABI() {
        return ABI;
    }

    public List<EvidenceCommStoredEventResponse> getEvidenceCommStoredEvents(
            TransactionReceipt transactionReceipt) {
        List<Contract.EventValuesWithLog> valueList =
                extractEventParametersWithLog(EVIDENCECOMMSTORED_EVENT, transactionReceipt);
        ArrayList<EvidenceCommStoredEventResponse> responses =
                new ArrayList<EvidenceCommStoredEventResponse>(valueList.size());
        for (Contract.EventValuesWithLog eventValues : valueList) {
            EvidenceCommStoredEventResponse typedResponse = new EvidenceCommStoredEventResponse();
            typedResponse.log = eventValues.getLog();
            typedResponse.sender = (String) eventValues.getIndexedValues().get(0).getValue();
            typedResponse.eid = (byte[]) eventValues.getIndexedValues().get(1).getValue();
            responses.add(typedResponse);
        }
        return responses;
    }

    public List<EvidenceStoredEventResponse> getEvidenceStoredEvents(
            TransactionReceipt transactionReceipt) {
        List<Contract.EventValuesWithLog> valueList =
                extractEventParametersWithLog(EVIDENCESTORED_EVENT, transactionReceipt);
        ArrayList<EvidenceStoredEventResponse> responses =
                new ArrayList<EvidenceStoredEventResponse>(valueList.size());
        for (Contract.EventValuesWithLog eventValues : valueList) {
            EvidenceStoredEventResponse typedResponse = new EvidenceStoredEventResponse();
            typedResponse.log = eventValues.getLog();
            typedResponse.sender = (String) eventValues.getIndexedValues().get(0).getValue();
            typedResponse.udri = (byte[]) eventValues.getIndexedValues().get(1).getValue();
            typedResponse.usci = (byte[]) eventValues.getIndexedValues().get(2).getValue();
            responses.add(typedResponse);
        }
        return responses;
    }

    public List<InitializedEventResponse> getInitializedEvents(
            TransactionReceipt transactionReceipt) {
        List<Contract.EventValuesWithLog> valueList =
                extractEventParametersWithLog(INITIALIZED_EVENT, transactionReceipt);
        ArrayList<InitializedEventResponse> responses =
                new ArrayList<InitializedEventResponse>(valueList.size());
        for (Contract.EventValuesWithLog eventValues : valueList) {
            InitializedEventResponse typedResponse = new InitializedEventResponse();
            typedResponse.log = eventValues.getLog();
            typedResponse.version =
                    (BigInteger) eventValues.getNonIndexedValues().get(0).getValue();
            responses.add(typedResponse);
        }
        return responses;
    }

    public List<RoleAdminChangedEventResponse> getRoleAdminChangedEvents(
            TransactionReceipt transactionReceipt) {
        List<Contract.EventValuesWithLog> valueList =
                extractEventParametersWithLog(ROLEADMINCHANGED_EVENT, transactionReceipt);
        ArrayList<RoleAdminChangedEventResponse> responses =
                new ArrayList<RoleAdminChangedEventResponse>(valueList.size());
        for (Contract.EventValuesWithLog eventValues : valueList) {
            RoleAdminChangedEventResponse typedResponse = new RoleAdminChangedEventResponse();
            typedResponse.log = eventValues.getLog();
            typedResponse.role = (byte[]) eventValues.getIndexedValues().get(0).getValue();
            typedResponse.previousAdminRole =
                    (byte[]) eventValues.getIndexedValues().get(1).getValue();
            typedResponse.newAdminRole = (byte[]) eventValues.getIndexedValues().get(2).getValue();
            responses.add(typedResponse);
        }
        return responses;
    }

    public List<RoleGrantedEventResponse> getRoleGrantedEvents(
            TransactionReceipt transactionReceipt) {
        List<Contract.EventValuesWithLog> valueList =
                extractEventParametersWithLog(ROLEGRANTED_EVENT, transactionReceipt);
        ArrayList<RoleGrantedEventResponse> responses =
                new ArrayList<RoleGrantedEventResponse>(valueList.size());
        for (Contract.EventValuesWithLog eventValues : valueList) {
            RoleGrantedEventResponse typedResponse = new RoleGrantedEventResponse();
            typedResponse.log = eventValues.getLog();
            typedResponse.role = (byte[]) eventValues.getIndexedValues().get(0).getValue();
            typedResponse.account = (String) eventValues.getIndexedValues().get(1).getValue();
            typedResponse.sender = (String) eventValues.getIndexedValues().get(2).getValue();
            responses.add(typedResponse);
        }
        return responses;
    }

    public List<RoleRevokedEventResponse> getRoleRevokedEvents(
            TransactionReceipt transactionReceipt) {
        List<Contract.EventValuesWithLog> valueList =
                extractEventParametersWithLog(ROLEREVOKED_EVENT, transactionReceipt);
        ArrayList<RoleRevokedEventResponse> responses =
                new ArrayList<RoleRevokedEventResponse>(valueList.size());
        for (Contract.EventValuesWithLog eventValues : valueList) {
            RoleRevokedEventResponse typedResponse = new RoleRevokedEventResponse();
            typedResponse.log = eventValues.getLog();
            typedResponse.role = (byte[]) eventValues.getIndexedValues().get(0).getValue();
            typedResponse.account = (String) eventValues.getIndexedValues().get(1).getValue();
            typedResponse.sender = (String) eventValues.getIndexedValues().get(2).getValue();
            responses.add(typedResponse);
        }
        return responses;
    }

    public List<UserCreatedEventResponse> getUserCreatedEvents(
            TransactionReceipt transactionReceipt) {
        List<Contract.EventValuesWithLog> valueList =
                extractEventParametersWithLog(USERCREATED_EVENT, transactionReceipt);
        ArrayList<UserCreatedEventResponse> responses =
                new ArrayList<UserCreatedEventResponse>(valueList.size());
        for (Contract.EventValuesWithLog eventValues : valueList) {
            UserCreatedEventResponse typedResponse = new UserCreatedEventResponse();
            typedResponse.log = eventValues.getLog();
            typedResponse.sender = (String) eventValues.getIndexedValues().get(0).getValue();
            typedResponse.bid = (byte[]) eventValues.getIndexedValues().get(1).getValue();
            typedResponse.usci = (byte[]) eventValues.getIndexedValues().get(2).getValue();
            responses.add(typedResponse);
        }
        return responses;
    }

    public List<UserRoleChangedEventResponse> getUserRoleChangedEvents(
            TransactionReceipt transactionReceipt) {
        List<Contract.EventValuesWithLog> valueList =
                extractEventParametersWithLog(USERROLECHANGED_EVENT, transactionReceipt);
        ArrayList<UserRoleChangedEventResponse> responses =
                new ArrayList<UserRoleChangedEventResponse>(valueList.size());
        for (Contract.EventValuesWithLog eventValues : valueList) {
            UserRoleChangedEventResponse typedResponse = new UserRoleChangedEventResponse();
            typedResponse.log = eventValues.getLog();
            typedResponse.sender = (String) eventValues.getIndexedValues().get(0).getValue();
            typedResponse.bid = (byte[]) eventValues.getIndexedValues().get(1).getValue();
            responses.add(typedResponse);
        }
        return responses;
    }

    public byte[] DEFAULT_ADMIN_ROLE() throws ContractException {
        final Function function =
                new Function(
                        FUNC_DEFAULT_ADMIN_ROLE,
                        Arrays.<Type>asList(),
                        Arrays.<TypeReference<?>>asList(new TypeReference<Bytes32>() {}));
        return executeCallWithSingleValueReturn(function, byte[].class);
    }

    public byte[] USERMANAGE_ROLE() throws ContractException {
        final Function function =
                new Function(
                        FUNC_USERMANAGE_ROLE,
                        Arrays.<Type>asList(),
                        Arrays.<TypeReference<?>>asList(new TypeReference<Bytes32>() {}));
        return executeCallWithSingleValueReturn(function, byte[].class);
    }

    public TransactionReceipt addDataRightEvidence(
            String udri,
            String bid,
            List<String> dataHash,
            List<String> dataRight,
            List<String> metaData,
            List<String> variableData) {
        final Function function =
                new Function(
                        FUNC_ADDDATARIGHTEVIDENCE,
                        Arrays.<Type>asList(
                                new org.fisco.bcos.sdk.v3.codec.datatypes.Utf8String(udri),
                                new org.fisco.bcos.sdk.v3.codec.datatypes.Utf8String(bid),
                                new org.fisco.bcos.sdk.v3.codec.datatypes.DynamicArray<
                                        org.fisco.bcos.sdk.v3.codec.datatypes.Utf8String>(
                                        org.fisco.bcos.sdk.v3.codec.datatypes.Utf8String.class,
                                        org.fisco.bcos.sdk.v3.codec.Utils.typeMap(
                                                dataHash,
                                                org.fisco.bcos.sdk.v3.codec.datatypes.Utf8String
                                                        .class)),
                                new org.fisco.bcos.sdk.v3.codec.datatypes.DynamicArray<
                                        org.fisco.bcos.sdk.v3.codec.datatypes.Utf8String>(
                                        org.fisco.bcos.sdk.v3.codec.datatypes.Utf8String.class,
                                        org.fisco.bcos.sdk.v3.codec.Utils.typeMap(
                                                dataRight,
                                                org.fisco.bcos.sdk.v3.codec.datatypes.Utf8String
                                                        .class)),
                                new org.fisco.bcos.sdk.v3.codec.datatypes.DynamicArray<
                                        org.fisco.bcos.sdk.v3.codec.datatypes.Utf8String>(
                                        org.fisco.bcos.sdk.v3.codec.datatypes.Utf8String.class,
                                        org.fisco.bcos.sdk.v3.codec.Utils.typeMap(
                                                metaData,
                                                org.fisco.bcos.sdk.v3.codec.datatypes.Utf8String
                                                        .class)),
                                new org.fisco.bcos.sdk.v3.codec.datatypes.DynamicArray<
                                        org.fisco.bcos.sdk.v3.codec.datatypes.Utf8String>(
                                        org.fisco.bcos.sdk.v3.codec.datatypes.Utf8String.class,
                                        org.fisco.bcos.sdk.v3.codec.Utils.typeMap(
                                                variableData,
                                                org.fisco.bcos.sdk.v3.codec.datatypes.Utf8String
                                                        .class))),
                        Collections.<TypeReference<?>>emptyList(),
                        0);
        return executeTransaction(function);
    }

    public String getSignedTransactionForAddDataRightEvidence(
            String udri,
            String bid,
            List<String> dataHash,
            List<String> dataRight,
            List<String> metaData,
            List<String> variableData) {
        final Function function =
                new Function(
                        FUNC_ADDDATARIGHTEVIDENCE,
                        Arrays.<Type>asList(
                                new org.fisco.bcos.sdk.v3.codec.datatypes.Utf8String(udri),
                                new org.fisco.bcos.sdk.v3.codec.datatypes.Utf8String(bid),
                                new org.fisco.bcos.sdk.v3.codec.datatypes.DynamicArray<
                                        org.fisco.bcos.sdk.v3.codec.datatypes.Utf8String>(
                                        org.fisco.bcos.sdk.v3.codec.datatypes.Utf8String.class,
                                        org.fisco.bcos.sdk.v3.codec.Utils.typeMap(
                                                dataHash,
                                                org.fisco.bcos.sdk.v3.codec.datatypes.Utf8String
                                                        .class)),
                                new org.fisco.bcos.sdk.v3.codec.datatypes.DynamicArray<
                                        org.fisco.bcos.sdk.v3.codec.datatypes.Utf8String>(
                                        org.fisco.bcos.sdk.v3.codec.datatypes.Utf8String.class,
                                        org.fisco.bcos.sdk.v3.codec.Utils.typeMap(
                                                dataRight,
                                                org.fisco.bcos.sdk.v3.codec.datatypes.Utf8String
                                                        .class)),
                                new org.fisco.bcos.sdk.v3.codec.datatypes.DynamicArray<
                                        org.fisco.bcos.sdk.v3.codec.datatypes.Utf8String>(
                                        org.fisco.bcos.sdk.v3.codec.datatypes.Utf8String.class,
                                        org.fisco.bcos.sdk.v3.codec.Utils.typeMap(
                                                metaData,
                                                org.fisco.bcos.sdk.v3.codec.datatypes.Utf8String
                                                        .class)),
                                new org.fisco.bcos.sdk.v3.codec.datatypes.DynamicArray<
                                        org.fisco.bcos.sdk.v3.codec.datatypes.Utf8String>(
                                        org.fisco.bcos.sdk.v3.codec.datatypes.Utf8String.class,
                                        org.fisco.bcos.sdk.v3.codec.Utils.typeMap(
                                                variableData,
                                                org.fisco.bcos.sdk.v3.codec.datatypes.Utf8String
                                                        .class))),
                        Collections.<TypeReference<?>>emptyList(),
                        0);
        return createSignedTransaction(function);
    }

    public String addDataRightEvidence(
            String udri,
            String bid,
            List<String> dataHash,
            List<String> dataRight,
            List<String> metaData,
            List<String> variableData,
            TransactionCallback callback) {
        final Function function =
                new Function(
                        FUNC_ADDDATARIGHTEVIDENCE,
                        Arrays.<Type>asList(
                                new org.fisco.bcos.sdk.v3.codec.datatypes.Utf8String(udri),
                                new org.fisco.bcos.sdk.v3.codec.datatypes.Utf8String(bid),
                                new org.fisco.bcos.sdk.v3.codec.datatypes.DynamicArray<
                                        org.fisco.bcos.sdk.v3.codec.datatypes.Utf8String>(
                                        org.fisco.bcos.sdk.v3.codec.datatypes.Utf8String.class,
                                        org.fisco.bcos.sdk.v3.codec.Utils.typeMap(
                                                dataHash,
                                                org.fisco.bcos.sdk.v3.codec.datatypes.Utf8String
                                                        .class)),
                                new org.fisco.bcos.sdk.v3.codec.datatypes.DynamicArray<
                                        org.fisco.bcos.sdk.v3.codec.datatypes.Utf8String>(
                                        org.fisco.bcos.sdk.v3.codec.datatypes.Utf8String.class,
                                        org.fisco.bcos.sdk.v3.codec.Utils.typeMap(
                                                dataRight,
                                                org.fisco.bcos.sdk.v3.codec.datatypes.Utf8String
                                                        .class)),
                                new org.fisco.bcos.sdk.v3.codec.datatypes.DynamicArray<
                                        org.fisco.bcos.sdk.v3.codec.datatypes.Utf8String>(
                                        org.fisco.bcos.sdk.v3.codec.datatypes.Utf8String.class,
                                        org.fisco.bcos.sdk.v3.codec.Utils.typeMap(
                                                metaData,
                                                org.fisco.bcos.sdk.v3.codec.datatypes.Utf8String
                                                        .class)),
                                new org.fisco.bcos.sdk.v3.codec.datatypes.DynamicArray<
                                        org.fisco.bcos.sdk.v3.codec.datatypes.Utf8String>(
                                        org.fisco.bcos.sdk.v3.codec.datatypes.Utf8String.class,
                                        org.fisco.bcos.sdk.v3.codec.Utils.typeMap(
                                                variableData,
                                                org.fisco.bcos.sdk.v3.codec.datatypes.Utf8String
                                                        .class))),
                        Collections.<TypeReference<?>>emptyList(),
                        0);
        return asyncExecuteTransaction(function, callback);
    }

    public Tuple6<String, String, List<String>, List<String>, List<String>, List<String>>
            getAddDataRightEvidenceInput(TransactionReceipt transactionReceipt) {
        String data = transactionReceipt.getInput().substring(10);
        final Function function =
                new Function(
                        FUNC_ADDDATARIGHTEVIDENCE,
                        Arrays.<Type>asList(),
                        Arrays.<TypeReference<?>>asList(
                                new TypeReference<Utf8String>() {},
                                new TypeReference<Utf8String>() {},
                                new TypeReference<DynamicArray<Utf8String>>() {},
                                new TypeReference<DynamicArray<Utf8String>>() {},
                                new TypeReference<DynamicArray<Utf8String>>() {},
                                new TypeReference<DynamicArray<Utf8String>>() {}));
        List<Type> results =
                this.functionReturnDecoder.decode(data, function.getOutputParameters());
        return new Tuple6<String, String, List<String>, List<String>, List<String>, List<String>>(
                (String) results.get(0).getValue(),
                (String) results.get(1).getValue(),
                convertToNative((List<Utf8String>) results.get(2).getValue()),
                convertToNative((List<Utf8String>) results.get(3).getValue()),
                convertToNative((List<Utf8String>) results.get(4).getValue()),
                convertToNative((List<Utf8String>) results.get(5).getValue()));
    }

    public TransactionReceipt addReviewEvidence(
            String udri,
            String reviewerBid,
            List<String> reviewDataHash,
            List<String> metaData,
            List<String> variableData) {
        final Function function =
                new Function(
                        FUNC_ADDREVIEWEVIDENCE,
                        Arrays.<Type>asList(
                                new org.fisco.bcos.sdk.v3.codec.datatypes.Utf8String(udri),
                                new org.fisco.bcos.sdk.v3.codec.datatypes.Utf8String(reviewerBid),
                                new org.fisco.bcos.sdk.v3.codec.datatypes.DynamicArray<
                                        org.fisco.bcos.sdk.v3.codec.datatypes.Utf8String>(
                                        org.fisco.bcos.sdk.v3.codec.datatypes.Utf8String.class,
                                        org.fisco.bcos.sdk.v3.codec.Utils.typeMap(
                                                reviewDataHash,
                                                org.fisco.bcos.sdk.v3.codec.datatypes.Utf8String
                                                        .class)),
                                new org.fisco.bcos.sdk.v3.codec.datatypes.DynamicArray<
                                        org.fisco.bcos.sdk.v3.codec.datatypes.Utf8String>(
                                        org.fisco.bcos.sdk.v3.codec.datatypes.Utf8String.class,
                                        org.fisco.bcos.sdk.v3.codec.Utils.typeMap(
                                                metaData,
                                                org.fisco.bcos.sdk.v3.codec.datatypes.Utf8String
                                                        .class)),
                                new org.fisco.bcos.sdk.v3.codec.datatypes.DynamicArray<
                                        org.fisco.bcos.sdk.v3.codec.datatypes.Utf8String>(
                                        org.fisco.bcos.sdk.v3.codec.datatypes.Utf8String.class,
                                        org.fisco.bcos.sdk.v3.codec.Utils.typeMap(
                                                variableData,
                                                org.fisco.bcos.sdk.v3.codec.datatypes.Utf8String
                                                        .class))),
                        Collections.<TypeReference<?>>emptyList(),
                        0);
        return executeTransaction(function);
    }

    public String getSignedTransactionForAddReviewEvidence(
            String udri,
            String reviewerBid,
            List<String> reviewDataHash,
            List<String> metaData,
            List<String> variableData) {
        final Function function =
                new Function(
                        FUNC_ADDREVIEWEVIDENCE,
                        Arrays.<Type>asList(
                                new org.fisco.bcos.sdk.v3.codec.datatypes.Utf8String(udri),
                                new org.fisco.bcos.sdk.v3.codec.datatypes.Utf8String(reviewerBid),
                                new org.fisco.bcos.sdk.v3.codec.datatypes.DynamicArray<
                                        org.fisco.bcos.sdk.v3.codec.datatypes.Utf8String>(
                                        org.fisco.bcos.sdk.v3.codec.datatypes.Utf8String.class,
                                        org.fisco.bcos.sdk.v3.codec.Utils.typeMap(
                                                reviewDataHash,
                                                org.fisco.bcos.sdk.v3.codec.datatypes.Utf8String
                                                        .class)),
                                new org.fisco.bcos.sdk.v3.codec.datatypes.DynamicArray<
                                        org.fisco.bcos.sdk.v3.codec.datatypes.Utf8String>(
                                        org.fisco.bcos.sdk.v3.codec.datatypes.Utf8String.class,
                                        org.fisco.bcos.sdk.v3.codec.Utils.typeMap(
                                                metaData,
                                                org.fisco.bcos.sdk.v3.codec.datatypes.Utf8String
                                                        .class)),
                                new org.fisco.bcos.sdk.v3.codec.datatypes.DynamicArray<
                                        org.fisco.bcos.sdk.v3.codec.datatypes.Utf8String>(
                                        org.fisco.bcos.sdk.v3.codec.datatypes.Utf8String.class,
                                        org.fisco.bcos.sdk.v3.codec.Utils.typeMap(
                                                variableData,
                                                org.fisco.bcos.sdk.v3.codec.datatypes.Utf8String
                                                        .class))),
                        Collections.<TypeReference<?>>emptyList(),
                        0);
        return createSignedTransaction(function);
    }

    public String addReviewEvidence(
            String udri,
            String reviewerBid,
            List<String> reviewDataHash,
            List<String> metaData,
            List<String> variableData,
            TransactionCallback callback) {
        final Function function =
                new Function(
                        FUNC_ADDREVIEWEVIDENCE,
                        Arrays.<Type>asList(
                                new org.fisco.bcos.sdk.v3.codec.datatypes.Utf8String(udri),
                                new org.fisco.bcos.sdk.v3.codec.datatypes.Utf8String(reviewerBid),
                                new org.fisco.bcos.sdk.v3.codec.datatypes.DynamicArray<
                                        org.fisco.bcos.sdk.v3.codec.datatypes.Utf8String>(
                                        org.fisco.bcos.sdk.v3.codec.datatypes.Utf8String.class,
                                        org.fisco.bcos.sdk.v3.codec.Utils.typeMap(
                                                reviewDataHash,
                                                org.fisco.bcos.sdk.v3.codec.datatypes.Utf8String
                                                        .class)),
                                new org.fisco.bcos.sdk.v3.codec.datatypes.DynamicArray<
                                        org.fisco.bcos.sdk.v3.codec.datatypes.Utf8String>(
                                        org.fisco.bcos.sdk.v3.codec.datatypes.Utf8String.class,
                                        org.fisco.bcos.sdk.v3.codec.Utils.typeMap(
                                                metaData,
                                                org.fisco.bcos.sdk.v3.codec.datatypes.Utf8String
                                                        .class)),
                                new org.fisco.bcos.sdk.v3.codec.datatypes.DynamicArray<
                                        org.fisco.bcos.sdk.v3.codec.datatypes.Utf8String>(
                                        org.fisco.bcos.sdk.v3.codec.datatypes.Utf8String.class,
                                        org.fisco.bcos.sdk.v3.codec.Utils.typeMap(
                                                variableData,
                                                org.fisco.bcos.sdk.v3.codec.datatypes.Utf8String
                                                        .class))),
                        Collections.<TypeReference<?>>emptyList(),
                        0);
        return asyncExecuteTransaction(function, callback);
    }

    public Tuple5<String, String, List<String>, List<String>, List<String>>
            getAddReviewEvidenceInput(TransactionReceipt transactionReceipt) {
        String data = transactionReceipt.getInput().substring(10);
        final Function function =
                new Function(
                        FUNC_ADDREVIEWEVIDENCE,
                        Arrays.<Type>asList(),
                        Arrays.<TypeReference<?>>asList(
                                new TypeReference<Utf8String>() {},
                                new TypeReference<Utf8String>() {},
                                new TypeReference<DynamicArray<Utf8String>>() {},
                                new TypeReference<DynamicArray<Utf8String>>() {},
                                new TypeReference<DynamicArray<Utf8String>>() {}));
        List<Type> results =
                this.functionReturnDecoder.decode(data, function.getOutputParameters());
        return new Tuple5<String, String, List<String>, List<String>, List<String>>(
                (String) results.get(0).getValue(),
                (String) results.get(1).getValue(),
                convertToNative((List<Utf8String>) results.get(2).getValue()),
                convertToNative((List<Utf8String>) results.get(3).getValue()),
                convertToNative((List<Utf8String>) results.get(4).getValue()));
    }

    public TransactionReceipt addUser(
            String bid, String usci, String name, String account, List<String> roles) {
        final Function function =
                new Function(
                        FUNC_ADDUSER,
                        Arrays.<Type>asList(
                                new org.fisco.bcos.sdk.v3.codec.datatypes.Utf8String(bid),
                                new org.fisco.bcos.sdk.v3.codec.datatypes.Utf8String(usci),
                                new org.fisco.bcos.sdk.v3.codec.datatypes.Utf8String(name),
                                new org.fisco.bcos.sdk.v3.codec.datatypes.Address(account),
                                new org.fisco.bcos.sdk.v3.codec.datatypes.DynamicArray<
                                        org.fisco.bcos.sdk.v3.codec.datatypes.Utf8String>(
                                        org.fisco.bcos.sdk.v3.codec.datatypes.Utf8String.class,
                                        org.fisco.bcos.sdk.v3.codec.Utils.typeMap(
                                                roles,
                                                org.fisco.bcos.sdk.v3.codec.datatypes.Utf8String
                                                        .class))),
                        Collections.<TypeReference<?>>emptyList(),
                        0);
        return executeTransaction(function);
    }

    public String getSignedTransactionForAddUser(
            String bid, String usci, String name, String account, List<String> roles) {
        final Function function =
                new Function(
                        FUNC_ADDUSER,
                        Arrays.<Type>asList(
                                new org.fisco.bcos.sdk.v3.codec.datatypes.Utf8String(bid),
                                new org.fisco.bcos.sdk.v3.codec.datatypes.Utf8String(usci),
                                new org.fisco.bcos.sdk.v3.codec.datatypes.Utf8String(name),
                                new org.fisco.bcos.sdk.v3.codec.datatypes.Address(account),
                                new org.fisco.bcos.sdk.v3.codec.datatypes.DynamicArray<
                                        org.fisco.bcos.sdk.v3.codec.datatypes.Utf8String>(
                                        org.fisco.bcos.sdk.v3.codec.datatypes.Utf8String.class,
                                        org.fisco.bcos.sdk.v3.codec.Utils.typeMap(
                                                roles,
                                                org.fisco.bcos.sdk.v3.codec.datatypes.Utf8String
                                                        .class))),
                        Collections.<TypeReference<?>>emptyList(),
                        0);
        return createSignedTransaction(function);
    }

    public String addUser(
            String bid,
            String usci,
            String name,
            String account,
            List<String> roles,
            TransactionCallback callback) {
        final Function function =
                new Function(
                        FUNC_ADDUSER,
                        Arrays.<Type>asList(
                                new org.fisco.bcos.sdk.v3.codec.datatypes.Utf8String(bid),
                                new org.fisco.bcos.sdk.v3.codec.datatypes.Utf8String(usci),
                                new org.fisco.bcos.sdk.v3.codec.datatypes.Utf8String(name),
                                new org.fisco.bcos.sdk.v3.codec.datatypes.Address(account),
                                new org.fisco.bcos.sdk.v3.codec.datatypes.DynamicArray<
                                        org.fisco.bcos.sdk.v3.codec.datatypes.Utf8String>(
                                        org.fisco.bcos.sdk.v3.codec.datatypes.Utf8String.class,
                                        org.fisco.bcos.sdk.v3.codec.Utils.typeMap(
                                                roles,
                                                org.fisco.bcos.sdk.v3.codec.datatypes.Utf8String
                                                        .class))),
                        Collections.<TypeReference<?>>emptyList(),
                        0);
        return asyncExecuteTransaction(function, callback);
    }

    public Tuple5<String, String, String, String, List<String>> getAddUserInput(
            TransactionReceipt transactionReceipt) {
        String data = transactionReceipt.getInput().substring(10);
        final Function function =
                new Function(
                        FUNC_ADDUSER,
                        Arrays.<Type>asList(),
                        Arrays.<TypeReference<?>>asList(
                                new TypeReference<Utf8String>() {},
                                new TypeReference<Utf8String>() {},
                                new TypeReference<Utf8String>() {},
                                new TypeReference<Address>() {},
                                new TypeReference<DynamicArray<Utf8String>>() {}));
        List<Type> results =
                this.functionReturnDecoder.decode(data, function.getOutputParameters());
        return new Tuple5<String, String, String, String, List<String>>(
                (String) results.get(0).getValue(),
                (String) results.get(1).getValue(),
                (String) results.get(2).getValue(),
                (String) results.get(3).getValue(),
                convertToNative((List<Utf8String>) results.get(4).getValue()));
    }

    public TransactionReceipt appendVariableData(String udri, List<String> variableData) {
        final Function function =
                new Function(
                        FUNC_APPENDVARIABLEDATA,
                        Arrays.<Type>asList(
                                new org.fisco.bcos.sdk.v3.codec.datatypes.Utf8String(udri),
                                new org.fisco.bcos.sdk.v3.codec.datatypes.DynamicArray<
                                        org.fisco.bcos.sdk.v3.codec.datatypes.Utf8String>(
                                        org.fisco.bcos.sdk.v3.codec.datatypes.Utf8String.class,
                                        org.fisco.bcos.sdk.v3.codec.Utils.typeMap(
                                                variableData,
                                                org.fisco.bcos.sdk.v3.codec.datatypes.Utf8String
                                                        .class))),
                        Collections.<TypeReference<?>>emptyList(),
                        0);
        return executeTransaction(function);
    }

    public String getSignedTransactionForAppendVariableData(
            String udri, List<String> variableData) {
        final Function function =
                new Function(
                        FUNC_APPENDVARIABLEDATA,
                        Arrays.<Type>asList(
                                new org.fisco.bcos.sdk.v3.codec.datatypes.Utf8String(udri),
                                new org.fisco.bcos.sdk.v3.codec.datatypes.DynamicArray<
                                        org.fisco.bcos.sdk.v3.codec.datatypes.Utf8String>(
                                        org.fisco.bcos.sdk.v3.codec.datatypes.Utf8String.class,
                                        org.fisco.bcos.sdk.v3.codec.Utils.typeMap(
                                                variableData,
                                                org.fisco.bcos.sdk.v3.codec.datatypes.Utf8String
                                                        .class))),
                        Collections.<TypeReference<?>>emptyList(),
                        0);
        return createSignedTransaction(function);
    }

    public String appendVariableData(
            String udri, List<String> variableData, TransactionCallback callback) {
        final Function function =
                new Function(
                        FUNC_APPENDVARIABLEDATA,
                        Arrays.<Type>asList(
                                new org.fisco.bcos.sdk.v3.codec.datatypes.Utf8String(udri),
                                new org.fisco.bcos.sdk.v3.codec.datatypes.DynamicArray<
                                        org.fisco.bcos.sdk.v3.codec.datatypes.Utf8String>(
                                        org.fisco.bcos.sdk.v3.codec.datatypes.Utf8String.class,
                                        org.fisco.bcos.sdk.v3.codec.Utils.typeMap(
                                                variableData,
                                                org.fisco.bcos.sdk.v3.codec.datatypes.Utf8String
                                                        .class))),
                        Collections.<TypeReference<?>>emptyList(),
                        0);
        return asyncExecuteTransaction(function, callback);
    }

    public Tuple2<String, List<String>> getAppendVariableDataInput(
            TransactionReceipt transactionReceipt) {
        String data = transactionReceipt.getInput().substring(10);
        final Function function =
                new Function(
                        FUNC_APPENDVARIABLEDATA,
                        Arrays.<Type>asList(),
                        Arrays.<TypeReference<?>>asList(
                                new TypeReference<Utf8String>() {},
                                new TypeReference<DynamicArray<Utf8String>>() {}));
        List<Type> results =
                this.functionReturnDecoder.decode(data, function.getOutputParameters());
        return new Tuple2<String, List<String>>(
                (String) results.get(0).getValue(),
                convertToNative((List<Utf8String>) results.get(1).getValue()));
    }

    public TransactionReceipt disableAccessControl() {
        final Function function =
                new Function(
                        FUNC_DISABLEACCESSCONTROL,
                        Arrays.<Type>asList(),
                        Collections.<TypeReference<?>>emptyList(),
                        0);
        return executeTransaction(function);
    }

    public String getSignedTransactionForDisableAccessControl() {
        final Function function =
                new Function(
                        FUNC_DISABLEACCESSCONTROL,
                        Arrays.<Type>asList(),
                        Collections.<TypeReference<?>>emptyList(),
                        0);
        return createSignedTransaction(function);
    }

    public String disableAccessControl(TransactionCallback callback) {
        final Function function =
                new Function(
                        FUNC_DISABLEACCESSCONTROL,
                        Arrays.<Type>asList(),
                        Collections.<TypeReference<?>>emptyList(),
                        0);
        return asyncExecuteTransaction(function, callback);
    }

    public TransactionReceipt enableAccessControl() {
        final Function function =
                new Function(
                        FUNC_ENABLEACCESSCONTROL,
                        Arrays.<Type>asList(),
                        Collections.<TypeReference<?>>emptyList(),
                        0);
        return executeTransaction(function);
    }

    public String getSignedTransactionForEnableAccessControl() {
        final Function function =
                new Function(
                        FUNC_ENABLEACCESSCONTROL,
                        Arrays.<Type>asList(),
                        Collections.<TypeReference<?>>emptyList(),
                        0);
        return createSignedTransaction(function);
    }

    public String enableAccessControl(TransactionCallback callback) {
        final Function function =
                new Function(
                        FUNC_ENABLEACCESSCONTROL,
                        Arrays.<Type>asList(),
                        Collections.<TypeReference<?>>emptyList(),
                        0);
        return asyncExecuteTransaction(function, callback);
    }

    public BigInteger getDataCount(String bid) throws ContractException {
        final Function function =
                new Function(
                        FUNC_GETDATACOUNT,
                        Arrays.<Type>asList(
                                new org.fisco.bcos.sdk.v3.codec.datatypes.Utf8String(bid)),
                        Arrays.<TypeReference<?>>asList(new TypeReference<Uint256>() {}));
        return executeCallWithSingleValueReturn(function, BigInteger.class);
    }

    public List getDataList(String bid, BigInteger start, BigInteger count)
            throws ContractException {
        final Function function =
                new Function(
                        FUNC_GETDATALIST,
                        Arrays.<Type>asList(
                                new org.fisco.bcos.sdk.v3.codec.datatypes.Utf8String(bid),
                                new org.fisco.bcos.sdk.v3.codec.datatypes.generated.Uint256(start),
                                new org.fisco.bcos.sdk.v3.codec.datatypes.generated.Uint256(count)),
                        Arrays.<TypeReference<?>>asList(
                                new TypeReference<DynamicArray<Utf8String>>() {}));
        List<Type> result = (List<Type>) executeCallWithSingleValueReturn(function, List.class);
        return convertToNative(result);
    }

    public Tuple6<String, String, List<String>, List<String>, List<String>, Boolean>
            getRegisteredData(String udri) throws ContractException {
        final Function function =
                new Function(
                        FUNC_GETREGISTEREDDATA,
                        Arrays.<Type>asList(
                                new org.fisco.bcos.sdk.v3.codec.datatypes.Utf8String(udri)),
                        Arrays.<TypeReference<?>>asList(
                                new TypeReference<Utf8String>() {},
                                new TypeReference<Utf8String>() {},
                                new TypeReference<DynamicArray<Utf8String>>() {},
                                new TypeReference<DynamicArray<Utf8String>>() {},
                                new TypeReference<DynamicArray<Utf8String>>() {},
                                new TypeReference<Bool>() {}));
        List<Type> results = executeCallWithMultipleValueReturn(function);
        return new Tuple6<String, String, List<String>, List<String>, List<String>, Boolean>(
                (String) results.get(0).getValue(),
                (String) results.get(1).getValue(),
                convertToNative((List<Utf8String>) results.get(2).getValue()),
                convertToNative((List<Utf8String>) results.get(3).getValue()),
                convertToNative((List<Utf8String>) results.get(4).getValue()),
                (Boolean) results.get(5).getValue());
    }

    public BigInteger getReviewCount(String udri) throws ContractException {
        final Function function =
                new Function(
                        FUNC_GETREVIEWCOUNT,
                        Arrays.<Type>asList(
                                new org.fisco.bcos.sdk.v3.codec.datatypes.Utf8String(udri)),
                        Arrays.<TypeReference<?>>asList(new TypeReference<Uint256>() {}));
        return executeCallWithSingleValueReturn(function, BigInteger.class);
    }

    public BigInteger getReviewCountOfUser(String udri, String reviewerBid)
            throws ContractException {
        final Function function =
                new Function(
                        FUNC_GETREVIEWCOUNTOFUSER,
                        Arrays.<Type>asList(
                                new org.fisco.bcos.sdk.v3.codec.datatypes.Utf8String(udri),
                                new org.fisco.bcos.sdk.v3.codec.datatypes.Utf8String(reviewerBid)),
                        Arrays.<TypeReference<?>>asList(new TypeReference<Uint256>() {}));
        return executeCallWithSingleValueReturn(function, BigInteger.class);
    }

    public byte[] getRoleAdmin(byte[] role) throws ContractException {
        final Function function =
                new Function(
                        FUNC_GETROLEADMIN,
                        Arrays.<Type>asList(
                                new org.fisco.bcos.sdk.v3.codec.datatypes.generated.Bytes32(role)),
                        Arrays.<TypeReference<?>>asList(new TypeReference<Bytes32>() {}));
        return executeCallWithSingleValueReturn(function, byte[].class);
    }

    public List getSupportVariableDataFields(String category) throws ContractException {
        final Function function =
                new Function(
                        FUNC_GETSUPPORTVARIABLEDATAFIELDS,
                        Arrays.<Type>asList(
                                new org.fisco.bcos.sdk.v3.codec.datatypes.Utf8String(category)),
                        Arrays.<TypeReference<?>>asList(
                                new TypeReference<DynamicArray<Utf8String>>() {}));
        List<Type> result = (List<Type>) executeCallWithSingleValueReturn(function, List.class);
        return convertToNative(result);
    }

    public String getUdriByDatahash(String dataHash) throws ContractException {
        final Function function =
                new Function(
                        FUNC_GETUDRIBYDATAHASH,
                        Arrays.<Type>asList(
                                new org.fisco.bcos.sdk.v3.codec.datatypes.Utf8String(dataHash)),
                        Arrays.<TypeReference<?>>asList(new TypeReference<Utf8String>() {}));
        return executeCallWithSingleValueReturn(function, String.class);
    }

    public List getUserDataRight(String udri, String bid) throws ContractException {
        final Function function =
                new Function(
                        FUNC_GETUSERDATARIGHT,
                        Arrays.<Type>asList(
                                new org.fisco.bcos.sdk.v3.codec.datatypes.Utf8String(udri),
                                new org.fisco.bcos.sdk.v3.codec.datatypes.Utf8String(bid)),
                        Arrays.<TypeReference<?>>asList(
                                new TypeReference<DynamicArray<Utf8String>>() {}));
        List<Type> result = (List<Type>) executeCallWithSingleValueReturn(function, List.class);
        return convertToNative(result);
    }

    public Tuple3<String, String, List<String>> getUserRoles(String bid) throws ContractException {
        final Function function =
                new Function(
                        FUNC_GETUSERROLES,
                        Arrays.<Type>asList(
                                new org.fisco.bcos.sdk.v3.codec.datatypes.Utf8String(bid)),
                        Arrays.<TypeReference<?>>asList(
                                new TypeReference<Utf8String>() {},
                                new TypeReference<Utf8String>() {},
                                new TypeReference<DynamicArray<Utf8String>>() {}));
        List<Type> results = executeCallWithMultipleValueReturn(function);
        return new Tuple3<String, String, List<String>>(
                (String) results.get(0).getValue(),
                (String) results.get(1).getValue(),
                convertToNative((List<Utf8String>) results.get(2).getValue()));
    }

    public Tuple3<String, List<String>, List<String>> getVerifyDAEvidence(
            String udri, BigInteger index) throws ContractException {
        final Function function =
                new Function(
                        FUNC_GETVERIFYDAEVIDENCE,
                        Arrays.<Type>asList(
                                new org.fisco.bcos.sdk.v3.codec.datatypes.Utf8String(udri),
                                new org.fisco.bcos.sdk.v3.codec.datatypes.generated.Uint32(index)),
                        Arrays.<TypeReference<?>>asList(
                                new TypeReference<Utf8String>() {},
                                new TypeReference<DynamicArray<Utf8String>>() {},
                                new TypeReference<DynamicArray<Utf8String>>() {}));
        List<Type> results = executeCallWithMultipleValueReturn(function);
        return new Tuple3<String, List<String>, List<String>>(
                (String) results.get(0).getValue(),
                convertToNative((List<Utf8String>) results.get(1).getValue()),
                convertToNative((List<Utf8String>) results.get(2).getValue()));
    }

    public TransactionReceipt grantRole(byte[] role, String account) {
        final Function function =
                new Function(
                        FUNC_GRANTROLE,
                        Arrays.<Type>asList(
                                new org.fisco.bcos.sdk.v3.codec.datatypes.generated.Bytes32(role),
                                new org.fisco.bcos.sdk.v3.codec.datatypes.Address(account)),
                        Collections.<TypeReference<?>>emptyList(),
                        4);
        return executeTransaction(function);
    }

    public String getSignedTransactionForGrantRole(byte[] role, String account) {
        final Function function =
                new Function(
                        FUNC_GRANTROLE,
                        Arrays.<Type>asList(
                                new org.fisco.bcos.sdk.v3.codec.datatypes.generated.Bytes32(role),
                                new org.fisco.bcos.sdk.v3.codec.datatypes.Address(account)),
                        Collections.<TypeReference<?>>emptyList(),
                        4);
        return createSignedTransaction(function);
    }

    public String grantRole(byte[] role, String account, TransactionCallback callback) {
        final Function function =
                new Function(
                        FUNC_GRANTROLE,
                        Arrays.<Type>asList(
                                new org.fisco.bcos.sdk.v3.codec.datatypes.generated.Bytes32(role),
                                new org.fisco.bcos.sdk.v3.codec.datatypes.Address(account)),
                        Collections.<TypeReference<?>>emptyList(),
                        4);
        return asyncExecuteTransaction(function, callback);
    }

    public Tuple2<byte[], String> getGrantRoleInput(TransactionReceipt transactionReceipt) {
        String data = transactionReceipt.getInput().substring(10);
        final Function function =
                new Function(
                        FUNC_GRANTROLE,
                        Arrays.<Type>asList(),
                        Arrays.<TypeReference<?>>asList(
                                new TypeReference<Bytes32>() {}, new TypeReference<Address>() {}));
        List<Type> results =
                this.functionReturnDecoder.decode(data, function.getOutputParameters());
        return new Tuple2<byte[], String>(
                (byte[]) results.get(0).getValue(), (String) results.get(1).getValue());
    }

    public TransactionReceipt grantUserDataRight(String udri, String bid, List<String> dataRight) {
        final Function function =
                new Function(
                        FUNC_GRANTUSERDATARIGHT,
                        Arrays.<Type>asList(
                                new org.fisco.bcos.sdk.v3.codec.datatypes.Utf8String(udri),
                                new org.fisco.bcos.sdk.v3.codec.datatypes.Utf8String(bid),
                                new org.fisco.bcos.sdk.v3.codec.datatypes.DynamicArray<
                                        org.fisco.bcos.sdk.v3.codec.datatypes.Utf8String>(
                                        org.fisco.bcos.sdk.v3.codec.datatypes.Utf8String.class,
                                        org.fisco.bcos.sdk.v3.codec.Utils.typeMap(
                                                dataRight,
                                                org.fisco.bcos.sdk.v3.codec.datatypes.Utf8String
                                                        .class))),
                        Collections.<TypeReference<?>>emptyList(),
                        0);
        return executeTransaction(function);
    }

    public String getSignedTransactionForGrantUserDataRight(
            String udri, String bid, List<String> dataRight) {
        final Function function =
                new Function(
                        FUNC_GRANTUSERDATARIGHT,
                        Arrays.<Type>asList(
                                new org.fisco.bcos.sdk.v3.codec.datatypes.Utf8String(udri),
                                new org.fisco.bcos.sdk.v3.codec.datatypes.Utf8String(bid),
                                new org.fisco.bcos.sdk.v3.codec.datatypes.DynamicArray<
                                        org.fisco.bcos.sdk.v3.codec.datatypes.Utf8String>(
                                        org.fisco.bcos.sdk.v3.codec.datatypes.Utf8String.class,
                                        org.fisco.bcos.sdk.v3.codec.Utils.typeMap(
                                                dataRight,
                                                org.fisco.bcos.sdk.v3.codec.datatypes.Utf8String
                                                        .class))),
                        Collections.<TypeReference<?>>emptyList(),
                        0);
        return createSignedTransaction(function);
    }

    public String grantUserDataRight(
            String udri, String bid, List<String> dataRight, TransactionCallback callback) {
        final Function function =
                new Function(
                        FUNC_GRANTUSERDATARIGHT,
                        Arrays.<Type>asList(
                                new org.fisco.bcos.sdk.v3.codec.datatypes.Utf8String(udri),
                                new org.fisco.bcos.sdk.v3.codec.datatypes.Utf8String(bid),
                                new org.fisco.bcos.sdk.v3.codec.datatypes.DynamicArray<
                                        org.fisco.bcos.sdk.v3.codec.datatypes.Utf8String>(
                                        org.fisco.bcos.sdk.v3.codec.datatypes.Utf8String.class,
                                        org.fisco.bcos.sdk.v3.codec.Utils.typeMap(
                                                dataRight,
                                                org.fisco.bcos.sdk.v3.codec.datatypes.Utf8String
                                                        .class))),
                        Collections.<TypeReference<?>>emptyList(),
                        0);
        return asyncExecuteTransaction(function, callback);
    }

    public Tuple3<String, String, List<String>> getGrantUserDataRightInput(
            TransactionReceipt transactionReceipt) {
        String data = transactionReceipt.getInput().substring(10);
        final Function function =
                new Function(
                        FUNC_GRANTUSERDATARIGHT,
                        Arrays.<Type>asList(),
                        Arrays.<TypeReference<?>>asList(
                                new TypeReference<Utf8String>() {},
                                new TypeReference<Utf8String>() {},
                                new TypeReference<DynamicArray<Utf8String>>() {}));
        List<Type> results =
                this.functionReturnDecoder.decode(data, function.getOutputParameters());
        return new Tuple3<String, String, List<String>>(
                (String) results.get(0).getValue(),
                (String) results.get(1).getValue(),
                convertToNative((List<Utf8String>) results.get(2).getValue()));
    }

    public TransactionReceipt grantUserManagePermission(String bid, String user) {
        final Function function =
                new Function(
                        FUNC_GRANTUSERMANAGEPERMISSION,
                        Arrays.<Type>asList(
                                new org.fisco.bcos.sdk.v3.codec.datatypes.Utf8String(bid),
                                new org.fisco.bcos.sdk.v3.codec.datatypes.Address(user)),
                        Collections.<TypeReference<?>>emptyList(),
                        0);
        return executeTransaction(function);
    }

    public String getSignedTransactionForGrantUserManagePermission(String bid, String user) {
        final Function function =
                new Function(
                        FUNC_GRANTUSERMANAGEPERMISSION,
                        Arrays.<Type>asList(
                                new org.fisco.bcos.sdk.v3.codec.datatypes.Utf8String(bid),
                                new org.fisco.bcos.sdk.v3.codec.datatypes.Address(user)),
                        Collections.<TypeReference<?>>emptyList(),
                        0);
        return createSignedTransaction(function);
    }

    public String grantUserManagePermission(String bid, String user, TransactionCallback callback) {
        final Function function =
                new Function(
                        FUNC_GRANTUSERMANAGEPERMISSION,
                        Arrays.<Type>asList(
                                new org.fisco.bcos.sdk.v3.codec.datatypes.Utf8String(bid),
                                new org.fisco.bcos.sdk.v3.codec.datatypes.Address(user)),
                        Collections.<TypeReference<?>>emptyList(),
                        0);
        return asyncExecuteTransaction(function, callback);
    }

    public Tuple2<String, String> getGrantUserManagePermissionInput(
            TransactionReceipt transactionReceipt) {
        String data = transactionReceipt.getInput().substring(10);
        final Function function =
                new Function(
                        FUNC_GRANTUSERMANAGEPERMISSION,
                        Arrays.<Type>asList(),
                        Arrays.<TypeReference<?>>asList(
                                new TypeReference<Utf8String>() {},
                                new TypeReference<Address>() {}));
        List<Type> results =
                this.functionReturnDecoder.decode(data, function.getOutputParameters());
        return new Tuple2<String, String>(
                (String) results.get(0).getValue(), (String) results.get(1).getValue());
    }

    public TransactionReceipt grantUserRoles(String bid, List<String> roles) {
        final Function function =
                new Function(
                        FUNC_GRANTUSERROLES,
                        Arrays.<Type>asList(
                                new org.fisco.bcos.sdk.v3.codec.datatypes.Utf8String(bid),
                                new org.fisco.bcos.sdk.v3.codec.datatypes.DynamicArray<
                                        org.fisco.bcos.sdk.v3.codec.datatypes.Utf8String>(
                                        org.fisco.bcos.sdk.v3.codec.datatypes.Utf8String.class,
                                        org.fisco.bcos.sdk.v3.codec.Utils.typeMap(
                                                roles,
                                                org.fisco.bcos.sdk.v3.codec.datatypes.Utf8String
                                                        .class))),
                        Collections.<TypeReference<?>>emptyList(),
                        0);
        return executeTransaction(function);
    }

    public String getSignedTransactionForGrantUserRoles(String bid, List<String> roles) {
        final Function function =
                new Function(
                        FUNC_GRANTUSERROLES,
                        Arrays.<Type>asList(
                                new org.fisco.bcos.sdk.v3.codec.datatypes.Utf8String(bid),
                                new org.fisco.bcos.sdk.v3.codec.datatypes.DynamicArray<
                                        org.fisco.bcos.sdk.v3.codec.datatypes.Utf8String>(
                                        org.fisco.bcos.sdk.v3.codec.datatypes.Utf8String.class,
                                        org.fisco.bcos.sdk.v3.codec.Utils.typeMap(
                                                roles,
                                                org.fisco.bcos.sdk.v3.codec.datatypes.Utf8String
                                                        .class))),
                        Collections.<TypeReference<?>>emptyList(),
                        0);
        return createSignedTransaction(function);
    }

    public String grantUserRoles(String bid, List<String> roles, TransactionCallback callback) {
        final Function function =
                new Function(
                        FUNC_GRANTUSERROLES,
                        Arrays.<Type>asList(
                                new org.fisco.bcos.sdk.v3.codec.datatypes.Utf8String(bid),
                                new org.fisco.bcos.sdk.v3.codec.datatypes.DynamicArray<
                                        org.fisco.bcos.sdk.v3.codec.datatypes.Utf8String>(
                                        org.fisco.bcos.sdk.v3.codec.datatypes.Utf8String.class,
                                        org.fisco.bcos.sdk.v3.codec.Utils.typeMap(
                                                roles,
                                                org.fisco.bcos.sdk.v3.codec.datatypes.Utf8String
                                                        .class))),
                        Collections.<TypeReference<?>>emptyList(),
                        0);
        return asyncExecuteTransaction(function, callback);
    }

    public Tuple2<String, List<String>> getGrantUserRolesInput(
            TransactionReceipt transactionReceipt) {
        String data = transactionReceipt.getInput().substring(10);
        final Function function =
                new Function(
                        FUNC_GRANTUSERROLES,
                        Arrays.<Type>asList(),
                        Arrays.<TypeReference<?>>asList(
                                new TypeReference<Utf8String>() {},
                                new TypeReference<DynamicArray<Utf8String>>() {}));
        List<Type> results =
                this.functionReturnDecoder.decode(data, function.getOutputParameters());
        return new Tuple2<String, List<String>>(
                (String) results.get(0).getValue(),
                convertToNative((List<Utf8String>) results.get(1).getValue()));
    }

    public Boolean hasDAUserManageRole(String bid) throws ContractException {
        final Function function =
                new Function(
                        FUNC_HASDAUSERMANAGEROLE,
                        Arrays.<Type>asList(
                                new org.fisco.bcos.sdk.v3.codec.datatypes.Utf8String(bid)),
                        Arrays.<TypeReference<?>>asList(new TypeReference<Bool>() {}));
        return executeCallWithSingleValueReturn(function, Boolean.class);
    }

    public Boolean hasRole(byte[] role, String account) throws ContractException {
        final Function function =
                new Function(
                        FUNC_HASROLE,
                        Arrays.<Type>asList(
                                new org.fisco.bcos.sdk.v3.codec.datatypes.generated.Bytes32(role),
                                new org.fisco.bcos.sdk.v3.codec.datatypes.Address(account)),
                        Arrays.<TypeReference<?>>asList(new TypeReference<Bool>() {}));
        return executeCallWithSingleValueReturn(function, Boolean.class);
    }

    public TransactionReceipt initialize() {
        final Function function =
                new Function(
                        FUNC_INITIALIZE,
                        Arrays.<Type>asList(),
                        Collections.<TypeReference<?>>emptyList(),
                        0);
        return executeTransaction(function);
    }

    public String getSignedTransactionForInitialize() {
        final Function function =
                new Function(
                        FUNC_INITIALIZE,
                        Arrays.<Type>asList(),
                        Collections.<TypeReference<?>>emptyList(),
                        0);
        return createSignedTransaction(function);
    }

    public String initialize(TransactionCallback callback) {
        final Function function =
                new Function(
                        FUNC_INITIALIZE,
                        Arrays.<Type>asList(),
                        Collections.<TypeReference<?>>emptyList(),
                        0);
        return asyncExecuteTransaction(function, callback);
    }

    public List queryUserRole() throws ContractException {
        final Function function =
                new Function(
                        FUNC_QUERYUSERROLE,
                        Arrays.<Type>asList(),
                        Arrays.<TypeReference<?>>asList(
                                new TypeReference<DynamicArray<Utf8String>>() {}));
        List<Type> result = (List<Type>) executeCallWithSingleValueReturn(function, List.class);
        return convertToNative(result);
    }

    public TransactionReceipt renounceRole(byte[] role, String account) {
        final Function function =
                new Function(
                        FUNC_RENOUNCEROLE,
                        Arrays.<Type>asList(
                                new org.fisco.bcos.sdk.v3.codec.datatypes.generated.Bytes32(role),
                                new org.fisco.bcos.sdk.v3.codec.datatypes.Address(account)),
                        Collections.<TypeReference<?>>emptyList(),
                        0);
        return executeTransaction(function);
    }

    public String getSignedTransactionForRenounceRole(byte[] role, String account) {
        final Function function =
                new Function(
                        FUNC_RENOUNCEROLE,
                        Arrays.<Type>asList(
                                new org.fisco.bcos.sdk.v3.codec.datatypes.generated.Bytes32(role),
                                new org.fisco.bcos.sdk.v3.codec.datatypes.Address(account)),
                        Collections.<TypeReference<?>>emptyList(),
                        0);
        return createSignedTransaction(function);
    }

    public String renounceRole(byte[] role, String account, TransactionCallback callback) {
        final Function function =
                new Function(
                        FUNC_RENOUNCEROLE,
                        Arrays.<Type>asList(
                                new org.fisco.bcos.sdk.v3.codec.datatypes.generated.Bytes32(role),
                                new org.fisco.bcos.sdk.v3.codec.datatypes.Address(account)),
                        Collections.<TypeReference<?>>emptyList(),
                        0);
        return asyncExecuteTransaction(function, callback);
    }

    public Tuple2<byte[], String> getRenounceRoleInput(TransactionReceipt transactionReceipt) {
        String data = transactionReceipt.getInput().substring(10);
        final Function function =
                new Function(
                        FUNC_RENOUNCEROLE,
                        Arrays.<Type>asList(),
                        Arrays.<TypeReference<?>>asList(
                                new TypeReference<Bytes32>() {}, new TypeReference<Address>() {}));
        List<Type> results =
                this.functionReturnDecoder.decode(data, function.getOutputParameters());
        return new Tuple2<byte[], String>(
                (byte[]) results.get(0).getValue(), (String) results.get(1).getValue());
    }

    public TransactionReceipt revokeRole(byte[] role, String account) {
        final Function function =
                new Function(
                        FUNC_REVOKEROLE,
                        Arrays.<Type>asList(
                                new org.fisco.bcos.sdk.v3.codec.datatypes.generated.Bytes32(role),
                                new org.fisco.bcos.sdk.v3.codec.datatypes.Address(account)),
                        Collections.<TypeReference<?>>emptyList(),
                        4);
        return executeTransaction(function);
    }

    public String getSignedTransactionForRevokeRole(byte[] role, String account) {
        final Function function =
                new Function(
                        FUNC_REVOKEROLE,
                        Arrays.<Type>asList(
                                new org.fisco.bcos.sdk.v3.codec.datatypes.generated.Bytes32(role),
                                new org.fisco.bcos.sdk.v3.codec.datatypes.Address(account)),
                        Collections.<TypeReference<?>>emptyList(),
                        4);
        return createSignedTransaction(function);
    }

    public String revokeRole(byte[] role, String account, TransactionCallback callback) {
        final Function function =
                new Function(
                        FUNC_REVOKEROLE,
                        Arrays.<Type>asList(
                                new org.fisco.bcos.sdk.v3.codec.datatypes.generated.Bytes32(role),
                                new org.fisco.bcos.sdk.v3.codec.datatypes.Address(account)),
                        Collections.<TypeReference<?>>emptyList(),
                        4);
        return asyncExecuteTransaction(function, callback);
    }

    public Tuple2<byte[], String> getRevokeRoleInput(TransactionReceipt transactionReceipt) {
        String data = transactionReceipt.getInput().substring(10);
        final Function function =
                new Function(
                        FUNC_REVOKEROLE,
                        Arrays.<Type>asList(),
                        Arrays.<TypeReference<?>>asList(
                                new TypeReference<Bytes32>() {}, new TypeReference<Address>() {}));
        List<Type> results =
                this.functionReturnDecoder.decode(data, function.getOutputParameters());
        return new Tuple2<byte[], String>(
                (byte[]) results.get(0).getValue(), (String) results.get(1).getValue());
    }

    public TransactionReceipt revokeUserManagePermission(String bid) {
        final Function function =
                new Function(
                        FUNC_REVOKEUSERMANAGEPERMISSION,
                        Arrays.<Type>asList(
                                new org.fisco.bcos.sdk.v3.codec.datatypes.Utf8String(bid)),
                        Collections.<TypeReference<?>>emptyList(),
                        0);
        return executeTransaction(function);
    }

    public String getSignedTransactionForRevokeUserManagePermission(String bid) {
        final Function function =
                new Function(
                        FUNC_REVOKEUSERMANAGEPERMISSION,
                        Arrays.<Type>asList(
                                new org.fisco.bcos.sdk.v3.codec.datatypes.Utf8String(bid)),
                        Collections.<TypeReference<?>>emptyList(),
                        0);
        return createSignedTransaction(function);
    }

    public String revokeUserManagePermission(String bid, TransactionCallback callback) {
        final Function function =
                new Function(
                        FUNC_REVOKEUSERMANAGEPERMISSION,
                        Arrays.<Type>asList(
                                new org.fisco.bcos.sdk.v3.codec.datatypes.Utf8String(bid)),
                        Collections.<TypeReference<?>>emptyList(),
                        0);
        return asyncExecuteTransaction(function, callback);
    }

    public Tuple1<String> getRevokeUserManagePermissionInput(
            TransactionReceipt transactionReceipt) {
        String data = transactionReceipt.getInput().substring(10);
        final Function function =
                new Function(
                        FUNC_REVOKEUSERMANAGEPERMISSION,
                        Arrays.<Type>asList(),
                        Arrays.<TypeReference<?>>asList(new TypeReference<Utf8String>() {}));
        List<Type> results =
                this.functionReturnDecoder.decode(data, function.getOutputParameters());
        return new Tuple1<String>((String) results.get(0).getValue());
    }

    public TransactionReceipt revokeUserRoles(String bid, List<String> roles) {
        final Function function =
                new Function(
                        FUNC_REVOKEUSERROLES,
                        Arrays.<Type>asList(
                                new org.fisco.bcos.sdk.v3.codec.datatypes.Utf8String(bid),
                                new org.fisco.bcos.sdk.v3.codec.datatypes.DynamicArray<
                                        org.fisco.bcos.sdk.v3.codec.datatypes.Utf8String>(
                                        org.fisco.bcos.sdk.v3.codec.datatypes.Utf8String.class,
                                        org.fisco.bcos.sdk.v3.codec.Utils.typeMap(
                                                roles,
                                                org.fisco.bcos.sdk.v3.codec.datatypes.Utf8String
                                                        .class))),
                        Collections.<TypeReference<?>>emptyList(),
                        0);
        return executeTransaction(function);
    }

    public String getSignedTransactionForRevokeUserRoles(String bid, List<String> roles) {
        final Function function =
                new Function(
                        FUNC_REVOKEUSERROLES,
                        Arrays.<Type>asList(
                                new org.fisco.bcos.sdk.v3.codec.datatypes.Utf8String(bid),
                                new org.fisco.bcos.sdk.v3.codec.datatypes.DynamicArray<
                                        org.fisco.bcos.sdk.v3.codec.datatypes.Utf8String>(
                                        org.fisco.bcos.sdk.v3.codec.datatypes.Utf8String.class,
                                        org.fisco.bcos.sdk.v3.codec.Utils.typeMap(
                                                roles,
                                                org.fisco.bcos.sdk.v3.codec.datatypes.Utf8String
                                                        .class))),
                        Collections.<TypeReference<?>>emptyList(),
                        0);
        return createSignedTransaction(function);
    }

    public String revokeUserRoles(String bid, List<String> roles, TransactionCallback callback) {
        final Function function =
                new Function(
                        FUNC_REVOKEUSERROLES,
                        Arrays.<Type>asList(
                                new org.fisco.bcos.sdk.v3.codec.datatypes.Utf8String(bid),
                                new org.fisco.bcos.sdk.v3.codec.datatypes.DynamicArray<
                                        org.fisco.bcos.sdk.v3.codec.datatypes.Utf8String>(
                                        org.fisco.bcos.sdk.v3.codec.datatypes.Utf8String.class,
                                        org.fisco.bcos.sdk.v3.codec.Utils.typeMap(
                                                roles,
                                                org.fisco.bcos.sdk.v3.codec.datatypes.Utf8String
                                                        .class))),
                        Collections.<TypeReference<?>>emptyList(),
                        0);
        return asyncExecuteTransaction(function, callback);
    }

    public Tuple2<String, List<String>> getRevokeUserRolesInput(
            TransactionReceipt transactionReceipt) {
        String data = transactionReceipt.getInput().substring(10);
        final Function function =
                new Function(
                        FUNC_REVOKEUSERROLES,
                        Arrays.<Type>asList(),
                        Arrays.<TypeReference<?>>asList(
                                new TypeReference<Utf8String>() {},
                                new TypeReference<DynamicArray<Utf8String>>() {}));
        List<Type> results =
                this.functionReturnDecoder.decode(data, function.getOutputParameters());
        return new Tuple2<String, List<String>>(
                (String) results.get(0).getValue(),
                convertToNative((List<Utf8String>) results.get(1).getValue()));
    }

    public TransactionReceipt setChainName(String name) {
        final Function function =
                new Function(
                        FUNC_SETCHAINNAME,
                        Arrays.<Type>asList(
                                new org.fisco.bcos.sdk.v3.codec.datatypes.Utf8String(name)),
                        Collections.<TypeReference<?>>emptyList(),
                        0);
        return executeTransaction(function);
    }

    public String getSignedTransactionForSetChainName(String name) {
        final Function function =
                new Function(
                        FUNC_SETCHAINNAME,
                        Arrays.<Type>asList(
                                new org.fisco.bcos.sdk.v3.codec.datatypes.Utf8String(name)),
                        Collections.<TypeReference<?>>emptyList(),
                        0);
        return createSignedTransaction(function);
    }

    public String setChainName(String name, TransactionCallback callback) {
        final Function function =
                new Function(
                        FUNC_SETCHAINNAME,
                        Arrays.<Type>asList(
                                new org.fisco.bcos.sdk.v3.codec.datatypes.Utf8String(name)),
                        Collections.<TypeReference<?>>emptyList(),
                        0);
        return asyncExecuteTransaction(function, callback);
    }

    public Tuple1<String> getSetChainNameInput(TransactionReceipt transactionReceipt) {
        String data = transactionReceipt.getInput().substring(10);
        final Function function =
                new Function(
                        FUNC_SETCHAINNAME,
                        Arrays.<Type>asList(),
                        Arrays.<TypeReference<?>>asList(new TypeReference<Utf8String>() {}));
        List<Type> results =
                this.functionReturnDecoder.decode(data, function.getOutputParameters());
        return new Tuple1<String>((String) results.get(0).getValue());
    }

    public TransactionReceipt setDataRightCategory(List<String> fields) {
        final Function function =
                new Function(
                        FUNC_SETDATARIGHTCATEGORY,
                        Arrays.<Type>asList(
                                new org.fisco.bcos.sdk.v3.codec.datatypes.DynamicArray<
                                        org.fisco.bcos.sdk.v3.codec.datatypes.Utf8String>(
                                        org.fisco.bcos.sdk.v3.codec.datatypes.Utf8String.class,
                                        org.fisco.bcos.sdk.v3.codec.Utils.typeMap(
                                                fields,
                                                org.fisco.bcos.sdk.v3.codec.datatypes.Utf8String
                                                        .class))),
                        Collections.<TypeReference<?>>emptyList(),
                        0);
        return executeTransaction(function);
    }

    public String getSignedTransactionForSetDataRightCategory(List<String> fields) {
        final Function function =
                new Function(
                        FUNC_SETDATARIGHTCATEGORY,
                        Arrays.<Type>asList(
                                new org.fisco.bcos.sdk.v3.codec.datatypes.DynamicArray<
                                        org.fisco.bcos.sdk.v3.codec.datatypes.Utf8String>(
                                        org.fisco.bcos.sdk.v3.codec.datatypes.Utf8String.class,
                                        org.fisco.bcos.sdk.v3.codec.Utils.typeMap(
                                                fields,
                                                org.fisco.bcos.sdk.v3.codec.datatypes.Utf8String
                                                        .class))),
                        Collections.<TypeReference<?>>emptyList(),
                        0);
        return createSignedTransaction(function);
    }

    public String setDataRightCategory(List<String> fields, TransactionCallback callback) {
        final Function function =
                new Function(
                        FUNC_SETDATARIGHTCATEGORY,
                        Arrays.<Type>asList(
                                new org.fisco.bcos.sdk.v3.codec.datatypes.DynamicArray<
                                        org.fisco.bcos.sdk.v3.codec.datatypes.Utf8String>(
                                        org.fisco.bcos.sdk.v3.codec.datatypes.Utf8String.class,
                                        org.fisco.bcos.sdk.v3.codec.Utils.typeMap(
                                                fields,
                                                org.fisco.bcos.sdk.v3.codec.datatypes.Utf8String
                                                        .class))),
                        Collections.<TypeReference<?>>emptyList(),
                        0);
        return asyncExecuteTransaction(function, callback);
    }

    public Tuple1<List<String>> getSetDataRightCategoryInput(
            TransactionReceipt transactionReceipt) {
        String data = transactionReceipt.getInput().substring(10);
        final Function function =
                new Function(
                        FUNC_SETDATARIGHTCATEGORY,
                        Arrays.<Type>asList(),
                        Arrays.<TypeReference<?>>asList(
                                new TypeReference<DynamicArray<Utf8String>>() {}));
        List<Type> results =
                this.functionReturnDecoder.decode(data, function.getOutputParameters());
        return new Tuple1<List<String>>(
                convertToNative((List<Utf8String>) results.get(0).getValue()));
    }

    public TransactionReceipt setDataRightSupportVariableDataFields(
            String category, List<String> fields) {
        final Function function =
                new Function(
                        FUNC_SETDATARIGHTSUPPORTVARIABLEDATAFIELDS,
                        Arrays.<Type>asList(
                                new org.fisco.bcos.sdk.v3.codec.datatypes.Utf8String(category),
                                new org.fisco.bcos.sdk.v3.codec.datatypes.DynamicArray<
                                        org.fisco.bcos.sdk.v3.codec.datatypes.Utf8String>(
                                        org.fisco.bcos.sdk.v3.codec.datatypes.Utf8String.class,
                                        org.fisco.bcos.sdk.v3.codec.Utils.typeMap(
                                                fields,
                                                org.fisco.bcos.sdk.v3.codec.datatypes.Utf8String
                                                        .class))),
                        Collections.<TypeReference<?>>emptyList(),
                        4);
        return executeTransaction(function);
    }

    public String getSignedTransactionForSetDataRightSupportVariableDataFields(
            String category, List<String> fields) {
        final Function function =
                new Function(
                        FUNC_SETDATARIGHTSUPPORTVARIABLEDATAFIELDS,
                        Arrays.<Type>asList(
                                new org.fisco.bcos.sdk.v3.codec.datatypes.Utf8String(category),
                                new org.fisco.bcos.sdk.v3.codec.datatypes.DynamicArray<
                                        org.fisco.bcos.sdk.v3.codec.datatypes.Utf8String>(
                                        org.fisco.bcos.sdk.v3.codec.datatypes.Utf8String.class,
                                        org.fisco.bcos.sdk.v3.codec.Utils.typeMap(
                                                fields,
                                                org.fisco.bcos.sdk.v3.codec.datatypes.Utf8String
                                                        .class))),
                        Collections.<TypeReference<?>>emptyList(),
                        4);
        return createSignedTransaction(function);
    }

    public String setDataRightSupportVariableDataFields(
            String category, List<String> fields, TransactionCallback callback) {
        final Function function =
                new Function(
                        FUNC_SETDATARIGHTSUPPORTVARIABLEDATAFIELDS,
                        Arrays.<Type>asList(
                                new org.fisco.bcos.sdk.v3.codec.datatypes.Utf8String(category),
                                new org.fisco.bcos.sdk.v3.codec.datatypes.DynamicArray<
                                        org.fisco.bcos.sdk.v3.codec.datatypes.Utf8String>(
                                        org.fisco.bcos.sdk.v3.codec.datatypes.Utf8String.class,
                                        org.fisco.bcos.sdk.v3.codec.Utils.typeMap(
                                                fields,
                                                org.fisco.bcos.sdk.v3.codec.datatypes.Utf8String
                                                        .class))),
                        Collections.<TypeReference<?>>emptyList(),
                        4);
        return asyncExecuteTransaction(function, callback);
    }

    public Tuple2<String, List<String>> getSetDataRightSupportVariableDataFieldsInput(
            TransactionReceipt transactionReceipt) {
        String data = transactionReceipt.getInput().substring(10);
        final Function function =
                new Function(
                        FUNC_SETDATARIGHTSUPPORTVARIABLEDATAFIELDS,
                        Arrays.<Type>asList(),
                        Arrays.<TypeReference<?>>asList(
                                new TypeReference<Utf8String>() {},
                                new TypeReference<DynamicArray<Utf8String>>() {}));
        List<Type> results =
                this.functionReturnDecoder.decode(data, function.getOutputParameters());
        return new Tuple2<String, List<String>>(
                (String) results.get(0).getValue(),
                convertToNative((List<Utf8String>) results.get(1).getValue()));
    }

    public TransactionReceipt setTextMaxLen(BigInteger len) {
        final Function function =
                new Function(
                        FUNC_SETTEXTMAXLEN,
                        Arrays.<Type>asList(
                                new org.fisco.bcos.sdk.v3.codec.datatypes.generated.Uint32(len)),
                        Collections.<TypeReference<?>>emptyList(),
                        0);
        return executeTransaction(function);
    }

    public String getSignedTransactionForSetTextMaxLen(BigInteger len) {
        final Function function =
                new Function(
                        FUNC_SETTEXTMAXLEN,
                        Arrays.<Type>asList(
                                new org.fisco.bcos.sdk.v3.codec.datatypes.generated.Uint32(len)),
                        Collections.<TypeReference<?>>emptyList(),
                        0);
        return createSignedTransaction(function);
    }

    public String setTextMaxLen(BigInteger len, TransactionCallback callback) {
        final Function function =
                new Function(
                        FUNC_SETTEXTMAXLEN,
                        Arrays.<Type>asList(
                                new org.fisco.bcos.sdk.v3.codec.datatypes.generated.Uint32(len)),
                        Collections.<TypeReference<?>>emptyList(),
                        0);
        return asyncExecuteTransaction(function, callback);
    }

    public Tuple1<BigInteger> getSetTextMaxLenInput(TransactionReceipt transactionReceipt) {
        String data = transactionReceipt.getInput().substring(10);
        final Function function =
                new Function(
                        FUNC_SETTEXTMAXLEN,
                        Arrays.<Type>asList(),
                        Arrays.<TypeReference<?>>asList(new TypeReference<Uint32>() {}));
        List<Type> results =
                this.functionReturnDecoder.decode(data, function.getOutputParameters());
        return new Tuple1<BigInteger>((BigInteger) results.get(0).getValue());
    }

    public TransactionReceipt setstrArrayMaxLen(BigInteger len) {
        final Function function =
                new Function(
                        FUNC_SETSTRARRAYMAXLEN,
                        Arrays.<Type>asList(
                                new org.fisco.bcos.sdk.v3.codec.datatypes.generated.Uint32(len)),
                        Collections.<TypeReference<?>>emptyList(),
                        0);
        return executeTransaction(function);
    }

    public String getSignedTransactionForSetstrArrayMaxLen(BigInteger len) {
        final Function function =
                new Function(
                        FUNC_SETSTRARRAYMAXLEN,
                        Arrays.<Type>asList(
                                new org.fisco.bcos.sdk.v3.codec.datatypes.generated.Uint32(len)),
                        Collections.<TypeReference<?>>emptyList(),
                        0);
        return createSignedTransaction(function);
    }

    public String setstrArrayMaxLen(BigInteger len, TransactionCallback callback) {
        final Function function =
                new Function(
                        FUNC_SETSTRARRAYMAXLEN,
                        Arrays.<Type>asList(
                                new org.fisco.bcos.sdk.v3.codec.datatypes.generated.Uint32(len)),
                        Collections.<TypeReference<?>>emptyList(),
                        0);
        return asyncExecuteTransaction(function, callback);
    }

    public Tuple1<BigInteger> getSetstrArrayMaxLenInput(TransactionReceipt transactionReceipt) {
        String data = transactionReceipt.getInput().substring(10);
        final Function function =
                new Function(
                        FUNC_SETSTRARRAYMAXLEN,
                        Arrays.<Type>asList(),
                        Arrays.<TypeReference<?>>asList(new TypeReference<Uint32>() {}));
        List<Type> results =
                this.functionReturnDecoder.decode(data, function.getOutputParameters());
        return new Tuple1<BigInteger>((BigInteger) results.get(0).getValue());
    }

    public Boolean supportsInterface(byte[] interfaceId) throws ContractException {
        final Function function =
                new Function(
                        FUNC_SUPPORTSINTERFACE,
                        Arrays.<Type>asList(
                                new org.fisco.bcos.sdk.v3.codec.datatypes.generated.Bytes4(
                                        interfaceId)),
                        Arrays.<TypeReference<?>>asList(new TypeReference<Bool>() {}));
        return executeCallWithSingleValueReturn(function, Boolean.class);
    }

    public TransactionReceipt withdrawDataRightRegister(String udri, List<String> dataRight) {
        final Function function =
                new Function(
                        FUNC_WITHDRAWDATARIGHTREGISTER,
                        Arrays.<Type>asList(
                                new org.fisco.bcos.sdk.v3.codec.datatypes.Utf8String(udri),
                                new org.fisco.bcos.sdk.v3.codec.datatypes.DynamicArray<
                                        org.fisco.bcos.sdk.v3.codec.datatypes.Utf8String>(
                                        org.fisco.bcos.sdk.v3.codec.datatypes.Utf8String.class,
                                        org.fisco.bcos.sdk.v3.codec.Utils.typeMap(
                                                dataRight,
                                                org.fisco.bcos.sdk.v3.codec.datatypes.Utf8String
                                                        .class))),
                        Collections.<TypeReference<?>>emptyList(),
                        0);
        return executeTransaction(function);
    }

    public String getSignedTransactionForWithdrawDataRightRegister(
            String udri, List<String> dataRight) {
        final Function function =
                new Function(
                        FUNC_WITHDRAWDATARIGHTREGISTER,
                        Arrays.<Type>asList(
                                new org.fisco.bcos.sdk.v3.codec.datatypes.Utf8String(udri),
                                new org.fisco.bcos.sdk.v3.codec.datatypes.DynamicArray<
                                        org.fisco.bcos.sdk.v3.codec.datatypes.Utf8String>(
                                        org.fisco.bcos.sdk.v3.codec.datatypes.Utf8String.class,
                                        org.fisco.bcos.sdk.v3.codec.Utils.typeMap(
                                                dataRight,
                                                org.fisco.bcos.sdk.v3.codec.datatypes.Utf8String
                                                        .class))),
                        Collections.<TypeReference<?>>emptyList(),
                        0);
        return createSignedTransaction(function);
    }

    public String withdrawDataRightRegister(
            String udri, List<String> dataRight, TransactionCallback callback) {
        final Function function =
                new Function(
                        FUNC_WITHDRAWDATARIGHTREGISTER,
                        Arrays.<Type>asList(
                                new org.fisco.bcos.sdk.v3.codec.datatypes.Utf8String(udri),
                                new org.fisco.bcos.sdk.v3.codec.datatypes.DynamicArray<
                                        org.fisco.bcos.sdk.v3.codec.datatypes.Utf8String>(
                                        org.fisco.bcos.sdk.v3.codec.datatypes.Utf8String.class,
                                        org.fisco.bcos.sdk.v3.codec.Utils.typeMap(
                                                dataRight,
                                                org.fisco.bcos.sdk.v3.codec.datatypes.Utf8String
                                                        .class))),
                        Collections.<TypeReference<?>>emptyList(),
                        0);
        return asyncExecuteTransaction(function, callback);
    }

    public Tuple2<String, List<String>> getWithdrawDataRightRegisterInput(
            TransactionReceipt transactionReceipt) {
        String data = transactionReceipt.getInput().substring(10);
        final Function function =
                new Function(
                        FUNC_WITHDRAWDATARIGHTREGISTER,
                        Arrays.<Type>asList(),
                        Arrays.<TypeReference<?>>asList(
                                new TypeReference<Utf8String>() {},
                                new TypeReference<DynamicArray<Utf8String>>() {}));
        List<Type> results =
                this.functionReturnDecoder.decode(data, function.getOutputParameters());
        return new Tuple2<String, List<String>>(
                (String) results.get(0).getValue(),
                convertToNative((List<Utf8String>) results.get(1).getValue()));
    }

    public TransactionReceipt withdrawReviewEvidence(String udri, String reviewerBid) {
        final Function function =
                new Function(
                        FUNC_WITHDRAWREVIEWEVIDENCE,
                        Arrays.<Type>asList(
                                new org.fisco.bcos.sdk.v3.codec.datatypes.Utf8String(udri),
                                new org.fisco.bcos.sdk.v3.codec.datatypes.Utf8String(reviewerBid)),
                        Collections.<TypeReference<?>>emptyList(),
                        0);
        return executeTransaction(function);
    }

    public String getSignedTransactionForWithdrawReviewEvidence(String udri, String reviewerBid) {
        final Function function =
                new Function(
                        FUNC_WITHDRAWREVIEWEVIDENCE,
                        Arrays.<Type>asList(
                                new org.fisco.bcos.sdk.v3.codec.datatypes.Utf8String(udri),
                                new org.fisco.bcos.sdk.v3.codec.datatypes.Utf8String(reviewerBid)),
                        Collections.<TypeReference<?>>emptyList(),
                        0);
        return createSignedTransaction(function);
    }

    public String withdrawReviewEvidence(
            String udri, String reviewerBid, TransactionCallback callback) {
        final Function function =
                new Function(
                        FUNC_WITHDRAWREVIEWEVIDENCE,
                        Arrays.<Type>asList(
                                new org.fisco.bcos.sdk.v3.codec.datatypes.Utf8String(udri),
                                new org.fisco.bcos.sdk.v3.codec.datatypes.Utf8String(reviewerBid)),
                        Collections.<TypeReference<?>>emptyList(),
                        0);
        return asyncExecuteTransaction(function, callback);
    }

    public Tuple2<String, String> getWithdrawReviewEvidenceInput(
            TransactionReceipt transactionReceipt) {
        String data = transactionReceipt.getInput().substring(10);
        final Function function =
                new Function(
                        FUNC_WITHDRAWREVIEWEVIDENCE,
                        Arrays.<Type>asList(),
                        Arrays.<TypeReference<?>>asList(
                                new TypeReference<Utf8String>() {},
                                new TypeReference<Utf8String>() {}));
        List<Type> results =
                this.functionReturnDecoder.decode(data, function.getOutputParameters());
        return new Tuple2<String, String>(
                (String) results.get(0).getValue(), (String) results.get(1).getValue());
    }

    public TransactionReceipt withdrawUserDataRight(
            String udri, String bid, List<String> dataRight) {
        final Function function =
                new Function(
                        FUNC_WITHDRAWUSERDATARIGHT,
                        Arrays.<Type>asList(
                                new org.fisco.bcos.sdk.v3.codec.datatypes.Utf8String(udri),
                                new org.fisco.bcos.sdk.v3.codec.datatypes.Utf8String(bid),
                                new org.fisco.bcos.sdk.v3.codec.datatypes.DynamicArray<
                                        org.fisco.bcos.sdk.v3.codec.datatypes.Utf8String>(
                                        org.fisco.bcos.sdk.v3.codec.datatypes.Utf8String.class,
                                        org.fisco.bcos.sdk.v3.codec.Utils.typeMap(
                                                dataRight,
                                                org.fisco.bcos.sdk.v3.codec.datatypes.Utf8String
                                                        .class))),
                        Collections.<TypeReference<?>>emptyList(),
                        0);
        return executeTransaction(function);
    }

    public String getSignedTransactionForWithdrawUserDataRight(
            String udri, String bid, List<String> dataRight) {
        final Function function =
                new Function(
                        FUNC_WITHDRAWUSERDATARIGHT,
                        Arrays.<Type>asList(
                                new org.fisco.bcos.sdk.v3.codec.datatypes.Utf8String(udri),
                                new org.fisco.bcos.sdk.v3.codec.datatypes.Utf8String(bid),
                                new org.fisco.bcos.sdk.v3.codec.datatypes.DynamicArray<
                                        org.fisco.bcos.sdk.v3.codec.datatypes.Utf8String>(
                                        org.fisco.bcos.sdk.v3.codec.datatypes.Utf8String.class,
                                        org.fisco.bcos.sdk.v3.codec.Utils.typeMap(
                                                dataRight,
                                                org.fisco.bcos.sdk.v3.codec.datatypes.Utf8String
                                                        .class))),
                        Collections.<TypeReference<?>>emptyList(),
                        0);
        return createSignedTransaction(function);
    }

    public String withdrawUserDataRight(
            String udri, String bid, List<String> dataRight, TransactionCallback callback) {
        final Function function =
                new Function(
                        FUNC_WITHDRAWUSERDATARIGHT,
                        Arrays.<Type>asList(
                                new org.fisco.bcos.sdk.v3.codec.datatypes.Utf8String(udri),
                                new org.fisco.bcos.sdk.v3.codec.datatypes.Utf8String(bid),
                                new org.fisco.bcos.sdk.v3.codec.datatypes.DynamicArray<
                                        org.fisco.bcos.sdk.v3.codec.datatypes.Utf8String>(
                                        org.fisco.bcos.sdk.v3.codec.datatypes.Utf8String.class,
                                        org.fisco.bcos.sdk.v3.codec.Utils.typeMap(
                                                dataRight,
                                                org.fisco.bcos.sdk.v3.codec.datatypes.Utf8String
                                                        .class))),
                        Collections.<TypeReference<?>>emptyList(),
                        0);
        return asyncExecuteTransaction(function, callback);
    }

    public Tuple3<String, String, List<String>> getWithdrawUserDataRightInput(
            TransactionReceipt transactionReceipt) {
        String data = transactionReceipt.getInput().substring(10);
        final Function function =
                new Function(
                        FUNC_WITHDRAWUSERDATARIGHT,
                        Arrays.<Type>asList(),
                        Arrays.<TypeReference<?>>asList(
                                new TypeReference<Utf8String>() {},
                                new TypeReference<Utf8String>() {},
                                new TypeReference<DynamicArray<Utf8String>>() {}));
        List<Type> results =
                this.functionReturnDecoder.decode(data, function.getOutputParameters());
        return new Tuple3<String, String, List<String>>(
                (String) results.get(0).getValue(),
                (String) results.get(1).getValue(),
                convertToNative((List<Utf8String>) results.get(2).getValue()));
    }

    public static DAEvidenceController load(
            String contractAddress, Client client, CryptoKeyPair credential) {
        return new DAEvidenceController(contractAddress, client, credential);
    }

    public static DAEvidenceController deploy(Client client, CryptoKeyPair credential)
            throws ContractException {
        return deploy(
                DAEvidenceController.class,
                client,
                credential,
                getBinary(client.getCryptoSuite()),
                getABI(),
                null,
                null);
    }

    public static class EvidenceCommStoredEventResponse {
        public TransactionReceipt.Logs log;

        public String sender;

        public byte[] eid;
    }

    public static class EvidenceStoredEventResponse {
        public TransactionReceipt.Logs log;

        public String sender;

        public byte[] udri;

        public byte[] usci;
    }

    public static class InitializedEventResponse {
        public TransactionReceipt.Logs log;

        public BigInteger version;
    }

    public static class RoleAdminChangedEventResponse {
        public TransactionReceipt.Logs log;

        public byte[] role;

        public byte[] previousAdminRole;

        public byte[] newAdminRole;
    }

    public static class RoleGrantedEventResponse {
        public TransactionReceipt.Logs log;

        public byte[] role;

        public String account;

        public String sender;
    }

    public static class RoleRevokedEventResponse {
        public TransactionReceipt.Logs log;

        public byte[] role;

        public String account;

        public String sender;
    }

    public static class UserCreatedEventResponse {
        public TransactionReceipt.Logs log;

        public String sender;

        public byte[] bid;

        public byte[] usci;
    }

    public static class UserRoleChangedEventResponse {
        public TransactionReceipt.Logs log;

        public String sender;

        public byte[] bid;
    }
}
