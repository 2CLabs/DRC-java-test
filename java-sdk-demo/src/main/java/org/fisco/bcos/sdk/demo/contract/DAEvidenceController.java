package org.fisco.bcos.sdk.demo.contract;

import java.math.BigInteger;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.Collections;
import java.util.List;
import org.fisco.bcos.sdk.v3.client.Client;
import org.fisco.bcos.sdk.v3.codec.datatypes.Address;
import org.fisco.bcos.sdk.v3.codec.datatypes.Bool;
import org.fisco.bcos.sdk.v3.codec.datatypes.DynamicArray;
import org.fisco.bcos.sdk.v3.codec.datatypes.Event;
import org.fisco.bcos.sdk.v3.codec.datatypes.Function;
import org.fisco.bcos.sdk.v3.codec.datatypes.Type;
import org.fisco.bcos.sdk.v3.codec.datatypes.TypeReference;
import org.fisco.bcos.sdk.v3.codec.datatypes.Utf8String;
import org.fisco.bcos.sdk.v3.codec.datatypes.generated.Bytes32;
import org.fisco.bcos.sdk.v3.codec.datatypes.generated.Uint256;
import org.fisco.bcos.sdk.v3.codec.datatypes.generated.Uint32;
import org.fisco.bcos.sdk.v3.codec.datatypes.generated.Uint8;
import org.fisco.bcos.sdk.v3.codec.datatypes.generated.tuples.generated.Tuple1;
import org.fisco.bcos.sdk.v3.codec.datatypes.generated.tuples.generated.Tuple2;
import org.fisco.bcos.sdk.v3.codec.datatypes.generated.tuples.generated.Tuple3;
import org.fisco.bcos.sdk.v3.codec.datatypes.generated.tuples.generated.Tuple5;
import org.fisco.bcos.sdk.v3.codec.datatypes.generated.tuples.generated.Tuple6;
import org.fisco.bcos.sdk.v3.contract.Contract;
import org.fisco.bcos.sdk.v3.crypto.CryptoSuite;
import org.fisco.bcos.sdk.v3.crypto.keypair.CryptoKeyPair;
import org.fisco.bcos.sdk.v3.model.CryptoType;
import org.fisco.bcos.sdk.v3.model.TransactionReceipt;
import org.fisco.bcos.sdk.v3.model.callback.TransactionCallback;
import org.fisco.bcos.sdk.v3.transaction.model.exception.ContractException;

@SuppressWarnings("unchecked")
public class DAEvidenceController extends Contract {
    public static final String[] BINARY_ARRAY = {
        "",
        "",
        "506040805180820190915260058152641c9a59da1d60da1b602082015292915050611e07565b80519060200120905061203d85826040518060400160405280600d81526020016c7265766965775f636f756e743d60981b815250613344565b63ffffffff1695945050505050565b6040805180820190915260058152641c9a59da1d60da1b60208201526000906120759083611e07565b8051602090910120905060008061208d60c933613852565b90925090506001821515146120e05760405162461bcd60e51b815260206004820152601960248201527829b2b73232b91034b9903737ba103932b3b4b9ba32b932b21760391b6044820152606401610727565b60006120ed60c985613be5565b905080600801546000141561213d5760405162461bcd60e51b815260206004820152601660248201527532bb34b232b731b29034b9903737ba1032bc34b9ba1760511b6044820152606401610727565b60006121708560405180604001604052806003815260200162189a5960ea1b81525060c96133f59092919063ffffffff16565b905061217c83826139ad565b1515600114610fcb5760405162461bcd60e51b815260206004820152601d60248201527f53656e646572206973206e6f742065766964656e6365206f776e65722e0000006044820152606401610727565b60008151116122165760405162461bcd60e51b81526020600482015260156024820152747661726961626c654461746120697320656d70747960581b6044820152606401610727565b6002815161222491906155ff565b1561226d5760405162461bcd60e51b81526020600482015260196024820152783b30b934b0b13632a230ba30903632b733ba341032b93937b960391b6044820152606401610727565b6040805180820190915260058152641c9a59da1d60da1b60208201526000906122969084611e07565b805190602001209050611a9b8482604051806040016040528060058152602001641c9a59da1d60da1b81525085613c2b565b61073a82826117ba565b6122dc83836137bb565b15156001146122fd5760405162461bcd60e51b815260040161072790615520565b600061230984846137eb565b905060005b82518163ffffffff161015610eda5761236461233e611715858463ffffffff16815181106116dc576116dc6154a4565b60408051808201909152600580825264195e1a5cdd60da1b602083015285019190613815565b508061236f816154d0565b91505061230e565b6040805180820190915260058152641c9a59da1d60da1b60208201526000906123a09084611e07565b80519060200120905060006123d1858360405180604001604052806003815260200162189a5960ea1b8152506133f5565b9050610eda85838386613d90565b600082815260208481526040822083516123fb92850190614a41565b506001949350505050565b606061241285856137bb565b15156001146124335760405162461bcd60e51b815260040161072790615549565b600082116124775760405162461bcd60e51b815260206004820152601160248201527031b7bab73a1034b99034b73b30b634b21760791b6044820152606401610727565b600061248386866137eb565b9050600080846001600160401b038111156124a0576124a0614bdc565b6040519080825280602002602001820160405280156124d357816020015b60608152602001906001900390816124be5790505b509050855b6124e28688615621565b8110156125a15760006125256117156124fa84613e2b565b60408051808201909152600e81526d32afb934b3b43a1d34b73232bc1d60911b602082015290611e07565b6000818152600687016020526040812054919250506125618b82604051806040016040528060048152602001637564726960e01b8152506133f5565b848681518110612573576125736154a4565b6020026020010181905250848061258990615639565b9550505050808061259990615639565b9150506124d8565b50979650505050505050565b60608060606125bc85856137bb565b15156001146125dd5760405162461bcd60e51b815260040161072790615520565b60006125e986866137eb565b90508060010180546125fa906155c4565b80601f0160208091040260200160405190810160405280929190818152602001828054612626906155c4565b80156126735780601f1061264857610100808354040283529160200191612673565b820191906000526020600020905b81548152906001019060200180831161265657829003601f168201915b50505050509350806002018054612689906155c4565b80601f01602080910402602001604051908101604052809291908181526020018280546126b5906155c4565b80156127025780601f106126d757610100808354040283529160200191612702565b820191906000526020600020905b8154815290600101906020018083116126e557829003601f168201915b50505050509250600061271361152f565b90506000805b82518163ffffffff1610156127995761277460405180604001604052806005815260200164195e1a5cdd60da1b815250611a2f61276a611715878663ffffffff16815181106116dc576116dc6154a4565b600588019061390a565b1561278757612784826001615576565b91505b80612791816154d0565b915050612719565b5063ffffffff8116156128c8576000808263ffffffff166001600160401b038111156127c7576127c7614bdc565b6040519080825280602002602001820160405280156127fa57816020015b60608152602001906001900390816127e55790505b50905060005b84518163ffffffff1610156128c35761285b60405180604001604052806005815260200164195e1a5cdd60da1b815250611a2f612851611715898663ffffffff16815181106116dc576116dc6154a4565b60058a019061390a565b156128b157848163ffffffff1681518110612878576128786154a4565b6020026020010151828463ffffffff1681518110612898576128986154a4565b60209081029190910101526128ae836001615576565b92505b806128bb816154d0565b915050612800565b509450505b5050509250925092565b83516002146129235760405162461bcd60e51b815260206004820152601c60248201527f54686572652073686f756c642062652032204461746120486173682e000000006044820152606401610727565b61292d8785613e55565b1561297a5760405162461bcd60e51b815260206004820152601b60248201527f44617461204861736820616c7265616479206f6e20636861696e2e00000000006044820152606401610727565b61298487876132e9565b156129ca5760405162461bcd60e51b81526020600482015260166024820152753ab239349030b63932b0b23c9037b71031b430b4b71760511b6044820152606401610727565b6129d487866137bb565b15156001146129f55760405162461bcd60e51b815260040161072790615520565b6000612a0188876137eb565b9050612a0d8887613ed9565b6040805180820190915260058152641c9a59da1d60da1b6020820152600090612a369089611e07565b805190602001209050612a698982604051806040016040528060058152602001641c9a59da1d60da1b8152508787613f71565b612ac98982604051806040016040528060078152602001663b32b939b4b7b760c91b8152506040518060400160405280601c81526020017f45564944454e43455f434f4e54524143545f56455253494f4e5f563100000000815250613acf565b612af18982604051806040016040528060048152602001637564726960e01b8152508b613acf565b612b18898260405180604001604052806003815260200162189a5960ea1b8152508a613acf565b612b6089826040518060400160405280600681526020016573746174757360d01b8152506040518060400160405280600681526020016561637469766560d01b815250613acf565b612b8c8982604051806040016040528060088152602001670c8c2e8c290c2e6d60c31b8152508961406d565b612b978987836140a0565b612ba38982898861410a565b612bc18988612bbb6117156124fa8760030154613e2b565b846141ae565b612bea8982604051806040016040528060058152602001641c9a59da1d60da1b81525086613c2b565b6000612c1d612bf883614202565b60408051808201909152600881526732b4b21d3732bb9d60c11b602082015290611e07565b9050612c318a828051906020012084614211565b50505050505050505050565b60006060612c4b8385611e07565b805190602001209150612c60612bf883614202565b90509250929050565b80604051612c779190615488565b6040519081900381209033907f63bac276e5defd82b1e2477e4d2482b1684bd28516f8007c507bb39124bd3b0390600090a350565b612cb686866137bb565b15612cd35760405162461bcd60e51b815260040161072790615549565b612ce0868686868661428f565b6000612cec87876137eb565b905060005b82518163ffffffff161015612d3457612d2161233e611715858463ffffffff16815181106116dc576116dc6154a4565b5080612d2c816154d0565b915050612cf1565b5050505050505050565b612d488483613ed9565b6040805180820190915260058152641c9a59da1d60da1b6020820152600090612d719085611e07565b805190602001209050610eda8582858561410a565b6060806060612dcb8787878080601f0160208091040260200160405190810160405280939291908181526020018383808284376000920191909152506132e992505050565b1515600114612dec5760405162461bcd60e51b8152600401610727906154f4565b6000612e4a87878080601f016020809104026020016040519081016040528093929190818152602001838380828437600092019190915250506040805180820190915260058152641c9a59da1d60da1b602082015292915050611e07565b8051906020012090506000612e9b8983612e96612e6c8a63ffffffff166139d2565b60408051808201909152600d81526c3932bb34b2bb9d34b73232bc1d60991b602082015290611e07565b613a6e565b9050612ecb89826040518060400160405280600b81526020016a1c995d9a595dd95c909a5960aa1b8152506133f5565b9450600080612eda8b846134b3565b9a9f909e50999c50989a5050505050505050505050565b612efb8685613ed9565b612f0586866132e9565b1515600114612f265760405162461bcd60e51b8152600401610727906154f4565b6040805180820190915260058152641c9a59da1d60da1b6020820152600090612f4f9087611e07565b8051906020012090506000612f8b876040518060400160405280600681526020016572657669657760d01b815250611e0790919063ffffffff16565b905060005b85518163ffffffff161015612fce57612fba868263ffffffff16815181106109af576109af6154a4565b915080612fc6816154d0565b915050612f90565b50600081805190602001209050613006",
        "",
        "",
        "1215614fe957600080fd5b82356001600160401b038082111561500057600080fd5b61500c86838701614c22565b9350602085013591508082111561502257600080fd5b50614f2585828601614c22565b6000806040838503121561504257600080fd5b82356001600160401b0381111561505857600080fd5b61506485828601614c22565b925050612c6060208401614f9c565b60006020828403121561508557600080fd5b81356001600160401b0381111561509b57600080fd5b610ef084828501614e2e565b6000806000606084860312156150bc57600080fd5b83356001600160401b038111156150d257600080fd5b6150de86828701614c22565b9660208601359650604090950135949350505050565b6060815260006151076060830186614cf1565b82810360208401526151198186614cf1565b9050828103604084015261512d8185614d1d565b9695505050505050565b60008060008060008060c0878903121561515057600080fd5b86356001600160401b038082111561516757600080fd5b6151738a838b01614c22565b9750602089013591508082111561518957600080fd5b6151958a838b01614c22565b965060408901359150808211156151ab57600080fd5b6151b78a838b01614e2e565b955060608901359150808211156151cd57600080fd5b6151d98a838b01614e2e565b945060808901359150808211156151ef57600080fd5b6151fb8a838b01614e2e565b935060a089013591508082111561521157600080fd5b5061521e89828a01614e2e565b9150509295509295509295565b600080600080600060a0868803121561524357600080fd5b85356001600160401b038082111561525a57600080fd5b61526689838a01614c22565b9650602088013591508082111561527c57600080fd5b61528889838a01614c22565b9550604088013591508082111561529e57600080fd5b6152aa89838a01614c22565b94506152b860608901614f9c565b935060808801359150808211156152ce57600080fd5b506152db88828901614e2e565b9150509295509295909350565b6000806000606084860312156152fd57600080fd5b83356001600160401b038082111561531457600080fd5b61532087838801614c22565b9450602086013591508082111561533657600080fd5b61534287838801614c22565b9350604086013591508082111561535857600080fd5b5061536586828701614e2e565b9150509250925092565b60008060006040848603121561538457600080fd5b83356001600160401b0381111561539a57600080fd5b6153a686828701614b30565b90945092506153b9905060208501614dff565b90509250925092565b6060815260006153d56060830186614cf1565b82810360208401526151198186614d1d565b600080600080600060a086880312156153ff57600080fd5b85356001600160401b038082111561541657600080fd5b61542289838a01614c22565b9650602088013591508082111561543857600080fd5b61544489838a01614c22565b9550604088013591508082111561545a57600080fd5b61546689838a01614e2e565b9450606088013591508082111561547c57600080fd5b6152b889838a01614e2e565b6000825161549a818460208701614cc5565b9190910192915050565b634e487b7160e01b600052603260045260246000fd5b634e487b7160e01b600052601160045260246000fd5b600063ffffffff808316818114156154ea576154ea6154ba565b6001019392505050565b6020808252601290820152713ab23934903737ba1037b71031b430b4b71760711b604082015260600190565b6020808252600f908201526e2ab9b2b9103737ba1032bc34b9ba1760891b604082015260600190565b6020808252601390820152722ab9b2b91030b63932b0b23c9032bc34b9ba1760691b604082015260600190565b600063ffffffff808316818516808303821115615595576155956154ba565b01949350505050565b600083516155b0818460208801614cc5565b835190830190615595818360208801614cc5565b600181811c908216806155d857607f821691505b602082108114156155f957634e487b7160e01b600052602260045260246000fd5b50919050565b60008261561c57634e487b7160e01b600052601260045260246000fd5b500690565b60008219821115615634576156346154ba565b500190565b600060001982141561564d5761564d6154ba565b5060010190565b60208082526024908201527f45766964656e636553746f726167653a2045766964656e6365206e6f742065786040820152636973747360e01b606082015260800190565b7f416363657373436f6e74726f6c3a206163636f756e74200000000000000000008152600083516156d0816017850160208801614cc5565b7001034b99036b4b9b9b4b733903937b6329607d1b6017918401918201528351615701816028840160208801614cc5565b01602801949350505050565b6000816000190483118215151615615727576157276154ba565b500290565b60008161573b5761573b6154ba565b506000190190565b600082821015615755576157556154ba565b50039056fe22f59c2f02edbae5c421247f029fe3112c5a85f70b4a48f5d93b22ada9ea772ea2646970667358221220b6ee24bd9d7df9a7c1ef85729a6343f9ce9a1a2ae463e772028f63e36e159e5964736f6c634300080b0033"
    };

    public static final String BINARY =
            org.fisco.bcos.sdk.v3.utils.StringUtils.joinAll("", BINARY_ARRAY);

    public static final String[] SM_BINARY_ARRAY = {
        "",
        "636381e58960e11b815260206004820152602e60248201527f496e697469616c697a61626c653a20636f6e747261637420697320616c72656160448201526d191e481a5b9a5d1a585b1a5e995960921b6064820152608401610692565b6000805460ff19166001179055801561105e576000805461ff0019166101001790555b61106960003361300b565b6110906040518060400160405280600581526020016406269643a360dc1b81525033610d74565b6040805180820190915260068082526529b43aac34b760d11b60209092019182526110be91610102916149f5565b50610103805468ffffffffffffffffff19166503e8000013881790558015611120576000805461ff0019169055604051600181527f962aa9df107bcee798aa1cede27b2de7fab57a1daae7109874a9a9170136cbfa9060200160405180910390a15b50565b60006001600160e01b03198216634df6077b60e11b14806107985750631d4fd6f360e31b6001600160e01b0319831614610798565b606080808080600061116b60c988613015565b949c939b5091995097509550909350915050565b600061118f60c9868686866131bd565b95945050505050565b6000806001600160a01b03166097836040516111b49190615510565b908152604051908190036020019020546001600160a01b031614611212576107986000805160206157938339815191526097846040516111f49190615510565b908152604051908190036020019020546001600160a01b0316610f72565b506000919050565b919050565b60008281526065602052604090206001015461123a81611244565b6105b78383611448565b6111208133613312565b611258838361336c565b151560011461127a57604051636381e58960e11b81526004016106929061552c565b6000611286848461339c565b905060005b82518163ffffffff161015610a2d576113256112ff6112f4858463ffffffff16815181106112bb576112bb6154c0565b60200260200101516040518060400160405280600a8152602001693ab9b2b92fb937b6329d60b11b81525061133890919063ffffffff16565b805160209091012090565b60408051808201909152600580825264195e1a5cdd60da1b6020830152850191906133c6565b5080611330816154ec565b91505061128b565b6060828260405160200161134d929190615555565b604051602081830303815290604052905092915050565b600081815260208381526040808320805482518185028101850190935280835260609492939192909184015b8282101561143c5783829060005260206000200180546113af90615584565b80601f01602080910402602001604051908101604052809291908181526020018280546113db90615584565b80156114285780601f106113fd57610100808354040283529160200191611428565b820191906000526020600020905b81548152906001019060200180831161140b57829003601f168201915b505050505081526020019060010190611390565b50505050905092915050565b6114528282610f72565b156106a55760008281526065602090815260408083206001600160a01b0385168085529252808320805460ff1916905551339285917fddf24a0d777ab37f0cd0acf6e2b0a75570d42c6500405e008f7f9a61836cf2a39190a45050565b6000806114bd60c9336133e2565b909250905060018215151461151157604051636381e58960e11b815260206004820152601960248201527829b2b73232b91034b9903737ba103932b3b4b9ba32b932b21760391b6044820152606401610692565b600061151e60c98361339c565b905061158c60405180604001604052806005815260200164195e1a5cdd60da1b81525061158661157c6112f4886040518060400160405280600a8152602001693ab9b2b92fb937b6329d60b11b81525061133890919063ffffffff16565b600585019061349a565b9061353d565b15156001146115f357604051636381e58960e11b815260206004820152602c60248201527f5573657220776974686f757420636f72726573706f6e64696e6720726f6c652060448201526b3832b936b4b9b9b4b7b7399760a11b6064820152608401610692565b50505050565b6116038685613562565b61160d86866135fc565b151560011461162f57604051636381e58960e11b8152600401610692906155bf565b6040805180820190915260058152641c9a59da1d60da1b60208201526000906116589087611338565b8051906020012090506000611694876040518060400160405280600681526020016572657669657760d01b81525061133890919063ffffffff16565b905060005b85518163ffffffff1610156116d7576116c3868263ffffffff168151811061094a5761094a6154c0565b9150806116cf816154ec565b915050611699565b5060008180519060200120905061170f89826040518060400160405280600681526020016572657669657760d01b8152508888613657565b61176f8982604051806040016040528060078152602001663b32b939b4b7b760c91b8152506040518060400160405280601c81526020017f45564944454e43455f434f4e54524143545f56455253494f4e5f563100000000815250613754565b6117978982604051806040016040528060048152602001637564726960e01b8152508b613754565b6117c689826040518060400160405280600b81526020016a1c995d9a595dd95c909a5960aa1b8152508a613754565b6117f889826040518060400160405280600e81526020016d0e4caecd2caee88c2e8c290c2e6d60931b8152508961377c565b60006118336040518060400160405280600e81526020016d3a7265766965775f636f756e743d60901b8152508961133890919063ffffffff16565b905060006118428b86846137af565b905061185a8b86846118558560016155eb565b613811565b6118ad8b866118a76118718563ffffffff16613844565b60408051808201909152600e81526d1d3932bb34b2bb9d34b73232bc1d60911b60208201526118a1908f90611338565b90611338565b866138e0565b6118dd8b866040518060400160405280600d81526020016c7265766965775f636f756e743d60981b8152506137af565b90506119178b866040518060400160405280600d81526020016c7265766965775f636f756e743d60981b81525084600161185591906155eb565b6119588b866118a761192e8563ffffffff16613844565b60408051808201909152600d81526c3932bb34b2bb9d34b73232bc1d60991b602082015290611338565b6119828b846040518060400160405280600681526020016572657669657760d01b81525089613913565b60006119b861199085613a7a565b60408051808201909152600b81526a32b4b21d3932bb34b2bb9d60a91b602082015290611338565b90506119cc8c828051906020012086613a91565b505050505050505050505050565b600060606119e88385611338565b805190602001209150611a226119fd83613a7a565b60408051808201909152600881526732b4b21d3732bb9d60c11b602082015290611338565b90509250929050565b80604051611a399190615510565b6040519081900381209033907fe51c51b29482fcf86a1b342dd3f7cabbee8c6c6e2107b3d31f0d6de692b12ec590600090a350565b6040805180820190915260058152641c9a59da1d60da1b6020820152600090611a979083611338565b80516020909101209050600080611aaf60c9336133e2565b9092509050600182151514611b0357604051636381e58960e11b815260206004820152601960248201527829b2b73232b91034b9903737ba103932b3b4b9ba32b932b21760391b6044820152606401610692565b6000611b1060c985613b10565b9050806008015460001415611b6157604051636381e58960e11b815260206004820152601660248201527532bb34b232b731b29034b9903737ba1032bc34b9ba1760511b6044820152606401610692565b6000611b948560405180604001604052806003815260200162189a5960ea1b81525060c9613b579092919063ffffffff16565b9050611ba0838261353d565b151560011461071757604051636381e58960e11b815260206004820152601d60248201527f53656e646572206973206e6f742065766964656e6365206f776e65722e0000006044820152606401610692565b6040805180820190915260058152641c9a59da1d60da1b6020820152600090611c1b9084611338565b8051906020012090506000611c4c858360405180604001604052806003815260200162189a5960ea1b815250613b57565b9050610a2d85838386613bb2565b6060611c6684846135fc565b1515600114611cb357604051636381e58960e11b81526020600482015260186024820152773ab23934903737ba1032bc34b9ba1037b71031b430b4b71760411b6044820152606401610692565b6000611cbf8585613c4d565b90506000611ccc86613c9d565b90506000805b82518163ffffffff161015611d3657611d0c888588868563ffffffff1681518110611cff57611cff6154c0565b6020026020010151613cf9565b151560011415611d2457611d216001836155eb565b91505b80611d2e816154ec565b915050611cd2565b5063ffffffff811615611e3d5760008163ffffffff166001600160401b03811115611d6357611d63614b3e565b604051908082528060200260200182016040528015611d9657816020015b6060815260200190600190039081611d815790505b5090506000805b84518163ffffffff161015611e3757611dca8a878a888563ffffffff1681518110611cff57611cff6154c0565b151560011415611e2557848163ffffffff1681518110611dec57611dec6154c0565b6020026020010151878363ffffffff1681518110611e0c57611e0c6154c0565b6020908102919091010152611e226001836155eb565b91505b80611e2f816154ec565b915050611d9d565b50909450505b5050509392505050565b6000815111611e9157604051636381e58960e11b81526020600482015260156024820152747661726961626c654461746120697320656d70747960581b6044820152606401610692565b60028151611e9f919061560a565b15611ee957604051636381e58960e11b81526020600482015260196024820152783b30b934b0b13632a230ba30903632b733ba341032b93937b960391b6044820152606401610692565b6040805180820190915260058152641c9a59da1d60da1b6020820152600090611f129084611338565b8051906020012090506115f38482604051806040016040528060058152602001641c9a59da1d60da1b81525085613913565b6000611f868484848080601f0160208091040260200160405190810160405280939291908181526020018383808284376000920191909152506135fc92505050565b1515600114611fa857604051636381e58960e11b8152600401610692906155bf565b600061200684848080601f01602080910402602001604051908101604052809392919081815260200183838082843760009201919091",
        "",
        "",
        "",
        "15614fe857600080fd5b614ff485828601614f7e565b90969095509350505050565b6060815260006150136060830186614d54565b82810360208401526150258186614d54565b905082810360408401526150398185614d80565b9695505050505050565b60008060006060848603121561505857600080fd5b83356001600160401b0381111561506e57600080fd5b61507a86828701614b84565b9660208601359650604090950135949350505050565b6000602082840312156150a257600080fd5b81356001600160401b038111156150b857600080fd5b61061d84828501614bf3565b6000806000606084860312156150d957600080fd5b83356001600160401b03808211156150f057600080fd5b6150fc87838801614b84565b9450602086013591508082111561511257600080fd5b61511e87838801614b84565b9350604086013591508082111561513457600080fd5b5061514186828701614bf3565b9150509250925092565b6000806040838503121561515e57600080fd5b82356001600160401b0381111561517457600080fd5b61518085828601614b84565b925050611a2260208401614deb565b6000806000604084860312156151a457600080fd5b83356001600160401b038111156151ba57600080fd5b6151c686828701614f7e565b90945092506151d9905060208501614f4f565b90509250925092565b6060815260006151f56060830186614d54565b82810360208401526150258186614d80565b60008060008060008060c0878903121561522057600080fd5b86356001600160401b038082111561523757600080fd5b6152438a838b01614b84565b9750602089013591508082111561525957600080fd5b6152658a838b01614b84565b9650604089013591508082111561527b57600080fd5b6152878a838b01614bf3565b9550606089013591508082111561529d57600080fd5b6152a98a838b01614bf3565b945060808901359150808211156152bf57600080fd5b6152cb8a838b01614bf3565b935060a08901359150808211156152e157600080fd5b506152ee89828a01614bf3565b9150509295509295509295565b600080600080600060a0868803121561531357600080fd5b85356001600160401b038082111561532a57600080fd5b61533689838a01614b84565b9650602088013591508082111561534c57600080fd5b61535889838a01614b84565b9550604088013591508082111561536e57600080fd5b61537a89838a01614b84565b9450614ec660608901614deb565b6020815260006107956020830184614d54565b6000602082840312156153ad57600080fd5b81356001600160e01b03198116811461079557600080fd5b60c0815260006153d860c0830189614d54565b82810360208401526153ea8189614d54565b905082810360408401526153fe8188614d80565b905082810360608401526154128187614d80565b905082810360808401526154268186614d80565b91505082151560a0830152979650505050505050565b6000806000806040858703121561545257600080fd5b84356001600160401b038082111561546957600080fd5b61547588838901614f7e565b9096509450602087013591508082111561548e57600080fd5b5061549b87828801614f7e565b95989497509550505050565b6000602082840312156154b957600080fd5b5035919050565b63b95aa35560e01b600052603260045260246000fd5b63b95aa35560e01b600052601160045260246000fd5b600063ffffffff80831681811415615506576155066154d6565b6001019392505050565b60008251615522818460208701614d28565b9190910192915050565b6020808252600f908201526e2ab9b2b9103737ba1032bc34b9ba1760891b604082015260600190565b60008351615567818460208801614d28565b83519083019061557b818360208801614d28565b01949350505050565b600181811c9082168061559857607f821691505b602082108114156155b95763b95aa35560e01b600052602260045260246000fd5b50919050565b6020808252601290820152713ab23934903737ba1037b71031b430b4b71760711b604082015260600190565b600063ffffffff80831681851680830382111561557b5761557b6154d6565b6000826156275763b95aa35560e01b600052601260045260246000fd5b500690565b6020808252601390820152722ab9b2b91030b63932b0b23c9032bc34b9ba1760691b604082015260600190565b6000821982111561566c5761566c6154d6565b500190565b6000600019821415615685576156856154d6565b5060010190565b7f416363657373436f6e74726f6c3a206163636f756e74200000000000000000008152600083516156c4816017850160208801614d28565b7001034b99036b4b9b9b4b733903937b6329607d1b60179184019182015283516156f5816028840160208801614d28565b01602801949350505050565b60208082526024908201527f45766964656e636553746f726167653a2045766964656e6365206e6f742065786040820152636973747360e01b606082015260800190565b600081600019048311821515161561575f5761575f6154d6565b500290565b600081615773576157736154d6565b506000190190565b60008282101561578d5761578d6154d6565b50039056fecda5c054d055f48a2866e1a28d72f8145e422f1db1872bc4c9fe2888702c9f8da2646970667358221220c8ce460254154a524f6c7810a727c0768a8c1e16b0486d9e69130d7bc048bc6b64736f6c634300080b0033"
    };

    public static final String SM_BINARY =
            org.fisco.bcos.sdk.v3.utils.StringUtils.joinAll("", SM_BINARY_ARRAY);

    public static final String[] ABI_ARRAY = {
        "[{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"string\",\"name\":\"eid\",\"type\":\"string\"}],\"name\":\"EvidenceCommStored\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"string\",\"name\":\"udri\",\"type\":\"string\"},{\"indexed\":true,\"internalType\":\"string\",\"name\":\"usci\",\"type\":\"string\"}],\"name\":\"EvidenceStored\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint8\",\"name\":\"version\",\"type\":\"uint8\"}],\"name\":\"Initialized\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"previousAdminRole\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"newAdminRole\",\"type\":\"bytes32\"}],\"name\":\"RoleAdminChanged\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"}],\"name\":\"RoleGranted\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"}],\"name\":\"RoleRevoked\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"string\",\"name\":\"bid\",\"type\":\"string\"},{\"indexed\":true,\"internalType\":\"string\",\"name\":\"usci\",\"type\":\"string\"}],\"name\":\"UserCreated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"string\",\"name\":\"bid\",\"type\":\"string\"}],\"name\":\"UserRoleChanged\",\"type\":\"event\"},{\"conflictFields\":[{\"kind\":5}],\"inputs\":[],\"name\":\"DEFAULT_ADMIN_ROLE\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"selector\":[2719481311,456278200],\"stateMutability\":\"view\",\"type\":\"function\"},{\"conflictFields\":[{\"kind\":5}],\"inputs\":[],\"name\":\"USERMANAGE_ROLE\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"selector\":[852968231,3061267160],\"stateMutability\":\"view\",\"type\":\"function\"},{\"conflictFields\":[{\"kind\":0},{\"kind\":2,\"slot\":201,\"value\":[0]}],\"inputs\":[{\"internalType\":\"string\",\"name\":\"udri\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"bid\",\"type\":\"string\"},{\"internalType\":\"string[]\",\"name\":\"dataHash\",\"type\":\"string[]\"},{\"internalType\":\"string[]\",\"name\":\"dataRight\",\"type\":\"string[]\"},{\"internalType\":\"string[]\",\"name\":\"metaData\",\"type\":\"string[]\"},{\"internalType\":\"string[]\",\"name\":\"variableData\",\"type\":\"string[]\"}],\"name\":\"addDataRightEvidence\",\"outputs\":[],\"selector\":[2635209621,3623663505],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"conflictFields\":[{\"kind\":0},{\"kind\":2,\"slot\":201,\"value\":[0]}],\"inputs\":[{\"internalType\":\"string\",\"name\":\"udri\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"reviewerBid\",\"type\":\"string\"},{\"internalType\":\"string[]\",\"name\":\"reviewDataHash\",\"type\":\"string[]\"},{\"internalType\":\"string[]\",\"name\":\"metaData\",\"type\":\"string[]\"},{\"internalType\":\"string[]\",\"name\":\"variableData\",\"type\":\"string[]\"}],\"name\":\"addReviewEvidence\",\"outputs\":[],\"selector\":[4024293368,766756406],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"conflictFields\":[{\"kind\":0}],\"inputs\":[{\"internalType\":\"string\",\"name\":\"bid\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"usci\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"name\",\"type\":\"string\"},{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"internalType\":\"string[]\",\"name\":\"roles\",\"type\":\"string[]\"}],\"name\":\"addUser\",\"outputs\":[],\"selector\":[3239424820,3652011643],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"conflictFields\":[{\"kind\":0},{\"kind\":2,\"slot\":201,\"value\":[0]}],\"inputs\":[{\"internalType\":\"string\",\"name\":\"udri\",\"type\":\"string\"},{\"internalType\":\"string[]\",\"name\":\"variableData\",\"type\":\"string[]\"}],\"name\":\"appendVariableData\",\"outputs\":[],\"selector\":[2138450037,1301797456],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"conflictFields\":[{\"kind\":2,\"slot\":101,\"value\":[0]},{\"kind\":4,\"value\":[1,3]}],\"inputs\":[],\"name\":\"disableAccessControl\",\"outputs\":[],\"selector\":[1980433629,2854924890],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"conflictFields\":[{\"kind\":2,\"slot\":101,\"value\":[0]},{\"kind\":4,\"value\":[1,3]}],\"inputs\":[],\"name\":\"enableAccessControl\",\"outputs\":[],\"selector\":[922088542,1158894738],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"conflictFields\":[{\"kind\":0}],\"inputs\":[{\"internalType\":\"string\",\"name\":\"bid\",\"type\":\"string\"}],\"name\":\"getDataCount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"dataCount\",\"type\":\"uint256\"}],\"selector\":[816278328,3023591269],\"stateMutability\":\"view\",\"type\":\"function\"},{\"conflictFields\":[{\"kind\":0}],\"inputs\":[{\"internalType\":\"string\",\"name\":\"bid\",\"type\":\"string\"},{\"internalType\":\"uint256\",\"name\":\"start\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"count\",\"type\":\"uint256\"}],\"name\":\"getDataList\",\"outputs\":[{\"internalType\":\"string[]\",\"name\":\"udriArray\",\"type\":\"string[]\"}],\"selector\":[2492434596,1794719790],\"stateMutability\":\"view\",\"type\":\"function\"},{\"conflictFields\":[{\"kind\":0}],\"inputs\":[{\"internalType\":\"string\",\"name\":\"udri\",\"type\":\"string\"}],\"name\":\"getRegisteredData\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"dataHashSM\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"dataHashSHA\",\"type\":\"string\"},{\"internalType\":\"string[]\",\"name\":\"dataRight\",\"type\":\"string[]\"},{\"internalType\":\"string[]\",\"name\":\"metadata\",\"type\":\"string[]\"},{\"internalType\":\"string[]\",\"name\":\"variabledata\",\"type\":\"string[]\"},{\"internalType\":\"bool\",\"name\":\"isWithdraw\",\"type\":\"bool\"}],\"selector\":[208288129,3936625741],\"stateMutability\":\"view\",\"type\":\"function\"},{\"conflictFields\":[{\"kind\":0}],\"inputs\":[{\"internalType\":\"string\",\"name\":\"udri\",\"type\":\"string\"}],\"name\":\"getReviewCount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"selector\":[1485793629,1330250274],\"stateMutability\":\"view\",\"type\":\"function\"},{\"conflictFields\":[{\"kind\":0}],\"inputs\":[{\"internalType\":\"string\",\"name\":\"udri\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"reviewerBid\",\"type\":\"string\"}],\"name\":\"getReviewCountOfUser\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"selector\":[44555732,4057915877],\"stateMutability\":\"view\",\"type\":\"function\"},{\"conflictFields\":[{\"kind\":3,\"slot\":101,\"value\":[0]}],\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"}],\"name\":\"getRoleAdmin\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"selector\":[613063843,4224970943],\"stateMutability\":\"view\",\"type\":\"function\"},{\"conflictFields\":[{\"kind\":0}],\"inputs\":[{\"internalType\":\"string\",\"name\":\"category\",\"type\":\"string\"}],\"name\":\"getSupportVariableDataFields\",\"outputs\":[{\"internalType\":\"string[]\",\"name\":\"\",\"type\":\"string[]\"}],\"selector\":[3869446330,376683502],\"stateMutability\":\"view\",\"type\":\"function\"},{\"conflictFields\":[{\"kind\":0}],\"inputs\":[{\"internalType\":\"string\",\"name\":\"dataHash\",\"type\":\"string\"}],\"name\":\"getUdriByDatahash\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"selector\":[633708824,3726531728],\"stateMutability\":\"view\",\"type\":\"function\"},{\"conflictFields\":[{\"kind\":0},{\"kind\":4,\"slot\":205,\"value\":[182,122,175,140,61,55,162,13,121,24,7,66,106,134,166,187,199,177,18,112,111,87,232,122,236,184,218,149,54,149,117,148]}],\"inputs\":[{\"internalType\":\"string\",\"name\":\"udri\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"bid\",\"type\":\"string\"}],\"name\":\"getUserDataRight\",\"outputs\":[{\"internalType\":\"string[]\",\"name\":\"outRights\",\"type\":\"string[]\"}],\"selector\":[1105228669,1195862205],\"stateMutability\":\"view\",\"type\":\"function\"},{\"conflictFields\":[{\"kind\":0}],\"inputs\":[{\"internalType\":\"string\",\"name\":\"bid\",\"type\":\"string\"}],\"name\":\"getUserRoles\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"usci\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"name\",\"typ",
        "e\":\"string\"},{\"internalType\":\"string[]\",\"name\":\"roles\",\"type\":\"string[]\"}],\"selector\":[2573946725,1585755409],\"stateMutability\":\"view\",\"type\":\"function\"},{\"conflictFields\":[{\"kind\":0}],\"inputs\":[{\"internalType\":\"string\",\"name\":\"udri\",\"type\":\"string\"},{\"internalType\":\"uint32\",\"name\":\"index\",\"type\":\"uint32\"}],\"name\":\"getVerifyDAEvidence\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"reviewerBid\",\"type\":\"string\"},{\"internalType\":\"string[]\",\"name\":\"metaData\",\"type\":\"string[]\"},{\"internalType\":\"string[]\",\"name\":\"variableData\",\"type\":\"string[]\"}],\"selector\":[3966063325,3363562759],\"stateMutability\":\"view\",\"type\":\"function\"},{\"conflictFields\":[{\"kind\":3,\"slot\":101,\"value\":[0]}],\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"grantRole\",\"outputs\":[],\"selector\":[791671133,1416757515],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"conflictFields\":[{\"kind\":0},{\"kind\":2,\"slot\":201,\"value\":[0]}],\"inputs\":[{\"internalType\":\"string\",\"name\":\"udri\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"bid\",\"type\":\"string\"},{\"internalType\":\"string[]\",\"name\":\"dataRight\",\"type\":\"string[]\"}],\"name\":\"grantUserDataRight\",\"outputs\":[],\"selector\":[3258251539,3358242835],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"conflictFields\":[{\"kind\":0}],\"inputs\":[{\"internalType\":\"string\",\"name\":\"bid\",\"type\":\"string\"},{\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"}],\"name\":\"grantUserManagePermission\",\"outputs\":[],\"selector\":[1037211317,3070963644],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"conflictFields\":[{\"kind\":0}],\"inputs\":[{\"internalType\":\"string\",\"name\":\"bid\",\"type\":\"string\"},{\"internalType\":\"string[]\",\"name\":\"roles\",\"type\":\"string[]\"}],\"name\":\"grantUserRoles\",\"outputs\":[],\"selector\":[2322354691,115265356],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"conflictFields\":[{\"kind\":0},{\"kind\":4,\"slot\":101,\"value\":[34,245,156,47,2,237,186,229,196,33,36,127,2,159,227,17,44,90,133,247,11,74,72,245,217,59,34,173,169,234,119,46]}],\"inputs\":[{\"internalType\":\"string\",\"name\":\"bid\",\"type\":\"string\"}],\"name\":\"hasDAUserManageRole\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"selector\":[1195994301,4114364435],\"stateMutability\":\"view\",\"type\":\"function\"},{\"conflictFields\":[{\"kind\":3,\"slot\":101,\"value\":[0]}],\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"hasRole\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"selector\":[2446411860,3734140252],\"stateMutability\":\"view\",\"type\":\"function\"},{\"conflictFields\":[{\"kind\":0},{\"kind\":2,\"slot\":101,\"value\":[0]},{\"kind\":4,\"value\":[0]},{\"kind\":4,\"value\":[1,2]},{\"kind\":4,\"value\":[1,3]}],\"inputs\":[],\"name\":\"initialize\",\"outputs\":[],\"selector\":[2167012380,3932184381],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"conflictFields\":[{\"kind\":5}],\"inputs\":[],\"name\":\"queryUserRole\",\"outputs\":[{\"internalType\":\"string[]\",\"name\":\"\",\"type\":\"string[]\"}],\"selector\":[289407936,1912013404],\"stateMutability\":\"view\",\"type\":\"function\"},{\"conflictFields\":[{\"kind\":0},{\"kind\":3,\"slot\":101,\"value\":[0]}],\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"renounceRole\",\"outputs\":[],\"selector\":[911641278,399928776],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"conflictFields\":[{\"kind\":3,\"slot\":101,\"value\":[0]}],\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"revokeRole\",\"outputs\":[],\"selector\":[3578229791,4245284822],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"conflictFields\":[{\"kind\":0}],\"inputs\":[{\"internalType\":\"string\",\"name\":\"bid\",\"type\":\"string\"}],\"name\":\"revokeUserManagePermission\",\"outputs\":[],\"selector\":[4233016450,2768200898],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"conflictFields\":[{\"kind\":0}],\"inputs\":[{\"internalType\":\"string\",\"name\":\"bid\",\"type\":\"string\"},{\"internalType\":\"string[]\",\"name\":\"roles\",\"type\":\"string[]\"}],\"name\":\"revokeUserRoles\",\"outputs\":[],\"selector\":[593762734,2271659916],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"conflictFields\":[{\"kind\":4,\"value\":[1,2]}],\"inputs\":[{\"internalType\":\"string\",\"name\":\"name\",\"type\":\"string\"}],\"name\":\"setChainName\",\"outputs\":[],\"selector\":[3234078498,3307895570],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"conflictFields\":[{\"kind\":0},{\"kind\":4,\"slot\":205,\"value\":[182,122,175,140,61,55,162,13,121,24,7,66,106,134,166,187,199,177,18,112,111,87,232,122,236,184,218,149,54,149,117,148]}],\"inputs\":[{\"internalType\":\"string[]\",\"name\":\"fields\",\"type\":\"string[]\"}],\"name\":\"setDataRightCategory\",\"outputs\":[],\"selector\":[2472945857,2087572871],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"conflictFields\":[{\"kind\":0}],\"inputs\":[{\"internalType\":\"string\",\"name\":\"category\",\"type\":\"string\"},{\"internalType\":\"string[]\",\"name\":\"fields\",\"type\":\"string[]\"}],\"name\":\"setDataRightSupportVariableDataFields\",\"outputs\":[],\"selector\":[1199116808,2135762870],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"conflictFields\":[{\"kind\":4,\"value\":[1,3]}],\"inputs\":[{\"internalType\":\"uint32\",\"name\":\"len\",\"type\":\"uint32\"}],\"name\":\"setTextMaxLen\",\"outputs\":[],\"selector\":[1356933702,1285167137],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"conflictFields\":[{\"kind\":4,\"value\":[1,3]}],\"inputs\":[{\"internalType\":\"uint32\",\"name\":\"len\",\"type\":\"uint32\"}],\"name\":\"setstrArrayMaxLen\",\"outputs\":[],\"selector\":[453424020,3279923519],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"conflictFields\":[{\"kind\":5}],\"inputs\":[{\"internalType\":\"bytes4\",\"name\":\"interfaceId\",\"type\":\"bytes4\"}],\"name\":\"supportsInterface\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"selector\":[33540519,3934173080],\"stateMutability\":\"view\",\"type\":\"function\"},{\"conflictFields\":[{\"kind\":0},{\"kind\":2,\"slot\":201,\"value\":[0]}],\"inputs\":[{\"internalType\":\"string\",\"name\":\"udri\",\"type\":\"string\"},{\"internalType\":\"string[]\",\"name\":\"dataRight\",\"type\":\"string[]\"}],\"name\":\"withdrawDataRightRegister\",\"outputs\":[],\"selector\":[2392051885,1179902888],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"conflictFields\":[{\"kind\":0},{\"kind\":2,\"slot\":201,\"value\":[0]}],\"inputs\":[{\"internalType\":\"string\",\"name\":\"udri\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"reviewerBid\",\"type\":\"string\"}],\"name\":\"withdrawReviewEvidence\",\"outputs\":[],\"selector\":[932021754,2229502562],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"conflictFields\":[{\"kind\":0},{\"kind\":2,\"slot\":201,\"value\":[0]}],\"inputs\":[{\"internalType\":\"string\",\"name\":\"udri\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"bid\",\"type\":\"string\"},{\"internalType\":\"string[]\",\"name\":\"dataRight\",\"type\":\"string[]\"}],\"name\":\"withdrawUserDataRight\",\"outputs\":[],\"selector\":[4211774851,2825282343],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]"
    };

    public static final String ABI = org.fisco.bcos.sdk.v3.utils.StringUtils.joinAll("", ABI_ARRAY);

    public static final String FUNC_DEFAULT_ADMIN_ROLE = "DEFAULT_ADMIN_ROLE";

    public static final String FUNC_USERMANAGE_ROLE = "USERMANAGE_ROLE";

    public static final String FUNC_ADDDATARIGHTEVIDENCE = "addDataRightEvidence";

    public static final String FUNC_ADDREVIEWEVIDENCE = "addReviewEvidence";

    public static final String FUNC_ADDUSER = "addUser";

    public static final String FUNC_APPENDVARIABLEDATA = "appendVariableData";

    public static final String FUNC_DISABLEACCESSCONTROL = "disableAccessControl";

    public static final String FUNC_ENABLEACCESSCONTROL = "enableAccessControl";

    public static final String FUNC_GETDATACOUNT = "getDataCount";

    public static final String FUNC_GETDATALIST = "getDataList";

    public static final String FUNC_GETREGISTEREDDATA = "getRegisteredData";

    public static final String FUNC_GETREVIEWCOUNT = "getReviewCount";

    public static final String FUNC_GETREVIEWCOUNTOFUSER = "getReviewCountOfUser";

    public static final String FUNC_GETROLEADMIN = "getRoleAdmin";

    public static final String FUNC_GETSUPPORTVARIABLEDATAFIELDS = "getSupportVariableDataFields";

    public static final String FUNC_GETUDRIBYDATAHASH = "getUdriByDatahash";

    public static final String FUNC_GETUSERDATARIGHT = "getUserDataRight";

    public static final String FUNC_GETUSERROLES = "getUserRoles";

    public static final String FUNC_GETVERIFYDAEVIDENCE = "getVerifyDAEvidence";

    public static final String FUNC_GRANTROLE = "grantRole";

    public static final String FUNC_GRANTUSERDATARIGHT = "grantUserDataRight";

    public static final String FUNC_GRANTUSERMANAGEPERMISSION = "grantUserManagePermission";

    public static final String FUNC_GRANTUSERROLES = "grantUserRoles";

    public static final String FUNC_HASDAUSERMANAGEROLE = "hasDAUserManageRole";

    public static final String FUNC_HASROLE = "hasRole";

    public static final String FUNC_INITIALIZE = "initialize";

    public static final String FUNC_QUERYUSERROLE = "queryUserRole";

    public static final String FUNC_RENOUNCEROLE = "renounceRole";

    public static final String FUNC_REVOKEROLE = "revokeRole";

    public static final String FUNC_REVOKEUSERMANAGEPERMISSION = "revokeUserManagePermission";

    public static final String FUNC_REVOKEUSERROLES = "revokeUserRoles";

    public static final String FUNC_SETCHAINNAME = "setChainName";

    public static final String FUNC_SETDATARIGHTCATEGORY = "setDataRightCategory";

    public static final String FUNC_SETDATARIGHTSUPPORTVARIABLEDATAFIELDS =
            "setDataRightSupportVariableDataFields";

    public static final String FUNC_SETTEXTMAXLEN = "setTextMaxLen";

    public static final String FUNC_SETSTRARRAYMAXLEN = "setstrArrayMaxLen";

    public static final String FUNC_SUPPORTSINTERFACE = "supportsInterface";

    public static final String FUNC_WITHDRAWDATARIGHTREGISTER = "withdrawDataRightRegister";

    public static final String FUNC_WITHDRAWREVIEWEVIDENCE = "withdrawReviewEvidence";

    public static final String FUNC_WITHDRAWUSERDATARIGHT = "withdrawUserDataRight";

    public static final Event EVIDENCECOMMSTORED_EVENT =
            new Event(
                    "EvidenceCommStored",
                    Arrays.<TypeReference<?>>asList(
                            new TypeReference<Address>(true) {},
                            new TypeReference<Utf8String>(true) {}));;

    public static final Event EVIDENCESTORED_EVENT =
            new Event(
                    "EvidenceStored",
                    Arrays.<TypeReference<?>>asList(
                            new TypeReference<Address>(true) {},
                            new TypeReference<Utf8String>(true) {},
                            new TypeReference<Utf8String>(true) {}));;

    public static final Event INITIALIZED_EVENT =
            new Event(
                    "Initialized", Arrays.<TypeReference<?>>asList(new TypeReference<Uint8>() {}));;

    public static final Event ROLEADMINCHANGED_EVENT =
            new Event(
                    "RoleAdminChanged",
                    Arrays.<TypeReference<?>>asList(
                            new TypeReference<Bytes32>(true) {},
                            new TypeReference<Bytes32>(true) {},
                            new TypeReference<Bytes32>(true) {}));;

    public static final Event ROLEGRANTED_EVENT =
            new Event(
                    "RoleGranted",
                    Arrays.<TypeReference<?>>asList(
                            new TypeReference<Bytes32>(true) {},
                            new TypeReference<Address>(true) {},
                            new TypeReference<Address>(true) {}));;

    public static final Event ROLEREVOKED_EVENT =
            new Event(
                    "RoleRevoked",
                    Arrays.<TypeReference<?>>asList(
                            new TypeReference<Bytes32>(true) {},
                            new TypeReference<Address>(true) {},
                            new TypeReference<Address>(true) {}));;

    public static final Event USERCREATED_EVENT =
            new Event(
                    "UserCreated",
                    Arrays.<TypeReference<?>>asList(
                            new TypeReference<Address>(true) {},
                            new TypeReference<Utf8String>(true) {},
                            new TypeReference<Utf8String>(true) {}));;

    public static final Event USERROLECHANGED_EVENT =
            new Event(
                    "UserRoleChanged",
                    Arrays.<TypeReference<?>>asList(
                            new TypeReference<Address>(true) {},
                            new TypeReference<Utf8String>(true) {}));;

    protected DAEvidenceController(
            String contractAddress, Client client, CryptoKeyPair credential) {
        super(getBinary(client.getCryptoSuite()), contractAddress, client, credential);
    }

    public static String getBinary(CryptoSuite cryptoSuite) {
        return (cryptoSuite.getCryptoTypeConfig() == CryptoType.ECDSA_TYPE ? BINARY : SM_BINARY);
    }

    public static String getABI() {
        return ABI;
    }

    public List<EvidenceCommStoredEventResponse> getEvidenceCommStoredEvents(
            TransactionReceipt transactionReceipt) {
        List<Contract.EventValuesWithLog> valueList =
                extractEventParametersWithLog(EVIDENCECOMMSTORED_EVENT, transactionReceipt);
        ArrayList<EvidenceCommStoredEventResponse> responses =
                new ArrayList<EvidenceCommStoredEventResponse>(valueList.size());
        for (Contract.EventValuesWithLog eventValues : valueList) {
            EvidenceCommStoredEventResponse typedResponse = new EvidenceCommStoredEventResponse();
            typedResponse.log = eventValues.getLog();
            typedResponse.sender = (String) eventValues.getIndexedValues().get(0).getValue();
            typedResponse.eid = (byte[]) eventValues.getIndexedValues().get(1).getValue();
            responses.add(typedResponse);
        }
        return responses;
    }

    public List<EvidenceStoredEventResponse> getEvidenceStoredEvents(
            TransactionReceipt transactionReceipt) {
        List<Contract.EventValuesWithLog> valueList =
                extractEventParametersWithLog(EVIDENCESTORED_EVENT, transactionReceipt);
        ArrayList<EvidenceStoredEventResponse> responses =
                new ArrayList<EvidenceStoredEventResponse>(valueList.size());
        for (Contract.EventValuesWithLog eventValues : valueList) {
            EvidenceStoredEventResponse typedResponse = new EvidenceStoredEventResponse();
            typedResponse.log = eventValues.getLog();
            typedResponse.sender = (String) eventValues.getIndexedValues().get(0).getValue();
            typedResponse.udri = (byte[]) eventValues.getIndexedValues().get(1).getValue();
            typedResponse.usci = (byte[]) eventValues.getIndexedValues().get(2).getValue();
            responses.add(typedResponse);
        }
        return responses;
    }

    public List<InitializedEventResponse> getInitializedEvents(
            TransactionReceipt transactionReceipt) {
        List<Contract.EventValuesWithLog> valueList =
                extractEventParametersWithLog(INITIALIZED_EVENT, transactionReceipt);
        ArrayList<InitializedEventResponse> responses =
                new ArrayList<InitializedEventResponse>(valueList.size());
        for (Contract.EventValuesWithLog eventValues : valueList) {
            InitializedEventResponse typedResponse = new InitializedEventResponse();
            typedResponse.log = eventValues.getLog();
            typedResponse.version =
                    (BigInteger) eventValues.getNonIndexedValues().get(0).getValue();
            responses.add(typedResponse);
        }
        return responses;
    }

    public List<RoleAdminChangedEventResponse> getRoleAdminChangedEvents(
            TransactionReceipt transactionReceipt) {
        List<Contract.EventValuesWithLog> valueList =
                extractEventParametersWithLog(ROLEADMINCHANGED_EVENT, transactionReceipt);
        ArrayList<RoleAdminChangedEventResponse> responses =
                new ArrayList<RoleAdminChangedEventResponse>(valueList.size());
        for (Contract.EventValuesWithLog eventValues : valueList) {
            RoleAdminChangedEventResponse typedResponse = new RoleAdminChangedEventResponse();
            typedResponse.log = eventValues.getLog();
            typedResponse.role = (byte[]) eventValues.getIndexedValues().get(0).getValue();
            typedResponse.previousAdminRole =
                    (byte[]) eventValues.getIndexedValues().get(1).getValue();
            typedResponse.newAdminRole = (byte[]) eventValues.getIndexedValues().get(2).getValue();
            responses.add(typedResponse);
        }
        return responses;
    }

    public List<RoleGrantedEventResponse> getRoleGrantedEvents(
            TransactionReceipt transactionReceipt) {
        List<Contract.EventValuesWithLog> valueList =
                extractEventParametersWithLog(ROLEGRANTED_EVENT, transactionReceipt);
        ArrayList<RoleGrantedEventResponse> responses =
                new ArrayList<RoleGrantedEventResponse>(valueList.size());
        for (Contract.EventValuesWithLog eventValues : valueList) {
            RoleGrantedEventResponse typedResponse = new RoleGrantedEventResponse();
            typedResponse.log = eventValues.getLog();
            typedResponse.role = (byte[]) eventValues.getIndexedValues().get(0).getValue();
            typedResponse.account = (String) eventValues.getIndexedValues().get(1).getValue();
            typedResponse.sender = (String) eventValues.getIndexedValues().get(2).getValue();
            responses.add(typedResponse);
        }
        return responses;
    }

    public List<RoleRevokedEventResponse> getRoleRevokedEvents(
            TransactionReceipt transactionReceipt) {
        List<Contract.EventValuesWithLog> valueList =
                extractEventParametersWithLog(ROLEREVOKED_EVENT, transactionReceipt);
        ArrayList<RoleRevokedEventResponse> responses =
                new ArrayList<RoleRevokedEventResponse>(valueList.size());
        for (Contract.EventValuesWithLog eventValues : valueList) {
            RoleRevokedEventResponse typedResponse = new RoleRevokedEventResponse();
            typedResponse.log = eventValues.getLog();
            typedResponse.role = (byte[]) eventValues.getIndexedValues().get(0).getValue();
            typedResponse.account = (String) eventValues.getIndexedValues().get(1).getValue();
            typedResponse.sender = (String) eventValues.getIndexedValues().get(2).getValue();
            responses.add(typedResponse);
        }
        return responses;
    }

    public List<UserCreatedEventResponse> getUserCreatedEvents(
            TransactionReceipt transactionReceipt) {
        List<Contract.EventValuesWithLog> valueList =
                extractEventParametersWithLog(USERCREATED_EVENT, transactionReceipt);
        ArrayList<UserCreatedEventResponse> responses =
                new ArrayList<UserCreatedEventResponse>(valueList.size());
        for (Contract.EventValuesWithLog eventValues : valueList) {
            UserCreatedEventResponse typedResponse = new UserCreatedEventResponse();
            typedResponse.log = eventValues.getLog();
            typedResponse.sender = (String) eventValues.getIndexedValues().get(0).getValue();
            typedResponse.bid = (byte[]) eventValues.getIndexedValues().get(1).getValue();
            typedResponse.usci = (byte[]) eventValues.getIndexedValues().get(2).getValue();
            responses.add(typedResponse);
        }
        return responses;
    }

    public List<UserRoleChangedEventResponse> getUserRoleChangedEvents(
            TransactionReceipt transactionReceipt) {
        List<Contract.EventValuesWithLog> valueList =
                extractEventParametersWithLog(USERROLECHANGED_EVENT, transactionReceipt);
        ArrayList<UserRoleChangedEventResponse> responses =
                new ArrayList<UserRoleChangedEventResponse>(valueList.size());
        for (Contract.EventValuesWithLog eventValues : valueList) {
            UserRoleChangedEventResponse typedResponse = new UserRoleChangedEventResponse();
            typedResponse.log = eventValues.getLog();
            typedResponse.sender = (String) eventValues.getIndexedValues().get(0).getValue();
            typedResponse.bid = (byte[]) eventValues.getIndexedValues().get(1).getValue();
            responses.add(typedResponse);
        }
        return responses;
    }

    public byte[] DEFAULT_ADMIN_ROLE() throws ContractException {
        final Function function =
                new Function(
                        FUNC_DEFAULT_ADMIN_ROLE,
                        Arrays.<Type>asList(),
                        Arrays.<TypeReference<?>>asList(new TypeReference<Bytes32>() {}));
        return executeCallWithSingleValueReturn(function, byte[].class);
    }

    public byte[] USERMANAGE_ROLE() throws ContractException {
        final Function function =
                new Function(
                        FUNC_USERMANAGE_ROLE,
                        Arrays.<Type>asList(),
                        Arrays.<TypeReference<?>>asList(new TypeReference<Bytes32>() {}));
        return executeCallWithSingleValueReturn(function, byte[].class);
    }

    public TransactionReceipt addDataRightEvidence(
            String udri,
            String bid,
            List<String> dataHash,
            List<String> dataRight,
            List<String> metaData,
            List<String> variableData) {
        final Function function =
                new Function(
                        FUNC_ADDDATARIGHTEVIDENCE,
                        Arrays.<Type>asList(
                                new org.fisco.bcos.sdk.v3.codec.datatypes.Utf8String(udri),
                                new org.fisco.bcos.sdk.v3.codec.datatypes.Utf8String(bid),
                                new org.fisco.bcos.sdk.v3.codec.datatypes.DynamicArray<
                                        org.fisco.bcos.sdk.v3.codec.datatypes.Utf8String>(
                                        org.fisco.bcos.sdk.v3.codec.datatypes.Utf8String.class,
                                        org.fisco.bcos.sdk.v3.codec.Utils.typeMap(
                                                dataHash,
                                                org.fisco.bcos.sdk.v3.codec.datatypes.Utf8String
                                                        .class)),
                                new org.fisco.bcos.sdk.v3.codec.datatypes.DynamicArray<
                                        org.fisco.bcos.sdk.v3.codec.datatypes.Utf8String>(
                                        org.fisco.bcos.sdk.v3.codec.datatypes.Utf8String.class,
                                        org.fisco.bcos.sdk.v3.codec.Utils.typeMap(
                                                dataRight,
                                                org.fisco.bcos.sdk.v3.codec.datatypes.Utf8String
                                                        .class)),
                                new org.fisco.bcos.sdk.v3.codec.datatypes.DynamicArray<
                                        org.fisco.bcos.sdk.v3.codec.datatypes.Utf8String>(
                                        org.fisco.bcos.sdk.v3.codec.datatypes.Utf8String.class,
                                        org.fisco.bcos.sdk.v3.codec.Utils.typeMap(
                                                metaData,
                                                org.fisco.bcos.sdk.v3.codec.datatypes.Utf8String
                                                        .class)),
                                new org.fisco.bcos.sdk.v3.codec.datatypes.DynamicArray<
                                        org.fisco.bcos.sdk.v3.codec.datatypes.Utf8String>(
                                        org.fisco.bcos.sdk.v3.codec.datatypes.Utf8String.class,
                                        org.fisco.bcos.sdk.v3.codec.Utils.typeMap(
                                                variableData,
                                                org.fisco.bcos.sdk.v3.codec.datatypes.Utf8String
                                                        .class))),
                        Collections.<TypeReference<?>>emptyList(),
                        0);
        return executeTransaction(function);
    }

    public String getSignedTransactionForAddDataRightEvidence(
            String udri,
            String bid,
            List<String> dataHash,
            List<String> dataRight,
            List<String> metaData,
            List<String> variableData) {
        final Function function =
                new Function(
                        FUNC_ADDDATARIGHTEVIDENCE,
                        Arrays.<Type>asList(
                                new org.fisco.bcos.sdk.v3.codec.datatypes.Utf8String(udri),
                                new org.fisco.bcos.sdk.v3.codec.datatypes.Utf8String(bid),
                                new org.fisco.bcos.sdk.v3.codec.datatypes.DynamicArray<
                                        org.fisco.bcos.sdk.v3.codec.datatypes.Utf8String>(
                                        org.fisco.bcos.sdk.v3.codec.datatypes.Utf8String.class,
                                        org.fisco.bcos.sdk.v3.codec.Utils.typeMap(
                                                dataHash,
                                                org.fisco.bcos.sdk.v3.codec.datatypes.Utf8String
                                                        .class)),
                                new org.fisco.bcos.sdk.v3.codec.datatypes.DynamicArray<
                                        org.fisco.bcos.sdk.v3.codec.datatypes.Utf8String>(
                                        org.fisco.bcos.sdk.v3.codec.datatypes.Utf8String.class,
                                        org.fisco.bcos.sdk.v3.codec.Utils.typeMap(
                                                dataRight,
                                                org.fisco.bcos.sdk.v3.codec.datatypes.Utf8String
                                                        .class)),
                                new org.fisco.bcos.sdk.v3.codec.datatypes.DynamicArray<
                                        org.fisco.bcos.sdk.v3.codec.datatypes.Utf8String>(
                                        org.fisco.bcos.sdk.v3.codec.datatypes.Utf8String.class,
                                        org.fisco.bcos.sdk.v3.codec.Utils.typeMap(
                                                metaData,
                                                org.fisco.bcos.sdk.v3.codec.datatypes.Utf8String
                                                        .class)),
                                new org.fisco.bcos.sdk.v3.codec.datatypes.DynamicArray<
                                        org.fisco.bcos.sdk.v3.codec.datatypes.Utf8String>(
                                        org.fisco.bcos.sdk.v3.codec.datatypes.Utf8String.class,
                                        org.fisco.bcos.sdk.v3.codec.Utils.typeMap(
                                                variableData,
                                                org.fisco.bcos.sdk.v3.codec.datatypes.Utf8String
                                                        .class))),
                        Collections.<TypeReference<?>>emptyList(),
                        0);
        return createSignedTransaction(function);
    }

    public String addDataRightEvidence(
            String udri,
            String bid,
            List<String> dataHash,
            List<String> dataRight,
            List<String> metaData,
            List<String> variableData,
            TransactionCallback callback) {
        final Function function =
                new Function(
                        FUNC_ADDDATARIGHTEVIDENCE,
                        Arrays.<Type>asList(
                                new org.fisco.bcos.sdk.v3.codec.datatypes.Utf8String(udri),
                                new org.fisco.bcos.sdk.v3.codec.datatypes.Utf8String(bid),
                                new org.fisco.bcos.sdk.v3.codec.datatypes.DynamicArray<
                                        org.fisco.bcos.sdk.v3.codec.datatypes.Utf8String>(
                                        org.fisco.bcos.sdk.v3.codec.datatypes.Utf8String.class,
                                        org.fisco.bcos.sdk.v3.codec.Utils.typeMap(
                                                dataHash,
                                                org.fisco.bcos.sdk.v3.codec.datatypes.Utf8String
                                                        .class)),
                                new org.fisco.bcos.sdk.v3.codec.datatypes.DynamicArray<
                                        org.fisco.bcos.sdk.v3.codec.datatypes.Utf8String>(
                                        org.fisco.bcos.sdk.v3.codec.datatypes.Utf8String.class,
                                        org.fisco.bcos.sdk.v3.codec.Utils.typeMap(
                                                dataRight,
                                                org.fisco.bcos.sdk.v3.codec.datatypes.Utf8String
                                                        .class)),
                                new org.fisco.bcos.sdk.v3.codec.datatypes.DynamicArray<
                                        org.fisco.bcos.sdk.v3.codec.datatypes.Utf8String>(
                                        org.fisco.bcos.sdk.v3.codec.datatypes.Utf8String.class,
                                        org.fisco.bcos.sdk.v3.codec.Utils.typeMap(
                                                metaData,
                                                org.fisco.bcos.sdk.v3.codec.datatypes.Utf8String
                                                        .class)),
                                new org.fisco.bcos.sdk.v3.codec.datatypes.DynamicArray<
                                        org.fisco.bcos.sdk.v3.codec.datatypes.Utf8String>(
                                        org.fisco.bcos.sdk.v3.codec.datatypes.Utf8String.class,
                                        org.fisco.bcos.sdk.v3.codec.Utils.typeMap(
                                                variableData,
                                                org.fisco.bcos.sdk.v3.codec.datatypes.Utf8String
                                                        .class))),
                        Collections.<TypeReference<?>>emptyList(),
                        0);
        return asyncExecuteTransaction(function, callback);
    }

    public Tuple6<String, String, List<String>, List<String>, List<String>, List<String>>
            getAddDataRightEvidenceInput(TransactionReceipt transactionReceipt) {
        String data = transactionReceipt.getInput().substring(10);
        final Function function =
                new Function(
                        FUNC_ADDDATARIGHTEVIDENCE,
                        Arrays.<Type>asList(),
                        Arrays.<TypeReference<?>>asList(
                                new TypeReference<Utf8String>() {},
                                new TypeReference<Utf8String>() {},
                                new TypeReference<DynamicArray<Utf8String>>() {},
                                new TypeReference<DynamicArray<Utf8String>>() {},
                                new TypeReference<DynamicArray<Utf8String>>() {},
                                new TypeReference<DynamicArray<Utf8String>>() {}));
        List<Type> results =
                this.functionReturnDecoder.decode(data, function.getOutputParameters());
        return new Tuple6<String, String, List<String>, List<String>, List<String>, List<String>>(
                (String) results.get(0).getValue(),
                (String) results.get(1).getValue(),
                convertToNative((List<Utf8String>) results.get(2).getValue()),
                convertToNative((List<Utf8String>) results.get(3).getValue()),
                convertToNative((List<Utf8String>) results.get(4).getValue()),
                convertToNative((List<Utf8String>) results.get(5).getValue()));
    }

    public TransactionReceipt addReviewEvidence(
            String udri,
            String reviewerBid,
            List<String> reviewDataHash,
            List<String> metaData,
            List<String> variableData) {
        final Function function =
                new Function(
                        FUNC_ADDREVIEWEVIDENCE,
                        Arrays.<Type>asList(
                                new org.fisco.bcos.sdk.v3.codec.datatypes.Utf8String(udri),
                                new org.fisco.bcos.sdk.v3.codec.datatypes.Utf8String(reviewerBid),
                                new org.fisco.bcos.sdk.v3.codec.datatypes.DynamicArray<
                                        org.fisco.bcos.sdk.v3.codec.datatypes.Utf8String>(
                                        org.fisco.bcos.sdk.v3.codec.datatypes.Utf8String.class,
                                        org.fisco.bcos.sdk.v3.codec.Utils.typeMap(
                                                reviewDataHash,
                                                org.fisco.bcos.sdk.v3.codec.datatypes.Utf8String
                                                        .class)),
                                new org.fisco.bcos.sdk.v3.codec.datatypes.DynamicArray<
                                        org.fisco.bcos.sdk.v3.codec.datatypes.Utf8String>(
                                        org.fisco.bcos.sdk.v3.codec.datatypes.Utf8String.class,
                                        org.fisco.bcos.sdk.v3.codec.Utils.typeMap(
                                                metaData,
                                                org.fisco.bcos.sdk.v3.codec.datatypes.Utf8String
                                                        .class)),
                                new org.fisco.bcos.sdk.v3.codec.datatypes.DynamicArray<
                                        org.fisco.bcos.sdk.v3.codec.datatypes.Utf8String>(
                                        org.fisco.bcos.sdk.v3.codec.datatypes.Utf8String.class,
                                        org.fisco.bcos.sdk.v3.codec.Utils.typeMap(
                                                variableData,
                                                org.fisco.bcos.sdk.v3.codec.datatypes.Utf8String
                                                        .class))),
                        Collections.<TypeReference<?>>emptyList(),
                        0);
        return executeTransaction(function);
    }

    public String getSignedTransactionForAddReviewEvidence(
            String udri,
            String reviewerBid,
            List<String> reviewDataHash,
            List<String> metaData,
            List<String> variableData) {
        final Function function =
                new Function(
                        FUNC_ADDREVIEWEVIDENCE,
                        Arrays.<Type>asList(
                                new org.fisco.bcos.sdk.v3.codec.datatypes.Utf8String(udri),
                                new org.fisco.bcos.sdk.v3.codec.datatypes.Utf8String(reviewerBid),
                                new org.fisco.bcos.sdk.v3.codec.datatypes.DynamicArray<
                                        org.fisco.bcos.sdk.v3.codec.datatypes.Utf8String>(
                                        org.fisco.bcos.sdk.v3.codec.datatypes.Utf8String.class,
                                        org.fisco.bcos.sdk.v3.codec.Utils.typeMap(
                                                reviewDataHash,
                                                org.fisco.bcos.sdk.v3.codec.datatypes.Utf8String
                                                        .class)),
                                new org.fisco.bcos.sdk.v3.codec.datatypes.DynamicArray<
                                        org.fisco.bcos.sdk.v3.codec.datatypes.Utf8String>(
                                        org.fisco.bcos.sdk.v3.codec.datatypes.Utf8String.class,
                                        org.fisco.bcos.sdk.v3.codec.Utils.typeMap(
                                                metaData,
                                                org.fisco.bcos.sdk.v3.codec.datatypes.Utf8String
                                                        .class)),
                                new org.fisco.bcos.sdk.v3.codec.datatypes.DynamicArray<
                                        org.fisco.bcos.sdk.v3.codec.datatypes.Utf8String>(
                                        org.fisco.bcos.sdk.v3.codec.datatypes.Utf8String.class,
                                        org.fisco.bcos.sdk.v3.codec.Utils.typeMap(
                                                variableData,
                                                org.fisco.bcos.sdk.v3.codec.datatypes.Utf8String
                                                        .class))),
                        Collections.<TypeReference<?>>emptyList(),
                        0);
        return createSignedTransaction(function);
    }

    public String addReviewEvidence(
            String udri,
            String reviewerBid,
            List<String> reviewDataHash,
            List<String> metaData,
            List<String> variableData,
            TransactionCallback callback) {
        final Function function =
                new Function(
                        FUNC_ADDREVIEWEVIDENCE,
                        Arrays.<Type>asList(
                                new org.fisco.bcos.sdk.v3.codec.datatypes.Utf8String(udri),
                                new org.fisco.bcos.sdk.v3.codec.datatypes.Utf8String(reviewerBid),
                                new org.fisco.bcos.sdk.v3.codec.datatypes.DynamicArray<
                                        org.fisco.bcos.sdk.v3.codec.datatypes.Utf8String>(
                                        org.fisco.bcos.sdk.v3.codec.datatypes.Utf8String.class,
                                        org.fisco.bcos.sdk.v3.codec.Utils.typeMap(
                                                reviewDataHash,
                                                org.fisco.bcos.sdk.v3.codec.datatypes.Utf8String
                                                        .class)),
                                new org.fisco.bcos.sdk.v3.codec.datatypes.DynamicArray<
                                        org.fisco.bcos.sdk.v3.codec.datatypes.Utf8String>(
                                        org.fisco.bcos.sdk.v3.codec.datatypes.Utf8String.class,
                                        org.fisco.bcos.sdk.v3.codec.Utils.typeMap(
                                                metaData,
                                                org.fisco.bcos.sdk.v3.codec.datatypes.Utf8String
                                                        .class)),
                                new org.fisco.bcos.sdk.v3.codec.datatypes.DynamicArray<
                                        org.fisco.bcos.sdk.v3.codec.datatypes.Utf8String>(
                                        org.fisco.bcos.sdk.v3.codec.datatypes.Utf8String.class,
                                        org.fisco.bcos.sdk.v3.codec.Utils.typeMap(
                                                variableData,
                                                org.fisco.bcos.sdk.v3.codec.datatypes.Utf8String
                                                        .class))),
                        Collections.<TypeReference<?>>emptyList(),
                        0);
        return asyncExecuteTransaction(function, callback);
    }

    public Tuple5<String, String, List<String>, List<String>, List<String>>
            getAddReviewEvidenceInput(TransactionReceipt transactionReceipt) {
        String data = transactionReceipt.getInput().substring(10);
        final Function function =
                new Function(
                        FUNC_ADDREVIEWEVIDENCE,
                        Arrays.<Type>asList(),
                        Arrays.<TypeReference<?>>asList(
                                new TypeReference<Utf8String>() {},
                                new TypeReference<Utf8String>() {},
                                new TypeReference<DynamicArray<Utf8String>>() {},
                                new TypeReference<DynamicArray<Utf8String>>() {},
                                new TypeReference<DynamicArray<Utf8String>>() {}));
        List<Type> results =
                this.functionReturnDecoder.decode(data, function.getOutputParameters());
        return new Tuple5<String, String, List<String>, List<String>, List<String>>(
                (String) results.get(0).getValue(),
                (String) results.get(1).getValue(),
                convertToNative((List<Utf8String>) results.get(2).getValue()),
                convertToNative((List<Utf8String>) results.get(3).getValue()),
                convertToNative((List<Utf8String>) results.get(4).getValue()));
    }

    public TransactionReceipt addUser(
            String bid, String usci, String name, String account, List<String> roles) {
        final Function function =
                new Function(
                        FUNC_ADDUSER,
                        Arrays.<Type>asList(
                                new org.fisco.bcos.sdk.v3.codec.datatypes.Utf8String(bid),
                                new org.fisco.bcos.sdk.v3.codec.datatypes.Utf8String(usci),
                                new org.fisco.bcos.sdk.v3.codec.datatypes.Utf8String(name),
                                new org.fisco.bcos.sdk.v3.codec.datatypes.Address(account),
                                new org.fisco.bcos.sdk.v3.codec.datatypes.DynamicArray<
                                        org.fisco.bcos.sdk.v3.codec.datatypes.Utf8String>(
                                        org.fisco.bcos.sdk.v3.codec.datatypes.Utf8String.class,
                                        org.fisco.bcos.sdk.v3.codec.Utils.typeMap(
                                                roles,
                                                org.fisco.bcos.sdk.v3.codec.datatypes.Utf8String
                                                        .class))),
                        Collections.<TypeReference<?>>emptyList(),
                        0);
        return executeTransaction(function);
    }

    public String getSignedTransactionForAddUser(
            String bid, String usci, String name, String account, List<String> roles) {
        final Function function =
                new Function(
                        FUNC_ADDUSER,
                        Arrays.<Type>asList(
                                new org.fisco.bcos.sdk.v3.codec.datatypes.Utf8String(bid),
                                new org.fisco.bcos.sdk.v3.codec.datatypes.Utf8String(usci),
                                new org.fisco.bcos.sdk.v3.codec.datatypes.Utf8String(name),
                                new org.fisco.bcos.sdk.v3.codec.datatypes.Address(account),
                                new org.fisco.bcos.sdk.v3.codec.datatypes.DynamicArray<
                                        org.fisco.bcos.sdk.v3.codec.datatypes.Utf8String>(
                                        org.fisco.bcos.sdk.v3.codec.datatypes.Utf8String.class,
                                        org.fisco.bcos.sdk.v3.codec.Utils.typeMap(
                                                roles,
                                                org.fisco.bcos.sdk.v3.codec.datatypes.Utf8String
                                                        .class))),
                        Collections.<TypeReference<?>>emptyList(),
                        0);
        return createSignedTransaction(function);
    }

    public String addUser(
            String bid,
            String usci,
            String name,
            String account,
            List<String> roles,
            TransactionCallback callback) {
        final Function function =
                new Function(
                        FUNC_ADDUSER,
                        Arrays.<Type>asList(
                                new org.fisco.bcos.sdk.v3.codec.datatypes.Utf8String(bid),
                                new org.fisco.bcos.sdk.v3.codec.datatypes.Utf8String(usci),
                                new org.fisco.bcos.sdk.v3.codec.datatypes.Utf8String(name),
                                new org.fisco.bcos.sdk.v3.codec.datatypes.Address(account),
                                new org.fisco.bcos.sdk.v3.codec.datatypes.DynamicArray<
                                        org.fisco.bcos.sdk.v3.codec.datatypes.Utf8String>(
                                        org.fisco.bcos.sdk.v3.codec.datatypes.Utf8String.class,
                                        org.fisco.bcos.sdk.v3.codec.Utils.typeMap(
                                                roles,
                                                org.fisco.bcos.sdk.v3.codec.datatypes.Utf8String
                                                        .class))),
                        Collections.<TypeReference<?>>emptyList(),
                        0);
        return asyncExecuteTransaction(function, callback);
    }

    public Tuple5<String, String, String, String, List<String>> getAddUserInput(
            TransactionReceipt transactionReceipt) {
        String data = transactionReceipt.getInput().substring(10);
        final Function function =
                new Function(
                        FUNC_ADDUSER,
                        Arrays.<Type>asList(),
                        Arrays.<TypeReference<?>>asList(
                                new TypeReference<Utf8String>() {},
                                new TypeReference<Utf8String>() {},
                                new TypeReference<Utf8String>() {},
                                new TypeReference<Address>() {},
                                new TypeReference<DynamicArray<Utf8String>>() {}));
        List<Type> results =
                this.functionReturnDecoder.decode(data, function.getOutputParameters());
        return new Tuple5<String, String, String, String, List<String>>(
                (String) results.get(0).getValue(),
                (String) results.get(1).getValue(),
                (String) results.get(2).getValue(),
                (String) results.get(3).getValue(),
                convertToNative((List<Utf8String>) results.get(4).getValue()));
    }

    public TransactionReceipt appendVariableData(String udri, List<String> variableData) {
        final Function function =
                new Function(
                        FUNC_APPENDVARIABLEDATA,
                        Arrays.<Type>asList(
                                new org.fisco.bcos.sdk.v3.codec.datatypes.Utf8String(udri),
                                new org.fisco.bcos.sdk.v3.codec.datatypes.DynamicArray<
                                        org.fisco.bcos.sdk.v3.codec.datatypes.Utf8String>(
                                        org.fisco.bcos.sdk.v3.codec.datatypes.Utf8String.class,
                                        org.fisco.bcos.sdk.v3.codec.Utils.typeMap(
                                                variableData,
                                                org.fisco.bcos.sdk.v3.codec.datatypes.Utf8String
                                                        .class))),
                        Collections.<TypeReference<?>>emptyList(),
                        0);
        return executeTransaction(function);
    }

    public String getSignedTransactionForAppendVariableData(
            String udri, List<String> variableData) {
        final Function function =
                new Function(
                        FUNC_APPENDVARIABLEDATA,
                        Arrays.<Type>asList(
                                new org.fisco.bcos.sdk.v3.codec.datatypes.Utf8String(udri),
                                new org.fisco.bcos.sdk.v3.codec.datatypes.DynamicArray<
                                        org.fisco.bcos.sdk.v3.codec.datatypes.Utf8String>(
                                        org.fisco.bcos.sdk.v3.codec.datatypes.Utf8String.class,
                                        org.fisco.bcos.sdk.v3.codec.Utils.typeMap(
                                                variableData,
                                                org.fisco.bcos.sdk.v3.codec.datatypes.Utf8String
                                                        .class))),
                        Collections.<TypeReference<?>>emptyList(),
                        0);
        return createSignedTransaction(function);
    }

    public String appendVariableData(
            String udri, List<String> variableData, TransactionCallback callback) {
        final Function function =
                new Function(
                        FUNC_APPENDVARIABLEDATA,
                        Arrays.<Type>asList(
                                new org.fisco.bcos.sdk.v3.codec.datatypes.Utf8String(udri),
                                new org.fisco.bcos.sdk.v3.codec.datatypes.DynamicArray<
                                        org.fisco.bcos.sdk.v3.codec.datatypes.Utf8String>(
                                        org.fisco.bcos.sdk.v3.codec.datatypes.Utf8String.class,
                                        org.fisco.bcos.sdk.v3.codec.Utils.typeMap(
                                                variableData,
                                                org.fisco.bcos.sdk.v3.codec.datatypes.Utf8String
                                                        .class))),
                        Collections.<TypeReference<?>>emptyList(),
                        0);
        return asyncExecuteTransaction(function, callback);
    }

    public Tuple2<String, List<String>> getAppendVariableDataInput(
            TransactionReceipt transactionReceipt) {
        String data = transactionReceipt.getInput().substring(10);
        final Function function =
                new Function(
                        FUNC_APPENDVARIABLEDATA,
                        Arrays.<Type>asList(),
                        Arrays.<TypeReference<?>>asList(
                                new TypeReference<Utf8String>() {},
                                new TypeReference<DynamicArray<Utf8String>>() {}));
        List<Type> results =
                this.functionReturnDecoder.decode(data, function.getOutputParameters());
        return new Tuple2<String, List<String>>(
                (String) results.get(0).getValue(),
                convertToNative((List<Utf8String>) results.get(1).getValue()));
    }

    public TransactionReceipt disableAccessControl() {
        final Function function =
                new Function(
                        FUNC_DISABLEACCESSCONTROL,
                        Arrays.<Type>asList(),
                        Collections.<TypeReference<?>>emptyList(),
                        0);
        return executeTransaction(function);
    }

    public String getSignedTransactionForDisableAccessControl() {
        final Function function =
                new Function(
                        FUNC_DISABLEACCESSCONTROL,
                        Arrays.<Type>asList(),
                        Collections.<TypeReference<?>>emptyList(),
                        0);
        return createSignedTransaction(function);
    }

    public String disableAccessControl(TransactionCallback callback) {
        final Function function =
                new Function(
                        FUNC_DISABLEACCESSCONTROL,
                        Arrays.<Type>asList(),
                        Collections.<TypeReference<?>>emptyList(),
                        0);
        return asyncExecuteTransaction(function, callback);
    }

    public TransactionReceipt enableAccessControl() {
        final Function function =
                new Function(
                        FUNC_ENABLEACCESSCONTROL,
                        Arrays.<Type>asList(),
                        Collections.<TypeReference<?>>emptyList(),
                        0);
        return executeTransaction(function);
    }

    public String getSignedTransactionForEnableAccessControl() {
        final Function function =
                new Function(
                        FUNC_ENABLEACCESSCONTROL,
                        Arrays.<Type>asList(),
                        Collections.<TypeReference<?>>emptyList(),
                        0);
        return createSignedTransaction(function);
    }

    public String enableAccessControl(TransactionCallback callback) {
        final Function function =
                new Function(
                        FUNC_ENABLEACCESSCONTROL,
                        Arrays.<Type>asList(),
                        Collections.<TypeReference<?>>emptyList(),
                        0);
        return asyncExecuteTransaction(function, callback);
    }

    public BigInteger getDataCount(String bid) throws ContractException {
        final Function function =
                new Function(
                        FUNC_GETDATACOUNT,
                        Arrays.<Type>asList(
                                new org.fisco.bcos.sdk.v3.codec.datatypes.Utf8String(bid)),
                        Arrays.<TypeReference<?>>asList(new TypeReference<Uint256>() {}));
        return executeCallWithSingleValueReturn(function, BigInteger.class);
    }

    public List getDataList(String bid, BigInteger start, BigInteger count)
            throws ContractException {
        final Function function =
                new Function(
                        FUNC_GETDATALIST,
                        Arrays.<Type>asList(
                                new org.fisco.bcos.sdk.v3.codec.datatypes.Utf8String(bid),
                                new org.fisco.bcos.sdk.v3.codec.datatypes.generated.Uint256(start),
                                new org.fisco.bcos.sdk.v3.codec.datatypes.generated.Uint256(count)),
                        Arrays.<TypeReference<?>>asList(
                                new TypeReference<DynamicArray<Utf8String>>() {}));
        List<Type> result = (List<Type>) executeCallWithSingleValueReturn(function, List.class);
        return convertToNative(result);
    }

    public Tuple6<String, String, List<String>, List<String>, List<String>, Boolean>
            getRegisteredData(String udri) throws ContractException {
        final Function function =
                new Function(
                        FUNC_GETREGISTEREDDATA,
                        Arrays.<Type>asList(
                                new org.fisco.bcos.sdk.v3.codec.datatypes.Utf8String(udri)),
                        Arrays.<TypeReference<?>>asList(
                                new TypeReference<Utf8String>() {},
                                new TypeReference<Utf8String>() {},
                                new TypeReference<DynamicArray<Utf8String>>() {},
                                new TypeReference<DynamicArray<Utf8String>>() {},
                                new TypeReference<DynamicArray<Utf8String>>() {},
                                new TypeReference<Bool>() {}));
        List<Type> results = executeCallWithMultipleValueReturn(function);
        return new Tuple6<String, String, List<String>, List<String>, List<String>, Boolean>(
                (String) results.get(0).getValue(),
                (String) results.get(1).getValue(),
                convertToNative((List<Utf8String>) results.get(2).getValue()),
                convertToNative((List<Utf8String>) results.get(3).getValue()),
                convertToNative((List<Utf8String>) results.get(4).getValue()),
                (Boolean) results.get(5).getValue());
    }

    public BigInteger getReviewCount(String udri) throws ContractException {
        final Function function =
                new Function(
                        FUNC_GETREVIEWCOUNT,
                        Arrays.<Type>asList(
                                new org.fisco.bcos.sdk.v3.codec.datatypes.Utf8String(udri)),
                        Arrays.<TypeReference<?>>asList(new TypeReference<Uint256>() {}));
        return executeCallWithSingleValueReturn(function, BigInteger.class);
    }

    public BigInteger getReviewCountOfUser(String udri, String reviewerBid)
            throws ContractException {
        final Function function =
                new Function(
                        FUNC_GETREVIEWCOUNTOFUSER,
                        Arrays.<Type>asList(
                                new org.fisco.bcos.sdk.v3.codec.datatypes.Utf8String(udri),
                                new org.fisco.bcos.sdk.v3.codec.datatypes.Utf8String(reviewerBid)),
                        Arrays.<TypeReference<?>>asList(new TypeReference<Uint256>() {}));
        return executeCallWithSingleValueReturn(function, BigInteger.class);
    }

    public byte[] getRoleAdmin(byte[] role) throws ContractException {
        final Function function =
                new Function(
                        FUNC_GETROLEADMIN,
                        Arrays.<Type>asList(
                                new org.fisco.bcos.sdk.v3.codec.datatypes.generated.Bytes32(role)),
                        Arrays.<TypeReference<?>>asList(new TypeReference<Bytes32>() {}));
        return executeCallWithSingleValueReturn(function, byte[].class);
    }

    public List getSupportVariableDataFields(String category) throws ContractException {
        final Function function =
                new Function(
                        FUNC_GETSUPPORTVARIABLEDATAFIELDS,
                        Arrays.<Type>asList(
                                new org.fisco.bcos.sdk.v3.codec.datatypes.Utf8String(category)),
                        Arrays.<TypeReference<?>>asList(
                                new TypeReference<DynamicArray<Utf8String>>() {}));
        List<Type> result = (List<Type>) executeCallWithSingleValueReturn(function, List.class);
        return convertToNative(result);
    }

    public String getUdriByDatahash(String dataHash) throws ContractException {
        final Function function =
                new Function(
                        FUNC_GETUDRIBYDATAHASH,
                        Arrays.<Type>asList(
                                new org.fisco.bcos.sdk.v3.codec.datatypes.Utf8String(dataHash)),
                        Arrays.<TypeReference<?>>asList(new TypeReference<Utf8String>() {}));
        return executeCallWithSingleValueReturn(function, String.class);
    }

    public List getUserDataRight(String udri, String bid) throws ContractException {
        final Function function =
                new Function(
                        FUNC_GETUSERDATARIGHT,
                        Arrays.<Type>asList(
                                new org.fisco.bcos.sdk.v3.codec.datatypes.Utf8String(udri),
                                new org.fisco.bcos.sdk.v3.codec.datatypes.Utf8String(bid)),
                        Arrays.<TypeReference<?>>asList(
                                new TypeReference<DynamicArray<Utf8String>>() {}));
        List<Type> result = (List<Type>) executeCallWithSingleValueReturn(function, List.class);
        return convertToNative(result);
    }

    public Tuple3<String, String, List<String>> getUserRoles(String bid) throws ContractException {
        final Function function =
                new Function(
                        FUNC_GETUSERROLES,
                        Arrays.<Type>asList(
                                new org.fisco.bcos.sdk.v3.codec.datatypes.Utf8String(bid)),
                        Arrays.<TypeReference<?>>asList(
                                new TypeReference<Utf8String>() {},
                                new TypeReference<Utf8String>() {},
                                new TypeReference<DynamicArray<Utf8String>>() {}));
        List<Type> results = executeCallWithMultipleValueReturn(function);
        return new Tuple3<String, String, List<String>>(
                (String) results.get(0).getValue(),
                (String) results.get(1).getValue(),
                convertToNative((List<Utf8String>) results.get(2).getValue()));
    }

    public Tuple3<String, List<String>, List<String>> getVerifyDAEvidence(
            String udri, BigInteger index) throws ContractException {
        final Function function =
                new Function(
                        FUNC_GETVERIFYDAEVIDENCE,
                        Arrays.<Type>asList(
                                new org.fisco.bcos.sdk.v3.codec.datatypes.Utf8String(udri),
                                new org.fisco.bcos.sdk.v3.codec.datatypes.generated.Uint32(index)),
                        Arrays.<TypeReference<?>>asList(
                                new TypeReference<Utf8String>() {},
                                new TypeReference<DynamicArray<Utf8String>>() {},
                                new TypeReference<DynamicArray<Utf8String>>() {}));
        List<Type> results = executeCallWithMultipleValueReturn(function);
        return new Tuple3<String, List<String>, List<String>>(
                (String) results.get(0).getValue(),
                convertToNative((List<Utf8String>) results.get(1).getValue()),
                convertToNative((List<Utf8String>) results.get(2).getValue()));
    }

    public TransactionReceipt grantRole(byte[] role, String account) {
        final Function function =
                new Function(
                        FUNC_GRANTROLE,
                        Arrays.<Type>asList(
                                new org.fisco.bcos.sdk.v3.codec.datatypes.generated.Bytes32(role),
                                new org.fisco.bcos.sdk.v3.codec.datatypes.Address(account)),
                        Collections.<TypeReference<?>>emptyList(),
                        4);
        return executeTransaction(function);
    }

    public String getSignedTransactionForGrantRole(byte[] role, String account) {
        final Function function =
                new Function(
                        FUNC_GRANTROLE,
                        Arrays.<Type>asList(
                                new org.fisco.bcos.sdk.v3.codec.datatypes.generated.Bytes32(role),
                                new org.fisco.bcos.sdk.v3.codec.datatypes.Address(account)),
                        Collections.<TypeReference<?>>emptyList(),
                        4);
        return createSignedTransaction(function);
    }

    public String grantRole(byte[] role, String account, TransactionCallback callback) {
        final Function function =
                new Function(
                        FUNC_GRANTROLE,
                        Arrays.<Type>asList(
                                new org.fisco.bcos.sdk.v3.codec.datatypes.generated.Bytes32(role),
                                new org.fisco.bcos.sdk.v3.codec.datatypes.Address(account)),
                        Collections.<TypeReference<?>>emptyList(),
                        4);
        return asyncExecuteTransaction(function, callback);
    }

    public Tuple2<byte[], String> getGrantRoleInput(TransactionReceipt transactionReceipt) {
        String data = transactionReceipt.getInput().substring(10);
        final Function function =
                new Function(
                        FUNC_GRANTROLE,
                        Arrays.<Type>asList(),
                        Arrays.<TypeReference<?>>asList(
                                new TypeReference<Bytes32>() {}, new TypeReference<Address>() {}));
        List<Type> results =
                this.functionReturnDecoder.decode(data, function.getOutputParameters());
        return new Tuple2<byte[], String>(
                (byte[]) results.get(0).getValue(), (String) results.get(1).getValue());
    }

    public TransactionReceipt grantUserDataRight(String udri, String bid, List<String> dataRight) {
        final Function function =
                new Function(
                        FUNC_GRANTUSERDATARIGHT,
                        Arrays.<Type>asList(
                                new org.fisco.bcos.sdk.v3.codec.datatypes.Utf8String(udri),
                                new org.fisco.bcos.sdk.v3.codec.datatypes.Utf8String(bid),
                                new org.fisco.bcos.sdk.v3.codec.datatypes.DynamicArray<
                                        org.fisco.bcos.sdk.v3.codec.datatypes.Utf8String>(
                                        org.fisco.bcos.sdk.v3.codec.datatypes.Utf8String.class,
                                        org.fisco.bcos.sdk.v3.codec.Utils.typeMap(
                                                dataRight,
                                                org.fisco.bcos.sdk.v3.codec.datatypes.Utf8String
                                                        .class))),
                        Collections.<TypeReference<?>>emptyList(),
                        0);
        return executeTransaction(function);
    }

    public String getSignedTransactionForGrantUserDataRight(
            String udri, String bid, List<String> dataRight) {
        final Function function =
                new Function(
                        FUNC_GRANTUSERDATARIGHT,
                        Arrays.<Type>asList(
                                new org.fisco.bcos.sdk.v3.codec.datatypes.Utf8String(udri),
                                new org.fisco.bcos.sdk.v3.codec.datatypes.Utf8String(bid),
                                new org.fisco.bcos.sdk.v3.codec.datatypes.DynamicArray<
                                        org.fisco.bcos.sdk.v3.codec.datatypes.Utf8String>(
                                        org.fisco.bcos.sdk.v3.codec.datatypes.Utf8String.class,
                                        org.fisco.bcos.sdk.v3.codec.Utils.typeMap(
                                                dataRight,
                                                org.fisco.bcos.sdk.v3.codec.datatypes.Utf8String
                                                        .class))),
                        Collections.<TypeReference<?>>emptyList(),
                        0);
        return createSignedTransaction(function);
    }

    public String grantUserDataRight(
            String udri, String bid, List<String> dataRight, TransactionCallback callback) {
        final Function function =
                new Function(
                        FUNC_GRANTUSERDATARIGHT,
                        Arrays.<Type>asList(
                                new org.fisco.bcos.sdk.v3.codec.datatypes.Utf8String(udri),
                                new org.fisco.bcos.sdk.v3.codec.datatypes.Utf8String(bid),
                                new org.fisco.bcos.sdk.v3.codec.datatypes.DynamicArray<
                                        org.fisco.bcos.sdk.v3.codec.datatypes.Utf8String>(
                                        org.fisco.bcos.sdk.v3.codec.datatypes.Utf8String.class,
                                        org.fisco.bcos.sdk.v3.codec.Utils.typeMap(
                                                dataRight,
                                                org.fisco.bcos.sdk.v3.codec.datatypes.Utf8String
                                                        .class))),
                        Collections.<TypeReference<?>>emptyList(),
                        0);
        return asyncExecuteTransaction(function, callback);
    }

    public Tuple3<String, String, List<String>> getGrantUserDataRightInput(
            TransactionReceipt transactionReceipt) {
        String data = transactionReceipt.getInput().substring(10);
        final Function function =
                new Function(
                        FUNC_GRANTUSERDATARIGHT,
                        Arrays.<Type>asList(),
                        Arrays.<TypeReference<?>>asList(
                                new TypeReference<Utf8String>() {},
                                new TypeReference<Utf8String>() {},
                                new TypeReference<DynamicArray<Utf8String>>() {}));
        List<Type> results =
                this.functionReturnDecoder.decode(data, function.getOutputParameters());
        return new Tuple3<String, String, List<String>>(
                (String) results.get(0).getValue(),
                (String) results.get(1).getValue(),
                convertToNative((List<Utf8String>) results.get(2).getValue()));
    }

    public TransactionReceipt grantUserManagePermission(String bid, String user) {
        final Function function =
                new Function(
                        FUNC_GRANTUSERMANAGEPERMISSION,
                        Arrays.<Type>asList(
                                new org.fisco.bcos.sdk.v3.codec.datatypes.Utf8String(bid),
                                new org.fisco.bcos.sdk.v3.codec.datatypes.Address(user)),
                        Collections.<TypeReference<?>>emptyList(),
                        0);
        return executeTransaction(function);
    }

    public String getSignedTransactionForGrantUserManagePermission(String bid, String user) {
        final Function function =
                new Function(
                        FUNC_GRANTUSERMANAGEPERMISSION,
                        Arrays.<Type>asList(
                                new org.fisco.bcos.sdk.v3.codec.datatypes.Utf8String(bid),
                                new org.fisco.bcos.sdk.v3.codec.datatypes.Address(user)),
                        Collections.<TypeReference<?>>emptyList(),
                        0);
        return createSignedTransaction(function);
    }

    public String grantUserManagePermission(String bid, String user, TransactionCallback callback) {
        final Function function =
                new Function(
                        FUNC_GRANTUSERMANAGEPERMISSION,
                        Arrays.<Type>asList(
                                new org.fisco.bcos.sdk.v3.codec.datatypes.Utf8String(bid),
                                new org.fisco.bcos.sdk.v3.codec.datatypes.Address(user)),
                        Collections.<TypeReference<?>>emptyList(),
                        0);
        return asyncExecuteTransaction(function, callback);
    }

    public Tuple2<String, String> getGrantUserManagePermissionInput(
            TransactionReceipt transactionReceipt) {
        String data = transactionReceipt.getInput().substring(10);
        final Function function =
                new Function(
                        FUNC_GRANTUSERMANAGEPERMISSION,
                        Arrays.<Type>asList(),
                        Arrays.<TypeReference<?>>asList(
                                new TypeReference<Utf8String>() {},
                                new TypeReference<Address>() {}));
        List<Type> results =
                this.functionReturnDecoder.decode(data, function.getOutputParameters());
        return new Tuple2<String, String>(
                (String) results.get(0).getValue(), (String) results.get(1).getValue());
    }

    public TransactionReceipt grantUserRoles(String bid, List<String> roles) {
        final Function function =
                new Function(
                        FUNC_GRANTUSERROLES,
                        Arrays.<Type>asList(
                                new org.fisco.bcos.sdk.v3.codec.datatypes.Utf8String(bid),
                                new org.fisco.bcos.sdk.v3.codec.datatypes.DynamicArray<
                                        org.fisco.bcos.sdk.v3.codec.datatypes.Utf8String>(
                                        org.fisco.bcos.sdk.v3.codec.datatypes.Utf8String.class,
                                        org.fisco.bcos.sdk.v3.codec.Utils.typeMap(
                                                roles,
                                                org.fisco.bcos.sdk.v3.codec.datatypes.Utf8String
                                                        .class))),
                        Collections.<TypeReference<?>>emptyList(),
                        0);
        return executeTransaction(function);
    }

    public String getSignedTransactionForGrantUserRoles(String bid, List<String> roles) {
        final Function function =
                new Function(
                        FUNC_GRANTUSERROLES,
                        Arrays.<Type>asList(
                                new org.fisco.bcos.sdk.v3.codec.datatypes.Utf8String(bid),
                                new org.fisco.bcos.sdk.v3.codec.datatypes.DynamicArray<
                                        org.fisco.bcos.sdk.v3.codec.datatypes.Utf8String>(
                                        org.fisco.bcos.sdk.v3.codec.datatypes.Utf8String.class,
                                        org.fisco.bcos.sdk.v3.codec.Utils.typeMap(
                                                roles,
                                                org.fisco.bcos.sdk.v3.codec.datatypes.Utf8String
                                                        .class))),
                        Collections.<TypeReference<?>>emptyList(),
                        0);
        return createSignedTransaction(function);
    }

    public String grantUserRoles(String bid, List<String> roles, TransactionCallback callback) {
        final Function function =
                new Function(
                        FUNC_GRANTUSERROLES,
                        Arrays.<Type>asList(
                                new org.fisco.bcos.sdk.v3.codec.datatypes.Utf8String(bid),
                                new org.fisco.bcos.sdk.v3.codec.datatypes.DynamicArray<
                                        org.fisco.bcos.sdk.v3.codec.datatypes.Utf8String>(
                                        org.fisco.bcos.sdk.v3.codec.datatypes.Utf8String.class,
                                        org.fisco.bcos.sdk.v3.codec.Utils.typeMap(
                                                roles,
                                                org.fisco.bcos.sdk.v3.codec.datatypes.Utf8String
                                                        .class))),
                        Collections.<TypeReference<?>>emptyList(),
                        0);
        return asyncExecuteTransaction(function, callback);
    }

    public Tuple2<String, List<String>> getGrantUserRolesInput(
            TransactionReceipt transactionReceipt) {
        String data = transactionReceipt.getInput().substring(10);
        final Function function =
                new Function(
                        FUNC_GRANTUSERROLES,
                        Arrays.<Type>asList(),
                        Arrays.<TypeReference<?>>asList(
                                new TypeReference<Utf8String>() {},
                                new TypeReference<DynamicArray<Utf8String>>() {}));
        List<Type> results =
                this.functionReturnDecoder.decode(data, function.getOutputParameters());
        return new Tuple2<String, List<String>>(
                (String) results.get(0).getValue(),
                convertToNative((List<Utf8String>) results.get(1).getValue()));
    }

    public Boolean hasDAUserManageRole(String bid) throws ContractException {
        final Function function =
                new Function(
                        FUNC_HASDAUSERMANAGEROLE,
                        Arrays.<Type>asList(
                                new org.fisco.bcos.sdk.v3.codec.datatypes.Utf8String(bid)),
                        Arrays.<TypeReference<?>>asList(new TypeReference<Bool>() {}));
        return executeCallWithSingleValueReturn(function, Boolean.class);
    }

    public Boolean hasRole(byte[] role, String account) throws ContractException {
        final Function function =
                new Function(
                        FUNC_HASROLE,
                        Arrays.<Type>asList(
                                new org.fisco.bcos.sdk.v3.codec.datatypes.generated.Bytes32(role),
                                new org.fisco.bcos.sdk.v3.codec.datatypes.Address(account)),
                        Arrays.<TypeReference<?>>asList(new TypeReference<Bool>() {}));
        return executeCallWithSingleValueReturn(function, Boolean.class);
    }

    public TransactionReceipt initialize() {
        final Function function =
                new Function(
                        FUNC_INITIALIZE,
                        Arrays.<Type>asList(),
                        Collections.<TypeReference<?>>emptyList(),
                        0);
        return executeTransaction(function);
    }

    public String getSignedTransactionForInitialize() {
        final Function function =
                new Function(
                        FUNC_INITIALIZE,
                        Arrays.<Type>asList(),
                        Collections.<TypeReference<?>>emptyList(),
                        0);
        return createSignedTransaction(function);
    }

    public String initialize(TransactionCallback callback) {
        final Function function =
                new Function(
                        FUNC_INITIALIZE,
                        Arrays.<Type>asList(),
                        Collections.<TypeReference<?>>emptyList(),
                        0);
        return asyncExecuteTransaction(function, callback);
    }

    public List queryUserRole() throws ContractException {
        final Function function =
                new Function(
                        FUNC_QUERYUSERROLE,
                        Arrays.<Type>asList(),
                        Arrays.<TypeReference<?>>asList(
                                new TypeReference<DynamicArray<Utf8String>>() {}));
        List<Type> result = (List<Type>) executeCallWithSingleValueReturn(function, List.class);
        return convertToNative(result);
    }

    public TransactionReceipt renounceRole(byte[] role, String account) {
        final Function function =
                new Function(
                        FUNC_RENOUNCEROLE,
                        Arrays.<Type>asList(
                                new org.fisco.bcos.sdk.v3.codec.datatypes.generated.Bytes32(role),
                                new org.fisco.bcos.sdk.v3.codec.datatypes.Address(account)),
                        Collections.<TypeReference<?>>emptyList(),
                        0);
        return executeTransaction(function);
    }

    public String getSignedTransactionForRenounceRole(byte[] role, String account) {
        final Function function =
                new Function(
                        FUNC_RENOUNCEROLE,
                        Arrays.<Type>asList(
                                new org.fisco.bcos.sdk.v3.codec.datatypes.generated.Bytes32(role),
                                new org.fisco.bcos.sdk.v3.codec.datatypes.Address(account)),
                        Collections.<TypeReference<?>>emptyList(),
                        0);
        return createSignedTransaction(function);
    }

    public String renounceRole(byte[] role, String account, TransactionCallback callback) {
        final Function function =
                new Function(
                        FUNC_RENOUNCEROLE,
                        Arrays.<Type>asList(
                                new org.fisco.bcos.sdk.v3.codec.datatypes.generated.Bytes32(role),
                                new org.fisco.bcos.sdk.v3.codec.datatypes.Address(account)),
                        Collections.<TypeReference<?>>emptyList(),
                        0);
        return asyncExecuteTransaction(function, callback);
    }

    public Tuple2<byte[], String> getRenounceRoleInput(TransactionReceipt transactionReceipt) {
        String data = transactionReceipt.getInput().substring(10);
        final Function function =
                new Function(
                        FUNC_RENOUNCEROLE,
                        Arrays.<Type>asList(),
                        Arrays.<TypeReference<?>>asList(
                                new TypeReference<Bytes32>() {}, new TypeReference<Address>() {}));
        List<Type> results =
                this.functionReturnDecoder.decode(data, function.getOutputParameters());
        return new Tuple2<byte[], String>(
                (byte[]) results.get(0).getValue(), (String) results.get(1).getValue());
    }

    public TransactionReceipt revokeRole(byte[] role, String account) {
        final Function function =
                new Function(
                        FUNC_REVOKEROLE,
                        Arrays.<Type>asList(
                                new org.fisco.bcos.sdk.v3.codec.datatypes.generated.Bytes32(role),
                                new org.fisco.bcos.sdk.v3.codec.datatypes.Address(account)),
                        Collections.<TypeReference<?>>emptyList(),
                        4);
        return executeTransaction(function);
    }

    public String getSignedTransactionForRevokeRole(byte[] role, String account) {
        final Function function =
                new Function(
                        FUNC_REVOKEROLE,
                        Arrays.<Type>asList(
                                new org.fisco.bcos.sdk.v3.codec.datatypes.generated.Bytes32(role),
                                new org.fisco.bcos.sdk.v3.codec.datatypes.Address(account)),
                        Collections.<TypeReference<?>>emptyList(),
                        4);
        return createSignedTransaction(function);
    }

    public String revokeRole(byte[] role, String account, TransactionCallback callback) {
        final Function function =
                new Function(
                        FUNC_REVOKEROLE,
                        Arrays.<Type>asList(
                                new org.fisco.bcos.sdk.v3.codec.datatypes.generated.Bytes32(role),
                                new org.fisco.bcos.sdk.v3.codec.datatypes.Address(account)),
                        Collections.<TypeReference<?>>emptyList(),
                        4);
        return asyncExecuteTransaction(function, callback);
    }

    public Tuple2<byte[], String> getRevokeRoleInput(TransactionReceipt transactionReceipt) {
        String data = transactionReceipt.getInput().substring(10);
        final Function function =
                new Function(
                        FUNC_REVOKEROLE,
                        Arrays.<Type>asList(),
                        Arrays.<TypeReference<?>>asList(
                                new TypeReference<Bytes32>() {}, new TypeReference<Address>() {}));
        List<Type> results =
                this.functionReturnDecoder.decode(data, function.getOutputParameters());
        return new Tuple2<byte[], String>(
                (byte[]) results.get(0).getValue(), (String) results.get(1).getValue());
    }

    public TransactionReceipt revokeUserManagePermission(String bid) {
        final Function function =
                new Function(
                        FUNC_REVOKEUSERMANAGEPERMISSION,
                        Arrays.<Type>asList(
                                new org.fisco.bcos.sdk.v3.codec.datatypes.Utf8String(bid)),
                        Collections.<TypeReference<?>>emptyList(),
                        0);
        return executeTransaction(function);
    }

    public String getSignedTransactionForRevokeUserManagePermission(String bid) {
        final Function function =
                new Function(
                        FUNC_REVOKEUSERMANAGEPERMISSION,
                        Arrays.<Type>asList(
                                new org.fisco.bcos.sdk.v3.codec.datatypes.Utf8String(bid)),
                        Collections.<TypeReference<?>>emptyList(),
                        0);
        return createSignedTransaction(function);
    }

    public String revokeUserManagePermission(String bid, TransactionCallback callback) {
        final Function function =
                new Function(
                        FUNC_REVOKEUSERMANAGEPERMISSION,
                        Arrays.<Type>asList(
                                new org.fisco.bcos.sdk.v3.codec.datatypes.Utf8String(bid)),
                        Collections.<TypeReference<?>>emptyList(),
                        0);
        return asyncExecuteTransaction(function, callback);
    }

    public Tuple1<String> getRevokeUserManagePermissionInput(
            TransactionReceipt transactionReceipt) {
        String data = transactionReceipt.getInput().substring(10);
        final Function function =
                new Function(
                        FUNC_REVOKEUSERMANAGEPERMISSION,
                        Arrays.<Type>asList(),
                        Arrays.<TypeReference<?>>asList(new TypeReference<Utf8String>() {}));
        List<Type> results =
                this.functionReturnDecoder.decode(data, function.getOutputParameters());
        return new Tuple1<String>((String) results.get(0).getValue());
    }

    public TransactionReceipt revokeUserRoles(String bid, List<String> roles) {
        final Function function =
                new Function(
                        FUNC_REVOKEUSERROLES,
                        Arrays.<Type>asList(
                                new org.fisco.bcos.sdk.v3.codec.datatypes.Utf8String(bid),
                                new org.fisco.bcos.sdk.v3.codec.datatypes.DynamicArray<
                                        org.fisco.bcos.sdk.v3.codec.datatypes.Utf8String>(
                                        org.fisco.bcos.sdk.v3.codec.datatypes.Utf8String.class,
                                        org.fisco.bcos.sdk.v3.codec.Utils.typeMap(
                                                roles,
                                                org.fisco.bcos.sdk.v3.codec.datatypes.Utf8String
                                                        .class))),
                        Collections.<TypeReference<?>>emptyList(),
                        0);
        return executeTransaction(function);
    }

    public String getSignedTransactionForRevokeUserRoles(String bid, List<String> roles) {
        final Function function =
                new Function(
                        FUNC_REVOKEUSERROLES,
                        Arrays.<Type>asList(
                                new org.fisco.bcos.sdk.v3.codec.datatypes.Utf8String(bid),
                                new org.fisco.bcos.sdk.v3.codec.datatypes.DynamicArray<
                                        org.fisco.bcos.sdk.v3.codec.datatypes.Utf8String>(
                                        org.fisco.bcos.sdk.v3.codec.datatypes.Utf8String.class,
                                        org.fisco.bcos.sdk.v3.codec.Utils.typeMap(
                                                roles,
                                                org.fisco.bcos.sdk.v3.codec.datatypes.Utf8String
                                                        .class))),
                        Collections.<TypeReference<?>>emptyList(),
                        0);
        return createSignedTransaction(function);
    }

    public String revokeUserRoles(String bid, List<String> roles, TransactionCallback callback) {
        final Function function =
                new Function(
                        FUNC_REVOKEUSERROLES,
                        Arrays.<Type>asList(
                                new org.fisco.bcos.sdk.v3.codec.datatypes.Utf8String(bid),
                                new org.fisco.bcos.sdk.v3.codec.datatypes.DynamicArray<
                                        org.fisco.bcos.sdk.v3.codec.datatypes.Utf8String>(
                                        org.fisco.bcos.sdk.v3.codec.datatypes.Utf8String.class,
                                        org.fisco.bcos.sdk.v3.codec.Utils.typeMap(
                                                roles,
                                                org.fisco.bcos.sdk.v3.codec.datatypes.Utf8String
                                                        .class))),
                        Collections.<TypeReference<?>>emptyList(),
                        0);
        return asyncExecuteTransaction(function, callback);
    }

    public Tuple2<String, List<String>> getRevokeUserRolesInput(
            TransactionReceipt transactionReceipt) {
        String data = transactionReceipt.getInput().substring(10);
        final Function function =
                new Function(
                        FUNC_REVOKEUSERROLES,
                        Arrays.<Type>asList(),
                        Arrays.<TypeReference<?>>asList(
                                new TypeReference<Utf8String>() {},
                                new TypeReference<DynamicArray<Utf8String>>() {}));
        List<Type> results =
                this.functionReturnDecoder.decode(data, function.getOutputParameters());
        return new Tuple2<String, List<String>>(
                (String) results.get(0).getValue(),
                convertToNative((List<Utf8String>) results.get(1).getValue()));
    }

    public TransactionReceipt setChainName(String name) {
        final Function function =
                new Function(
                        FUNC_SETCHAINNAME,
                        Arrays.<Type>asList(
                                new org.fisco.bcos.sdk.v3.codec.datatypes.Utf8String(name)),
                        Collections.<TypeReference<?>>emptyList(),
                        0);
        return executeTransaction(function);
    }

    public String getSignedTransactionForSetChainName(String name) {
        final Function function =
                new Function(
                        FUNC_SETCHAINNAME,
                        Arrays.<Type>asList(
                                new org.fisco.bcos.sdk.v3.codec.datatypes.Utf8String(name)),
                        Collections.<TypeReference<?>>emptyList(),
                        0);
        return createSignedTransaction(function);
    }

    public String setChainName(String name, TransactionCallback callback) {
        final Function function =
                new Function(
                        FUNC_SETCHAINNAME,
                        Arrays.<Type>asList(
                                new org.fisco.bcos.sdk.v3.codec.datatypes.Utf8String(name)),
                        Collections.<TypeReference<?>>emptyList(),
                        0);
        return asyncExecuteTransaction(function, callback);
    }

    public Tuple1<String> getSetChainNameInput(TransactionReceipt transactionReceipt) {
        String data = transactionReceipt.getInput().substring(10);
        final Function function =
                new Function(
                        FUNC_SETCHAINNAME,
                        Arrays.<Type>asList(),
                        Arrays.<TypeReference<?>>asList(new TypeReference<Utf8String>() {}));
        List<Type> results =
                this.functionReturnDecoder.decode(data, function.getOutputParameters());
        return new Tuple1<String>((String) results.get(0).getValue());
    }

    public TransactionReceipt setDataRightCategory(List<String> fields) {
        final Function function =
                new Function(
                        FUNC_SETDATARIGHTCATEGORY,
                        Arrays.<Type>asList(
                                new org.fisco.bcos.sdk.v3.codec.datatypes.DynamicArray<
                                        org.fisco.bcos.sdk.v3.codec.datatypes.Utf8String>(
                                        org.fisco.bcos.sdk.v3.codec.datatypes.Utf8String.class,
                                        org.fisco.bcos.sdk.v3.codec.Utils.typeMap(
                                                fields,
                                                org.fisco.bcos.sdk.v3.codec.datatypes.Utf8String
                                                        .class))),
                        Collections.<TypeReference<?>>emptyList(),
                        0);
        return executeTransaction(function);
    }

    public String getSignedTransactionForSetDataRightCategory(List<String> fields) {
        final Function function =
                new Function(
                        FUNC_SETDATARIGHTCATEGORY,
                        Arrays.<Type>asList(
                                new org.fisco.bcos.sdk.v3.codec.datatypes.DynamicArray<
                                        org.fisco.bcos.sdk.v3.codec.datatypes.Utf8String>(
                                        org.fisco.bcos.sdk.v3.codec.datatypes.Utf8String.class,
                                        org.fisco.bcos.sdk.v3.codec.Utils.typeMap(
                                                fields,
                                                org.fisco.bcos.sdk.v3.codec.datatypes.Utf8String
                                                        .class))),
                        Collections.<TypeReference<?>>emptyList(),
                        0);
        return createSignedTransaction(function);
    }

    public String setDataRightCategory(List<String> fields, TransactionCallback callback) {
        final Function function =
                new Function(
                        FUNC_SETDATARIGHTCATEGORY,
                        Arrays.<Type>asList(
                                new org.fisco.bcos.sdk.v3.codec.datatypes.DynamicArray<
                                        org.fisco.bcos.sdk.v3.codec.datatypes.Utf8String>(
                                        org.fisco.bcos.sdk.v3.codec.datatypes.Utf8String.class,
                                        org.fisco.bcos.sdk.v3.codec.Utils.typeMap(
                                                fields,
                                                org.fisco.bcos.sdk.v3.codec.datatypes.Utf8String
                                                        .class))),
                        Collections.<TypeReference<?>>emptyList(),
                        0);
        return asyncExecuteTransaction(function, callback);
    }

    public Tuple1<List<String>> getSetDataRightCategoryInput(
            TransactionReceipt transactionReceipt) {
        String data = transactionReceipt.getInput().substring(10);
        final Function function =
                new Function(
                        FUNC_SETDATARIGHTCATEGORY,
                        Arrays.<Type>asList(),
                        Arrays.<TypeReference<?>>asList(
                                new TypeReference<DynamicArray<Utf8String>>() {}));
        List<Type> results =
                this.functionReturnDecoder.decode(data, function.getOutputParameters());
        return new Tuple1<List<String>>(
                convertToNative((List<Utf8String>) results.get(0).getValue()));
    }

    public TransactionReceipt setDataRightSupportVariableDataFields(
            String category, List<String> fields) {
        final Function function =
                new Function(
                        FUNC_SETDATARIGHTSUPPORTVARIABLEDATAFIELDS,
                        Arrays.<Type>asList(
                                new org.fisco.bcos.sdk.v3.codec.datatypes.Utf8String(category),
                                new org.fisco.bcos.sdk.v3.codec.datatypes.DynamicArray<
                                        org.fisco.bcos.sdk.v3.codec.datatypes.Utf8String>(
                                        org.fisco.bcos.sdk.v3.codec.datatypes.Utf8String.class,
                                        org.fisco.bcos.sdk.v3.codec.Utils.typeMap(
                                                fields,
                                                org.fisco.bcos.sdk.v3.codec.datatypes.Utf8String
                                                        .class))),
                        Collections.<TypeReference<?>>emptyList(),
                        0);
        return executeTransaction(function);
    }

    public String getSignedTransactionForSetDataRightSupportVariableDataFields(
            String category, List<String> fields) {
        final Function function =
                new Function(
                        FUNC_SETDATARIGHTSUPPORTVARIABLEDATAFIELDS,
                        Arrays.<Type>asList(
                                new org.fisco.bcos.sdk.v3.codec.datatypes.Utf8String(category),
                                new org.fisco.bcos.sdk.v3.codec.datatypes.DynamicArray<
                                        org.fisco.bcos.sdk.v3.codec.datatypes.Utf8String>(
                                        org.fisco.bcos.sdk.v3.codec.datatypes.Utf8String.class,
                                        org.fisco.bcos.sdk.v3.codec.Utils.typeMap(
                                                fields,
                                                org.fisco.bcos.sdk.v3.codec.datatypes.Utf8String
                                                        .class))),
                        Collections.<TypeReference<?>>emptyList(),
                        0);
        return createSignedTransaction(function);
    }

    public String setDataRightSupportVariableDataFields(
            String category, List<String> fields, TransactionCallback callback) {
        final Function function =
                new Function(
                        FUNC_SETDATARIGHTSUPPORTVARIABLEDATAFIELDS,
                        Arrays.<Type>asList(
                                new org.fisco.bcos.sdk.v3.codec.datatypes.Utf8String(category),
                                new org.fisco.bcos.sdk.v3.codec.datatypes.DynamicArray<
                                        org.fisco.bcos.sdk.v3.codec.datatypes.Utf8String>(
                                        org.fisco.bcos.sdk.v3.codec.datatypes.Utf8String.class,
                                        org.fisco.bcos.sdk.v3.codec.Utils.typeMap(
                                                fields,
                                                org.fisco.bcos.sdk.v3.codec.datatypes.Utf8String
                                                        .class))),
                        Collections.<TypeReference<?>>emptyList(),
                        0);
        return asyncExecuteTransaction(function, callback);
    }

    public Tuple2<String, List<String>> getSetDataRightSupportVariableDataFieldsInput(
            TransactionReceipt transactionReceipt) {
        String data = transactionReceipt.getInput().substring(10);
        final Function function =
                new Function(
                        FUNC_SETDATARIGHTSUPPORTVARIABLEDATAFIELDS,
                        Arrays.<Type>asList(),
                        Arrays.<TypeReference<?>>asList(
                                new TypeReference<Utf8String>() {},
                                new TypeReference<DynamicArray<Utf8String>>() {}));
        List<Type> results =
                this.functionReturnDecoder.decode(data, function.getOutputParameters());
        return new Tuple2<String, List<String>>(
                (String) results.get(0).getValue(),
                convertToNative((List<Utf8String>) results.get(1).getValue()));
    }

    public TransactionReceipt setTextMaxLen(BigInteger len) {
        final Function function =
                new Function(
                        FUNC_SETTEXTMAXLEN,
                        Arrays.<Type>asList(
                                new org.fisco.bcos.sdk.v3.codec.datatypes.generated.Uint32(len)),
                        Collections.<TypeReference<?>>emptyList(),
                        0);
        return executeTransaction(function);
    }

    public String getSignedTransactionForSetTextMaxLen(BigInteger len) {
        final Function function =
                new Function(
                        FUNC_SETTEXTMAXLEN,
                        Arrays.<Type>asList(
                                new org.fisco.bcos.sdk.v3.codec.datatypes.generated.Uint32(len)),
                        Collections.<TypeReference<?>>emptyList(),
                        0);
        return createSignedTransaction(function);
    }

    public String setTextMaxLen(BigInteger len, TransactionCallback callback) {
        final Function function =
                new Function(
                        FUNC_SETTEXTMAXLEN,
                        Arrays.<Type>asList(
                                new org.fisco.bcos.sdk.v3.codec.datatypes.generated.Uint32(len)),
                        Collections.<TypeReference<?>>emptyList(),
                        0);
        return asyncExecuteTransaction(function, callback);
    }

    public Tuple1<BigInteger> getSetTextMaxLenInput(TransactionReceipt transactionReceipt) {
        String data = transactionReceipt.getInput().substring(10);
        final Function function =
                new Function(
                        FUNC_SETTEXTMAXLEN,
                        Arrays.<Type>asList(),
                        Arrays.<TypeReference<?>>asList(new TypeReference<Uint32>() {}));
        List<Type> results =
                this.functionReturnDecoder.decode(data, function.getOutputParameters());
        return new Tuple1<BigInteger>((BigInteger) results.get(0).getValue());
    }

    public TransactionReceipt setstrArrayMaxLen(BigInteger len) {
        final Function function =
                new Function(
                        FUNC_SETSTRARRAYMAXLEN,
                        Arrays.<Type>asList(
                                new org.fisco.bcos.sdk.v3.codec.datatypes.generated.Uint32(len)),
                        Collections.<TypeReference<?>>emptyList(),
                        0);
        return executeTransaction(function);
    }

    public String getSignedTransactionForSetstrArrayMaxLen(BigInteger len) {
        final Function function =
                new Function(
                        FUNC_SETSTRARRAYMAXLEN,
                        Arrays.<Type>asList(
                                new org.fisco.bcos.sdk.v3.codec.datatypes.generated.Uint32(len)),
                        Collections.<TypeReference<?>>emptyList(),
                        0);
        return createSignedTransaction(function);
    }

    public String setstrArrayMaxLen(BigInteger len, TransactionCallback callback) {
        final Function function =
                new Function(
                        FUNC_SETSTRARRAYMAXLEN,
                        Arrays.<Type>asList(
                                new org.fisco.bcos.sdk.v3.codec.datatypes.generated.Uint32(len)),
                        Collections.<TypeReference<?>>emptyList(),
                        0);
        return asyncExecuteTransaction(function, callback);
    }

    public Tuple1<BigInteger> getSetstrArrayMaxLenInput(TransactionReceipt transactionReceipt) {
        String data = transactionReceipt.getInput().substring(10);
        final Function function =
                new Function(
                        FUNC_SETSTRARRAYMAXLEN,
                        Arrays.<Type>asList(),
                        Arrays.<TypeReference<?>>asList(new TypeReference<Uint32>() {}));
        List<Type> results =
                this.functionReturnDecoder.decode(data, function.getOutputParameters());
        return new Tuple1<BigInteger>((BigInteger) results.get(0).getValue());
    }

    public Boolean supportsInterface(byte[] interfaceId) throws ContractException {
        final Function function =
                new Function(
                        FUNC_SUPPORTSINTERFACE,
                        Arrays.<Type>asList(
                                new org.fisco.bcos.sdk.v3.codec.datatypes.generated.Bytes4(
                                        interfaceId)),
                        Arrays.<TypeReference<?>>asList(new TypeReference<Bool>() {}));
        return executeCallWithSingleValueReturn(function, Boolean.class);
    }

    public TransactionReceipt withdrawDataRightRegister(String udri, List<String> dataRight) {
        final Function function =
                new Function(
                        FUNC_WITHDRAWDATARIGHTREGISTER,
                        Arrays.<Type>asList(
                                new org.fisco.bcos.sdk.v3.codec.datatypes.Utf8String(udri),
                                new org.fisco.bcos.sdk.v3.codec.datatypes.DynamicArray<
                                        org.fisco.bcos.sdk.v3.codec.datatypes.Utf8String>(
                                        org.fisco.bcos.sdk.v3.codec.datatypes.Utf8String.class,
                                        org.fisco.bcos.sdk.v3.codec.Utils.typeMap(
                                                dataRight,
                                                org.fisco.bcos.sdk.v3.codec.datatypes.Utf8String
                                                        .class))),
                        Collections.<TypeReference<?>>emptyList(),
                        0);
        return executeTransaction(function);
    }

    public String getSignedTransactionForWithdrawDataRightRegister(
            String udri, List<String> dataRight) {
        final Function function =
                new Function(
                        FUNC_WITHDRAWDATARIGHTREGISTER,
                        Arrays.<Type>asList(
                                new org.fisco.bcos.sdk.v3.codec.datatypes.Utf8String(udri),
                                new org.fisco.bcos.sdk.v3.codec.datatypes.DynamicArray<
                                        org.fisco.bcos.sdk.v3.codec.datatypes.Utf8String>(
                                        org.fisco.bcos.sdk.v3.codec.datatypes.Utf8String.class,
                                        org.fisco.bcos.sdk.v3.codec.Utils.typeMap(
                                                dataRight,
                                                org.fisco.bcos.sdk.v3.codec.datatypes.Utf8String
                                                        .class))),
                        Collections.<TypeReference<?>>emptyList(),
                        0);
        return createSignedTransaction(function);
    }

    public String withdrawDataRightRegister(
            String udri, List<String> dataRight, TransactionCallback callback) {
        final Function function =
                new Function(
                        FUNC_WITHDRAWDATARIGHTREGISTER,
                        Arrays.<Type>asList(
                                new org.fisco.bcos.sdk.v3.codec.datatypes.Utf8String(udri),
                                new org.fisco.bcos.sdk.v3.codec.datatypes.DynamicArray<
                                        org.fisco.bcos.sdk.v3.codec.datatypes.Utf8String>(
                                        org.fisco.bcos.sdk.v3.codec.datatypes.Utf8String.class,
                                        org.fisco.bcos.sdk.v3.codec.Utils.typeMap(
                                                dataRight,
                                                org.fisco.bcos.sdk.v3.codec.datatypes.Utf8String
                                                        .class))),
                        Collections.<TypeReference<?>>emptyList(),
                        0);
        return asyncExecuteTransaction(function, callback);
    }

    public Tuple2<String, List<String>> getWithdrawDataRightRegisterInput(
            TransactionReceipt transactionReceipt) {
        String data = transactionReceipt.getInput().substring(10);
        final Function function =
                new Function(
                        FUNC_WITHDRAWDATARIGHTREGISTER,
                        Arrays.<Type>asList(),
                        Arrays.<TypeReference<?>>asList(
                                new TypeReference<Utf8String>() {},
                                new TypeReference<DynamicArray<Utf8String>>() {}));
        List<Type> results =
                this.functionReturnDecoder.decode(data, function.getOutputParameters());
        return new Tuple2<String, List<String>>(
                (String) results.get(0).getValue(),
                convertToNative((List<Utf8String>) results.get(1).getValue()));
    }

    public TransactionReceipt withdrawReviewEvidence(String udri, String reviewerBid) {
        final Function function =
                new Function(
                        FUNC_WITHDRAWREVIEWEVIDENCE,
                        Arrays.<Type>asList(
                                new org.fisco.bcos.sdk.v3.codec.datatypes.Utf8String(udri),
                                new org.fisco.bcos.sdk.v3.codec.datatypes.Utf8String(reviewerBid)),
                        Collections.<TypeReference<?>>emptyList(),
                        0);
        return executeTransaction(function);
    }

    public String getSignedTransactionForWithdrawReviewEvidence(String udri, String reviewerBid) {
        final Function function =
                new Function(
                        FUNC_WITHDRAWREVIEWEVIDENCE,
                        Arrays.<Type>asList(
                                new org.fisco.bcos.sdk.v3.codec.datatypes.Utf8String(udri),
                                new org.fisco.bcos.sdk.v3.codec.datatypes.Utf8String(reviewerBid)),
                        Collections.<TypeReference<?>>emptyList(),
                        0);
        return createSignedTransaction(function);
    }

    public String withdrawReviewEvidence(
            String udri, String reviewerBid, TransactionCallback callback) {
        final Function function =
                new Function(
                        FUNC_WITHDRAWREVIEWEVIDENCE,
                        Arrays.<Type>asList(
                                new org.fisco.bcos.sdk.v3.codec.datatypes.Utf8String(udri),
                                new org.fisco.bcos.sdk.v3.codec.datatypes.Utf8String(reviewerBid)),
                        Collections.<TypeReference<?>>emptyList(),
                        0);
        return asyncExecuteTransaction(function, callback);
    }

    public Tuple2<String, String> getWithdrawReviewEvidenceInput(
            TransactionReceipt transactionReceipt) {
        String data = transactionReceipt.getInput().substring(10);
        final Function function =
                new Function(
                        FUNC_WITHDRAWREVIEWEVIDENCE,
                        Arrays.<Type>asList(),
                        Arrays.<TypeReference<?>>asList(
                                new TypeReference<Utf8String>() {},
                                new TypeReference<Utf8String>() {}));
        List<Type> results =
                this.functionReturnDecoder.decode(data, function.getOutputParameters());
        return new Tuple2<String, String>(
                (String) results.get(0).getValue(), (String) results.get(1).getValue());
    }

    public TransactionReceipt withdrawUserDataRight(
            String udri, String bid, List<String> dataRight) {
        final Function function =
                new Function(
                        FUNC_WITHDRAWUSERDATARIGHT,
                        Arrays.<Type>asList(
                                new org.fisco.bcos.sdk.v3.codec.datatypes.Utf8String(udri),
                                new org.fisco.bcos.sdk.v3.codec.datatypes.Utf8String(bid),
                                new org.fisco.bcos.sdk.v3.codec.datatypes.DynamicArray<
                                        org.fisco.bcos.sdk.v3.codec.datatypes.Utf8String>(
                                        org.fisco.bcos.sdk.v3.codec.datatypes.Utf8String.class,
                                        org.fisco.bcos.sdk.v3.codec.Utils.typeMap(
                                                dataRight,
                                                org.fisco.bcos.sdk.v3.codec.datatypes.Utf8String
                                                        .class))),
                        Collections.<TypeReference<?>>emptyList(),
                        0);
        return executeTransaction(function);
    }

    public String getSignedTransactionForWithdrawUserDataRight(
            String udri, String bid, List<String> dataRight) {
        final Function function =
                new Function(
                        FUNC_WITHDRAWUSERDATARIGHT,
                        Arrays.<Type>asList(
                                new org.fisco.bcos.sdk.v3.codec.datatypes.Utf8String(udri),
                                new org.fisco.bcos.sdk.v3.codec.datatypes.Utf8String(bid),
                                new org.fisco.bcos.sdk.v3.codec.datatypes.DynamicArray<
                                        org.fisco.bcos.sdk.v3.codec.datatypes.Utf8String>(
                                        org.fisco.bcos.sdk.v3.codec.datatypes.Utf8String.class,
                                        org.fisco.bcos.sdk.v3.codec.Utils.typeMap(
                                                dataRight,
                                                org.fisco.bcos.sdk.v3.codec.datatypes.Utf8String
                                                        .class))),
                        Collections.<TypeReference<?>>emptyList(),
                        0);
        return createSignedTransaction(function);
    }

    public String withdrawUserDataRight(
            String udri, String bid, List<String> dataRight, TransactionCallback callback) {
        final Function function =
                new Function(
                        FUNC_WITHDRAWUSERDATARIGHT,
                        Arrays.<Type>asList(
                                new org.fisco.bcos.sdk.v3.codec.datatypes.Utf8String(udri),
                                new org.fisco.bcos.sdk.v3.codec.datatypes.Utf8String(bid),
                                new org.fisco.bcos.sdk.v3.codec.datatypes.DynamicArray<
                                        org.fisco.bcos.sdk.v3.codec.datatypes.Utf8String>(
                                        org.fisco.bcos.sdk.v3.codec.datatypes.Utf8String.class,
                                        org.fisco.bcos.sdk.v3.codec.Utils.typeMap(
                                                dataRight,
                                                org.fisco.bcos.sdk.v3.codec.datatypes.Utf8String
                                                        .class))),
                        Collections.<TypeReference<?>>emptyList(),
                        0);
        return asyncExecuteTransaction(function, callback);
    }

    public Tuple3<String, String, List<String>> getWithdrawUserDataRightInput(
            TransactionReceipt transactionReceipt) {
        String data = transactionReceipt.getInput().substring(10);
        final Function function =
                new Function(
                        FUNC_WITHDRAWUSERDATARIGHT,
                        Arrays.<Type>asList(),
                        Arrays.<TypeReference<?>>asList(
                                new TypeReference<Utf8String>() {},
                                new TypeReference<Utf8String>() {},
                                new TypeReference<DynamicArray<Utf8String>>() {}));
        List<Type> results =
                this.functionReturnDecoder.decode(data, function.getOutputParameters());
        return new Tuple3<String, String, List<String>>(
                (String) results.get(0).getValue(),
                (String) results.get(1).getValue(),
                convertToNative((List<Utf8String>) results.get(2).getValue()));
    }

    public static DAEvidenceController load(
            String contractAddress, Client client, CryptoKeyPair credential) {
        return new DAEvidenceController(contractAddress, client, credential);
    }

    public static DAEvidenceController deploy(Client client, CryptoKeyPair credential)
            throws ContractException {
        return deploy(
                DAEvidenceController.class,
                client,
                credential,
                getBinary(client.getCryptoSuite()),
                getABI(),
                null,
                null);
    }

    public static class EvidenceCommStoredEventResponse {
        public TransactionReceipt.Logs log;

        public String sender;

        public byte[] eid;
    }

    public static class EvidenceStoredEventResponse {
        public TransactionReceipt.Logs log;

        public String sender;

        public byte[] udri;

        public byte[] usci;
    }

    public static class InitializedEventResponse {
        public TransactionReceipt.Logs log;

        public BigInteger version;
    }

    public static class RoleAdminChangedEventResponse {
        public TransactionReceipt.Logs log;

        public byte[] role;

        public byte[] previousAdminRole;

        public byte[] newAdminRole;
    }

    public static class RoleGrantedEventResponse {
        public TransactionReceipt.Logs log;

        public byte[] role;

        public String account;

        public String sender;
    }

    public static class RoleRevokedEventResponse {
        public TransactionReceipt.Logs log;

        public byte[] role;

        public String account;

        public String sender;
    }

    public static class UserCreatedEventResponse {
        public TransactionReceipt.Logs log;

        public String sender;

        public byte[] bid;

        public byte[] usci;
    }

    public static class UserRoleChangedEventResponse {
        public TransactionReceipt.Logs log;

        public String sender;

        public byte[] bid;
    }
}
